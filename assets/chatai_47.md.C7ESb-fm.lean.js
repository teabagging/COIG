import{_ as p,o,c as a,a as t,m as l,t as c,C as g,M as b,U as f,F as v,p as y,e as x,f as w,q as j}from"./chunks/framework.B1z0IdBH.js";const k={name:"PoemCard",props:{poem:{type:Object,required:!0}}},_={class:"poem-container"},P={class:"review"},C={class:"review-title"},D={class:"review-content"};function A(n,e,u,d,i,r){return o(),a("div",_,[t("div",P,[t("div",C,[e[0]||(e[0]=t("span",{class:"icon"},"❓:",-1)),l(c(u.poem.instruction),1)]),e[2]||(e[2]=t("div",{class:"divider"},null,-1)),t("p",D,[e[1]||(e[1]=t("span",{class:"icon"},"🧠:",-1)),l(c(u.poem.output),1)])])])}const E=p(k,[["render",A],["__scopeId","data-v-c6269a4a"]]),S=JSON.parse('[{"instruction":"process.nextTick()与promise.then()```process.nextTick(function(){    console.log(7);});new Promise(function(resolve){    console.log(3);    resolve();    console.log(4);}).then(function(){    console.log(5);});process.nextTick(function(){    console.log(8);});```这段代码运行结果是3，4，7，8，5process.nextTick和Promise都是Microtasks，为什么process.nextTick会先执行？","output":"process.nextTick 永远大于 promise.then，原因其实很简单。在Node中，_tickCallback在每一次执行完TaskQueue中的一个任务后被调用，而这个_tickCallback中实质上干了两件事：1.nextTickQueue中所有任务执行掉(长度最大1e4，Node版本v6.9.1)2.第一步执行完后执行_runMicrotasks函数，执行microtask中的部分(promise.then注册的回调)所以很明显 process.nextTick > promise.then"},{"instruction":"为什么js里面  0.1+0.2=0.30000000000000004？```var a =0.1;var b =0.2;log(a+b)//0.30000000000000004```这是什么原因","output":"本质是因为浮点数的问题。其实不用想的太复杂，你把0.1换算成二进制的形式就知道，它的二进制表示是一个无限循环的数。也就说实际上保存到内存里的0.1是一个近似值。然后一个近似于0.1的二进制数再转回10进制，就会出现这种问题。"},{"instruction":"JavaScript中typeof原理探究？我们都知道 `typeof(null) === \'object\'`，关于原因，在小黄书《你不知道的JavaScript》中有这么一段解释：原理是这样的， 不同的对象在底层都表示为二进制， 在 JavaScript 中二进制前三位都为 0 的话会被判断为 object 类型， null 的二进制表示是全 0， 自然前三位也是 0， 所以执行 typeof 时会返回“object”。我就想问下，不同的对象对应的二进制数是多少位的，具体值又是多少？比如String类型的二进制表示是多少？","output":"并不完全正确。我在知乎 有哪些明明是 bug，却被说成是 feature 的例子？ 有介绍过。javascript 中的 `null`：既是对象，又不是对象，史称「薛定谔的对象」。```typeof null === \'object\';null instanceof Object === false```而```null instanceof null```会抛出异常：```Uncaught TypeError: Right-hand side of \'instanceof\' is not an object```这是一个历史遗留下来的 feature(or bug?)，The history of “typeof null”在 javascript 的最初版本中，使用的 32 位系统，为了性能考虑使用低位存储了变量的类型信息：- 000：对象- 1：整数- 010：浮点数- 100：字符串- 110：布尔有 2 个值比较特殊：- undefined：用 - （−2^30）表示。- null：对应机器码的 NULL 指针，一般是全零。在第一版的 javascript 实现中，判断类型的代码是这么写的：```if (JSVAL_IS_VOID(v)) {  // (1)    type = JSTYPE_VOID;} else if (JSVAL_IS_OBJECT(v)) {  // (2)    obj = JSVAL_TO_OBJECT(v);    if (obj &&        (ops = obj->map->ops,            ops == &js_ObjectOps            ? (clasp = OBJ_GET_CLASS(cx, obj),            clasp->call || clasp == &js_FunctionClass) // (3,4)            : ops->call != 0)) {  // (3)        type = JSTYPE_FUNCTION;    } else {        type = JSTYPE_OBJECT;    }} else if (JSVAL_IS_NUMBER(v)) {    type = JSTYPE_NUMBER;} else if (JSVAL_IS_STRING(v)) {    type = JSTYPE_STRING;} else if (JSVAL_IS_BOOLEAN(v)) {    type = JSTYPE_BOOLEAN;}```（1）：判断是否为 undefined（2）：如果不是 undefined，判断是否为对象（3）：如果不是对象，判断是否为数字（4）：。。。这样一来，`null` 就出了一个 bug。根据 type tags 信息，低位是 `000`，因此 `null` 被判断成了一个对象。这就是为什么 `typeof null` 的返回值是 `object`。关于 `null` 的类型在 MDN 文档中也有简单的描述：typeof - javascript | MDN在 ES6 中曾有关于修复此 bug 的提议，提议中称应该让 `typeof null === \'null\'` http://wiki.ecmascript.org/do...:typeof_null 但是该提议被无情的否决了，自此 `typeof null` 终于不再是一个 bug，而是一个 feature，并且永远不会被修复。这是 JavaScript 最初实现的一个 bug，目前的 JavaScript 引擎已经不这么去实现了，但是这个 bug 却一直流传了下来。至于对象的内部表示，不同的 JavaScript 引擎实现起来都是不一样的，单说说 V8 吧。v8引擎是如何知道js数据类型的？ （原文太长我就不贴过来了）"},{"instruction":"怎么提高组织语言能力和表达能力？求指导下，主要在项目文档的撰写和开会对项目口语表达怎么提高组织语言能力和表达能力？求指导下，主要在项目文档的撰写和开会对项目口语表达","output":"提高表达能力的核心是理清思路，我用来提高自己表达能力的方法是复述，具体操作是找几部自己比较喜欢的电影，看15min，然后暂停，并且用1min复述这15min的剧情，每天锻炼1h左右（也就是复述4次），一个月左右就能有较为明显的效果了。这个方法我在高中毕业的暑假中用过，持续了一个多月。之后在大学四年中，我参与竞选的演讲都十分成功，现在工作后与领导同事的沟通、组会交流，以及项目沟通都十分顺畅。我比较推荐这个方法，您可以试一下。"},{"instruction":"git 怎样删除远程仓库的某次错误提交？在网上找到一种方法：在本地把远程的master分支删除，再把reset后的分支内容给push上去本地仓库　彻底回退到某一个版本git reset –hard删除远程的master分支 (注意master前有个:)git push origin :master重新创建远程master分支(这跟我们第１次提交本地代码库给远程仓库的命令一样吧)git push origin master我的问题是除了这种比较暴力的方法，还有别的方法吗？","output":"假设你有3个commit如下：```commit 3commit 2commit 1```其中最后一次提交`commit 3`是错误的，那么可以执行：```git reset --hard HEAD~1```你会发现，`HEAD is now at commit 2`。然后再使用`git push --force`将本次变更强行推送至服务器。这样在服务器上的最后一次错误提交也彻底消失了。值得注意的是，这类操作比较比较危险，例如：在你的`commit 3`之后别人又提交了新的`commit 4`，那在你强制推送之后，那位仁兄的`commit 4`也跟着一起消失了。"},{"instruction":"Vue动态面包屑导航怎么实现没有思路，求大神解答补充一下，我的思路是beforeEach获取上一个路由name和即将进入的路由name，然后填加到数组，最后router-link循环，但是不知道从哪下手","output":"```var routeList = []router.beforeEach((to, from, next) => {  var index = routeList.indexOf(to.name)  if (index !== -1) {    //如果存在路由列表，则把之后的路由都删掉    routeList.splice(index + 1, routeList.length - index - 1)  } else {    routeList.push(to.name)  }  to.meta.routeList = routeList  next()})```之后在需要用到的页面```beforeRouteEnter(to, from, next) {  next(vm=>{    vm.routeList = to.meta.routeList  })}```或者在watch里```this.route.meta.routeList```"},{"instruction":"webpack配置中devtool项加不加#有什么区别？用vue-cli生成的项目中，webpack.dev.conf.js里有这么一段```// cheap-module-eval-source-map is faster for developmentdevtool: \\"#cheap-module-eval-source-map\\",```去webpack官网上看关于devtool的文档，里面没提到说前面需要加#。实际中我去掉或者带上#也不会影响打包。那这个#到底干嘛用的呢？","output":"文档里有说：Prefixing @, # or #@ will enforce a pragma style. (Defaults to @ in webpack@1 and # in webpack@2; using # is recommended)翻译成中文就是使用指定的符号来指定预处理风格"},{"instruction":"TS中报错说style在element类型中不存在怎么办我用queryselectorall去获取一个dom元素集合，然而在编译时却报错说property \'style\' does not exist on type \'element\'。在控制台里看block集合里各个元素是有style属性的，但是用for循环去遍历就没了。求指教一下，是不是要转类型，或者是要用foreach去遍历？用的是typescript。代码：```        var winWidth = document.body.clientWidth;        var height = winWidth*1.23;        let block = document.querySelectorAll(\\".block\\");        for(var i=0;i<block.length;i++){            block.item(i).style.height = height + \\"px\\";        }                ```","output":"这是typescript的类型检查导致的，需要在你的querySelectorAll方法前面加个类型断言就好了，如下```let block = document.querySelectorAll(\\".block\\") as NodeListOf<HTMLElement>;```"},{"instruction":"js 指定删除数组（树结构数据）查找相同ID删除对象,ID相同则删除该对象var data =[{id:1,name:\'一级\', children:[{id:2,name:\'二级\', children:[{id:3,name:\'一级\', children:[{id:31,name:\'二级\'},{id:32,name:\'二级\'},{id:33,name:\'二级\'}],company_id:7}],company_id:8}], company_id:9}]比如ID==31，得到以下数组[{id:1,name:\'一级\', children:[{id:2,name:\'二级\', children:[{id:3,name:\'一级\', children:[{id:32,name:\'二级\'},{id:33,name:\'二级\'}],company_id:7}],company_id:8}], company_id:9}]","output":"```function filter (data, id) {  var newData = data.filter(x => x.id !== id)  newData.forEach(x => x.children && (x.children = filter(x.children, id)))  return newData}```"},{"instruction":"一个电商系统中，消息中间件可以用来做什么呢？当然不仅仅限于电商 最近在了解消息中间件，但是一直不太清楚消息中间件到底是干嘛的，到底在一个系统中用来做什么，就好比redis，内存数据库，我可以在系统中缓存数据，缓解db压力，可以充当队列，用于订单系统异步处理，只是拿redis来举个例子，不是和kafka来比较，在网上很多人介绍都只说生产者消费者模式，异步阿，用于消息告知等等，看了之后更是一头雾水，有了解的能否举几个在实际项目中或工作中，场景中的例子，可以更直观的对消息中间件有一个理解，谢谢","output":"就题目和个人理解回答：消息中间件，是解决分布式系统中各个系统相互通信的工具。举个很常用的例子：A系统是分布式模块化构成：包含a子系统--比如用户模块；包含b子系统--比如资产模块。现在接到这样的一个需求：要求在用户成功注册系统用户时，要赠送积分给该用户。那么这个流程就是：```用户注册——》a子系统新增用户——》a子系统新增用户成功通知b子系统加相应积分——》b子系统接收通知——》b子系统增加用户积分```以上的通知和接收即为消息中间件中的发布和订阅概念。当然，你可能会问为什么不在同一个事物里注册完用户加相应用户积分？答案是：是可以的，只是这样系统就不能达到模块之间业务解耦的目的。所以消息中间件又可以用来解决分布式系统各个模块耦合的功效。"},{"instruction":"webpack打包生成的文件名问题webpack入口为多页，每个页面中有懒加载的组件，打包出来懒加载的组件会打成不同id的文件名，但是没有模快名，分辨不出当前这个id属于哪个模块下，如果能让懒加载的文件带上模块名？如：```` a.html   a.js b.html b.js````//懒加载模块，分别对应a,b模块```` 1.js 2.js 3.js 4.js```````  //webpack配置output: {    path: config.build.assetsRoot,    filename: utils.assetsPath(\'js/[name].[chunkhash].js\'),    chunkFilename: utils.assetsPath(\'js/[id].[chunkhash].js\')  },```","output":"代码里的`[name]`默认是`id`覆盖，如果你要给`chunkFilename`重新起名字，要使用`webpack1`的`require.ensure()`或`webpack2`以上的`import()`方法。webpack1:```require.ensure(dependencies: String[], callback: function(require), chunkName: String)```上面的`chunkName`对应的就是`webpack`里的`chunkFilename`里的`[name]`webpack2-3:```const Foo = asyncComponent(() => import(/* webpackChunkName: \\"foo\\" */ \\"./foo\\"))<Route path=\\"/xx\\" component={Foo} />```上面的`import()`是`webpack2`以上版本的写法，注意`/* webpackChunkName: \\"foo\\" */`，这里对应的就是`webpack`里的`chunkFilename`里的`[name]`"},{"instruction":"mysql数据检索过多导致索引没有生效的问题查询的时候，在数据量过多时出现索引失效的情况，请问是什么原因？```具体情况，mysql版本5.7.7,ad_stat_day表总数据在250W左右，day_time字段上有建立索引``````-- 25号至30号总数据mysql> select count(*) from ad_stat_day where dayTime BETWEEN  \'2017-10-25\' and \'2017-10-30\';+----------+| count(*) |+----------+|   107063 |+----------+1 row in set``````-- 只查id的情况下会走索引mysql> EXPLAIN select id from ad_stat_day where dayTime BETWEEN  \'2017-10-25\' and \'2017-10-30\';+----+-------------+-------------+------------+-------+---------------+-------------+---------+------+--------+----------+--------------------------+| id | select_type | table       | partitions | type  | possible_keys | key         | key_len | ref  | rows   | filtered | Extra                    |+----+-------------+-------------+------------+-------+---------------+-------------+---------+------+--------+----------+--------------------------+|  1 | SIMPLE      | ad_stat_day | NULL       | range | nk_day_time   | nk_day_time | 4       | NULL | 189566 |      100 | Using where; Using index |+----+-------------+-------------+------------+-------+---------------+-------------+---------+------+--------+----------+--------------------------+1 row in set``````-- 查id,fee就不走索引了mysql> EXPLAIN select id,fee from ad_stat_day where dayTime BETWEEN  \'2017-10-25\' and \'2017-10-30\';+----+-------------+-------------+------------+------+---------------+------+---------+------+--------+----------+-------------+| id | select_type | table       | partitions | type | possible_keys | key  | key_len | ref  | rows   | filtered | Extra       |+----+-------------+-------------+------------+------+---------------+------+---------+------+--------+----------+-------------+|  1 | SIMPLE      | ad_stat_day | NULL       | ALL  | nk_day_time   | NULL | NULL    | NULL | 646016 |    27.18 | Using where |+----+-------------+-------------+------------+------+---------------+------+---------+------+--------+----------+-------------+1 row in set``````--缩小条件范围，查询id,fee也会走索引mysql> EXPLAIN select id,fee from ad_stat_day where dayTime BETWEEN  \'2017-10-27\' and \'2017-10-30\';+----+-------------+-------------+------------+-------+---------------+-------------+---------+------+--------+----------+----------------------------------+| id | select_type | table       | partitions | type  | possible_keys | key         | key_len | ref  | rows   | filtered | Extra                            |+----+-------------+-------------+------------+-------+---------------+-------------+---------+------+--------+----------+----------------------------------+|  1 | SIMPLE      | ad_stat_day | NULL       | range | nk_day_time   | nk_day_time | 4       | NULL | 124092 |      100 | Using index condition; Using MRR |+----+-------------+-------------+------------+-------+---------------+-------------+---------+------+--------+----------+----------------------------------+1 row in set```求大佬告知下mysql是根据什么情况来选择使用索引和不使用索引的？```这次范围扫描数据(189566行)不到表总数的10%，而加上一个字段就成了(646016行)占到表总数的25%来了，这个646016行数据mysql是怎么算出来的？还有mysql有明确的配置来说明超过某个阀值(百分比)就不使用索引了吗？```","output":"索引:hi，MySQL，这次我给你带来了一个很大范围的索引片哦，并且我的索引结构上面还有一个只在表结构里面存在的数据，你看看怎么查询起来快吧...MySQL:我擦，你的数据量太大了，我还不如直接去表里面查快呢...索引:hi，MySQL，我为上次的事情道歉，这次虽然给你带来的范围还是比较大，但是呢，我需要的字段都在我的索引结构上面，你帮我处理一下吧...MySQL:嗯，这次你不需要通过表结构，我就直接在你自己身上给你处理吧...上文中的`MySQL`就是我们知道的`MySQL`的优化器在处理，《数据库索引结构和设计》这本书中有讲一个三星索引的概念，像你遇到的这种情况，你可以考虑一下是否需要建立一个`<day_time , fee>`的联合索引，不知道我是否有阐述清楚。"},{"instruction":"关于vuex的作用。刚学过vuex,现在自己做了个电商小项目准备用下vuex,于是我就想说到把购物车的商品放vuex里边，方便不同组件调用到购物车里边的数据，但是实际项目中，我想了下又感觉vuex没什么用，原因如下：当我们点击加入购物车的时候，肯定要把需要加入购物车的商品传给后台呀。那我们进入到购物车组件里边，直接从后台调取数据不就直接可以看到购物车的商品？根本没必要把需要加入购物车的商品传给vuex呀。（当然有一种可能就是传给vuex，可以直接读取，不用再调用后台数据。）是我vuex用在购物车上本来就是错的？那我可以用在什么地方，举几个例子","output":"在使用库或框架时，需要注意一个「适用性」的问题。Vuex 或者说实现了 Flux 思想的库，解决了几个问题：1. 组件之间的数据通信2. 使用单向数据流的方式进行数据的中心化管理为什么要解决这样的问题呢？其实是因为当程序逻辑过于复杂的时候，非中心化的数据管理会让整个 app 的逻辑非常混乱。举一个不使用中心化的数据管理机制的具体例子：一个 app ，有四个 tab，每个 tab 都需要读取用户的资料。如果数据在每个 tab 的控制器里（或者说组件里）都存了一份，那么在用户手动更新了用户资料之后，就需要在每一个 tab 里都更新一遍用户资料，才能保证用户看到的永远是最新的资料。如你问题里所说，我每进一个 tab 的时候重新请求一下不就好了吗？这样的解决方案不是不可以，但弊端也非常明显：1. 对于服务器端来说，频繁的请求是非常占用资源的，如果你的 app 用户足够多，那么每多出一个请求，对公司来说，都是一大笔钱。如果数据存在了 store 中，并且所有的 tab 都读取同一份数据，在用户更新资料时，在前端更新了 store 中的数据，是不是在切换 tab 时就减少了四个请求呢？2. 对于前端开发者来说，如果你的项目足够复杂，团队的规模也不仅是一个人，那么前端代码就会因为数据分散管理而产生非常严重的性能和稳定性的隐患（比如你的同事觉得进入模块就刷新用户资料太慢了，手贱把刷新的代码删了，你又没发现）。另外单向数据流的好处也很明显：1. 视图组件变得很薄，只包含了渲染逻辑和触发 action 这两个职责，即所谓 \\"dumb components\\"。2. 要理解一个 store 可能发生的状态变化，只需要看它所注册的 actions 回调就可以。3. 任何状态的变化都必须通过 action 触发，而 action 又必须通过 dispatcher 走，所以整个应用的每一次状态变化都会从同一个地方流过。其实 Flux 和传统 MVC 最不一样的就在这里了。React 在宣传的时候一直强调的一点就是 “理解你的应用的状态变化是很困难的 (managing state changing over time is hard)”，Flux 的意义就在于强制让所有的状态变化都必须留下一笔记录，这样就可以利用这个来做各种 debug 工具、历史回滚等等。你问题中的场景，业务过于简单，确实是没有必要使用 vuex 的，但这不代表其他大型应用不应该使用这个框架。"},{"instruction":"es6如何快速的删除数组元素有这么一个数组```let arr = [            {id:1,value:2},            {id:2,value:3},            .......          ]```想删除数组里id=8的元素，使用es6如何方便快捷的实现","output":"`ES6 findIndex` MDN :Array.prototype.findIndex()`findIndex()`方法返回数组中满足提供的测试函数的第一个元素的索引。否则返回-1。```arr.splice(arr.findIndex(item => item.id === 8), 1)```推荐文章：【深度长文】JavaScript数组所有API全解密 | louis blog"},{"instruction":"懂远程调用Rpc框架的同学来解答一下看了一下rpc框架的作用，是可以实现远程调用，可以基于http协议，也可以用别的协议。这里的远程调用，指的应该是后端服务A和后端服务B互调吧（虽然有些地方会把调用方称作客户端，但其实还是服务端和服务端互调）。那如果前端，就比如浏览器端，想通过post或者get方式去调后端的接口，也能称之为RPC方式吗？应该不是吧，充其量就是基于http的restful接口调用吧。而且前端（浏览器端）想去调后端接口，只能通过http协议，如果那些实现了别的协议的rpc框架，根本没法处理http请求吧不知道我的理解对不对","output":"HTTP是通信协议，RPC是一种开发方式，他可以基于HTTP协议（比如gRPC)，也可以基于其他协议，比如更基础的TCP通信协议的选择只是RPC实现中的一小部分，更重要的一部分是编码协议。比如json/xml属于文本编码，还有二进制字节编码，比如protoful，thrift。http对比tcp，最诟病的就是多余的头信息，而且还是使用的文本编码，造成整个数据包体积过大。不过据说http2改进很多，修改为二进制编码了，还支持多路复用，gRPC就是基于http2实现的。至于restful，其实他本身是一套将资源对象化的设计标准，不过目前都作为技术实现再用，本身又分为严格的和非严格的。从目前上来说restful接口可以认为是一种基于http使用json编码的RPC实现，但还是本身restful是设计规范，更多的是约束资源的访问获取手段，不应当用于复杂的函数调用。最后前后端，目前javascript也有json-RPC，ajax-RPC一类的更专注于函数调用的RPC实现，可以基于HTTP，也可以基于websocket，如果目的是函数调用，你可以试用一下，会比使用restful舒服很多。"},{"instruction":"vue项目报错如下：(Emitted value instead of an instance of Error) `(Emitted value instead of an instance of Error) the \\"scope\\" attribute for scoped slots have been deprecated and replaced by \\"slot-scope\\" since 2.5. The not-scope\\" attribute can also be used on plain elements in addition to <template> to denote scoped slots.`","output":"你检查下你的列表组件里，slot 里的  <template> 上面有个 scope 属性，你改成 slot-scope```<template scope=\\"xxx\\">yyyyyyyy</template> ```改成```<template slot-scope=\\"xxx\\">yyyyyyyy</template> ```scope 属性在2.5以后的版本中已经废弃， 被 slot-scope 替代slot-scope 不光可以用在 template 元素上，也可以用在其它元素"},{"instruction":"为什么element ui el-input @click事件无效```  <el-form-item label=\\"审批人\\">    <el-input v-model=\\"formInline.user\\" placeholder=\\"审批人\\" @click=\\"alert(1)\\"></el-input>  </el-form-item>```如何给el-input添加点击事件","output":"vue.js文档 给组件绑定原生事件# 给组件绑定原生事件有时候，你可能想在某个组件的根元素上监听一个原生事件。可以使用 v-on 的修饰符 .native。例如：```<my-component v-on:click.native=\\"doTheThing\\"></my-component>``````// 使用`navite`修饰符@click.native=\\"handleClick\\"handleClick(){    alert(1);}// 你的写法会报错。会认为alert不是一个函数。好奇是什么场景要绑定点击事件到el-input呢```"},{"instruction":"问一个react更新State的问题？读react官网：状态更新可能是动态的```// Wrongthis.setState({  counter: this.state.counter + this.props.increment,});```官网说这种写法是错误的```// Correctthis.setState((prevState, props) => ({  counter: prevState.counter + props.increment}));```这种写法是正确的我实在搞不懂为什么第一个是错误的，第二种写法是正确的，哪位大神能帮忙解释一下？在哪种需求场景下，会出现上述的情况，最好能写点代码解释下，多谢，大神们指导。","output":"因为 this.props 和 this.state 可能是异步更新的，你不能依赖他们的值计算下一个state(状态)。setState 方法“或许”是异步的。也许你觉得，看上去更新 state 是如此轻而易举的操作，这并没有什么可异步处理的。但是要意识到，因为 state 的更新会触发 re-rendering，而 re-rendering 代价昂贵，短时间内反复进行渲染在性能上肯定是不可取的。所以，React 采用 batching 思想，它会 batches 一系列连续的 state 更新，而只触发一次 re-render。setState的机制其实跟浏览器的dom更新类似，等到一定数量或者一定时间间隔才一起更新一次，它们都是异步更新的，所以这样做在一定几率是有问题的。或者，直接看下面的一个小例子。比如，最简单的一个场景是```function incrementMultiple() {  this.setState({count: this.state.count + 1});  this.setState({count: this.state.count + 1});  this.setState({count: this.state.count + 1});}```直观上来看，当上面的 incrementMultiple 函数被调用时，组件状态的count 值被增加了3次，每次增加1，那最后 count 被增加了3。但是，实际上的结果只给 state 增加了1。不信你自己试试～## 让 setState 连续更新的几个 hack如果想让 count 一次性加3，应该如何优雅地处理潜在的异步操作，规避上述问题呢？以下提供几种解决方案：方法一：常见的一种做法便是将一个回调函数传入 setState 方法中。即 setState 著名的函数式用法。这样能保证即便在更新被 batched 时，也能访问到预期的 state 或 props。（后面会解释这么做的原理）方法二：另外一个常见的做法是需要在 setState 更新之后进行的逻辑（比如上述的连续第二次 count + 1），封装到一个函数中，并作为第二个参数传给 setState。这段函数逻辑将会在更新后由 React 代理执行。即：setState(updater, [callback])方法三：把需要在 setState 更新之后进行的逻辑放在一个合适的生命周期 hook 函数中，比如 componentDidMount 或者 componentDidUpdate 也当然可以解决问题。也就是说 count 第一次 +1 之后，出发 componentDidUpdate 生命周期 hook，第二次 count +1 操作直接放在 componentDidUpdate 函数里面就好啦。更多详细内容:从 setState promise 化的探讨 体会 React 团队设计思想"},{"instruction":"Vue 中 keep-alive 是怎么实现的vue中keep-alive的实现原理是什么?有什么限制?","output":"首先，你要知道Vue.js内部将DOM节点抽象成了一个个的VNode节点，这个我之前写过相关文章可以参考VNode节点。所以，keep-alive的缓存也是基于VNode节点的而不是直接存储DOM结构。看一下keep-alive这个组件的代码。```type VNodeCache = { [key: string]: ?VNode };const patternTypes: Array<Function> = [String, RegExp]/* 获取组件名称 */function getComponentName (opts: ?VNodeComponentOptions): ?string {  return opts && (opts.Ctor.options.name || opts.tag)}/* 检测name是否匹配 */function matches (pattern: string | RegExp, name: string): boolean {  if (typeof pattern === \'string\') {    /* 字符串情况，如a,b,c */    return pattern.split(\',\').indexOf(name) > -1  } else if (isRegExp(pattern)) {    /* 正则 */    return pattern.test(name)  }  /* istanbul ignore next */  return false}/* 修正cache */function pruneCache (cache: VNodeCache, current: VNode, filter: Function) {  for (const key in cache) {    /* 取出cache中的vnode */    const cachedNode: ?VNode = cache[key]    if (cachedNode) {      const name: ?string = getComponentName(cachedNode.componentOptions)      /* name不符合filter条件的，同时不是目前渲染的vnode时，销毁vnode对应的组件实例（Vue实例），并从cache中移除 */      if (name && !filter(name)) {        if (cachedNode !== current) {          pruneCacheEntry(cachedNode)        }        cache[key] = null      }    }  }}/* 销毁vnode对应的组件实例（Vue实例） */function pruneCacheEntry (vnode: ?VNode) {  if (vnode) {    vnode.componentInstance.destroy()  }}/* keep-alive组件 */export default {  name: \'keep-alive\',  /* 抽象组件 */  abstract: true,  props: {    include: patternTypes,    exclude: patternTypes  },  created () {    /* 缓存对象 */    this.cache = Object.create(null)  },  /* destroyed钩子中销毁所有cache中的组件实例 */  destroyed () {    for (const key in this.cache) {      pruneCacheEntry(this.cache[key])    }  },  watch: {    /* 监视include以及exclude，在被修改的时候对cache进行修正 */    include (val: string | RegExp) {      pruneCache(this.cache, this._vnode, name => matches(val, name))    },    exclude (val: string | RegExp) {      pruneCache(this.cache, this._vnode, name => !matches(val, name))    }  },  render () {    /* 得到slot插槽中的第一个组件 */    const vnode: VNode = getFirstComponentChild(this.slots.default)    const componentOptions: ?VNodeComponentOptions = vnode && vnode.componentOptions    if (componentOptions) {      // check pattern      /* 获取组件名称，优先获取组件的name字段，否则是组件的tag */      const name: ?string = getComponentName(componentOptions)      /* name不在inlcude中或者在exlude中则直接返回vnode（没有取缓存） */      if (name && (        (this.include && !matches(this.include, name)) ||        (this.exclude && matches(this.exclude, name))      )) {        return vnode      }      const key: ?string = vnode.key == null        // same constructor may get registered as different local components        // so cid alone is not enough (#3269)        ? componentOptions.Ctor.cid + (componentOptions.tag ? `::{componentOptions.tag` : \'\')        : vnode.key      /* 如果已经做过缓存了则直接从缓存中获取组件实例给vnode，还未缓存过则进行缓存 */      if (this.cache[key]) {        vnode.componentInstance = this.cache[key].componentInstance      } else {        this.cache[key] = vnode      }      /* keepAlive标记位 */      vnode.data.keepAlive = true    }    return vnode  }}```其实就是将需要缓存的VNode节点保存在this.cache中／在render时,如果VNode的name符合在缓存条件（可以用include以及exclude控制），则会从this.cache中取出之前缓存的VNode实例进行渲染。"},{"instruction":"maven mybatis-generator:generate失败 Exception getting JDBC Driver生成配置文件如下:```<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?><!DOCTYPE generatorConfiguration        PUBLIC \\"-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN\\"        \\"http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd\\"><generatorConfiguration>    <context id=\\"MySQLTables\\" targetRuntime=\\"MyBatis3\\">        <!-- 配置数据库链接信息 -->        <jdbcConnection driverClass=\\"com.mysql.jdbc.Driver\\"                        connectionURL=\\"jdbc:mysql://localhost:3306/ssm_crud?useSSL=false\\"                        userId=\\"root\\"                        password=\\"ABCabc123#\\">        </jdbcConnection>        <javaTypeResolver>            <property name=\\"forceBigDecimals\\" value=\\"false\\"/>        </javaTypeResolver>        <!-- 指定javaBean生成的位置 -->        <javaModelGenerator targetPackage=\\"io.ride.domain\\" targetProject=\\".srcmainjava\\">            <property name=\\"enableSubPackages\\" value=\\"true\\"/>            <property name=\\"trimStrings\\" value=\\"true\\"/>        </javaModelGenerator>        <!-- 制定sql映射文件的生成位置 -->        <sqlMapGenerator targetPackage=\\"io.ride.mapper\\" targetProject=\\".srcmainjava\\">            <property name=\\"enableSubPackages\\" value=\\"true\\"/>        </sqlMapGenerator>        <!-- 指定dao接口生成位置 -->        <javaClientGenerator type=\\"XMLMAPPER\\" targetPackage=\\"io.ride.dao\\" targetProject=\\".srcmainjava\\">            <property name=\\"enableSubPackages\\" value=\\"true\\"/>        </javaClientGenerator>        <!-- 制定每个表的生成策略 -->        <table tableName=\\"t_emp\\" domainObjectName=\\"Employee\\"></table>        <table tableName=\\"t_dpt\\" domainObjectName=\\"Department\\"></table>        <!--<table schema=\\"DB2ADMIN\\" tableName=\\"ALLTYPES\\" domainObjectName=\\"Customer\\">-->            <!--<property name=\\"useActualColumnNames\\" value=\\"true\\"/>-->            <!--<generatedKey column=\\"ID\\" sqlStatement=\\"DB2\\" identity=\\"true\\"/>-->            <!--<columnOverride column=\\"DATE_FIELD\\" property=\\"startDate\\"/>-->            <!--<ignoreColumn column=\\"FRED\\"/>-->            <!--<columnOverride column=\\"LONG_VARCHAR_FIELD\\" jdbcType=\\"VARCHAR\\"/>-->        <!--</table>-->    </context></generatorConfiguration>```maven配置```        <plugins>            <plugin>                <groupId>org.mybatis.generator</groupId>                <artifactId>mybatis-generator-maven-plugin</artifactId>                <version>1.3.3</version>                <configuration>                    <!-- 指定配置文件 -->                    <configurationFile>mybatis-generator.xml</configurationFile>                    <verbose>true</verbose>                    <overwrite>true</overwrite>                </configuration>                <executions>                    <execution>                        <id>Generate MyBatis Artifacts</id>                        <goals>                            <goal>generate</goal>                        </goals>                    </execution>                </executions>                <dependencies>                    <dependency>                        <groupId>org.mybatis.generator</groupId>                        <artifactId>mybatis-generator-core</artifactId>                        <version>1.3.3</version>                    </dependency>                </dependencies>            </plugin>        </plugins>```异常报错:org.apache.maven.lifecycle.LifecycleExecutionException: Failed to execute goal org.mybatis.generator:mybatis-generator-maven-plugin:1.3.3:generate (default-cli) on project SSM_CRUD: Execution default-cli of goal org.mybatis.generator:mybatis-generator-maven-plugin:1.3.3:generate failed: Exception getting JDBC Driver```[ERROR] Failed to execute goal org.mybatis.generator:mybatis-generator-maven-plugin:1.3.3:generate (default-cli) on project SSM_CRUD: Execution default-cli of goal org.mybatis.generator:mybatis-generator-maven-plugin:1.3.3:generate failed: Exception getting JDBC Driver: com.mysql.jdbc.Driver -> [Help 1]org.apache.maven.lifecycle.LifecycleExecutionException: Failed to execute goal org.mybatis.generator:mybatis-generator-maven-plugin:1.3.3:generate (default-cli) on project SSM_CRUD: Execution default-cli of goal org.mybatis.generator:mybatis-generator-maven-plugin:1.3.3:generate failed: Exception getting JDBC Driver    at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:212)    at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:153)    at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:145)    at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:116)    at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:80)    at org.apache.maven.lifecycle.internal.builder.singlethreaded.SingleThreadedBuilder.build(SingleThreadedBuilder.java:51)    at org.apache.maven.lifecycle.internal.LifecycleStarter.execute(LifecycleStarter.java:128)    at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:307)    at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:193)    at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:106)    at org.apache.maven.cli.MavenCli.execute(MavenCli.java:863)    at org.apache.maven.cli.MavenCli.doMain(MavenCli.java:288)    at org.apache.maven.cli.MavenCli.main(MavenCli.java:199)    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)    at java.lang.reflect.Method.invoke(Method.java:498)    at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced(Launcher.java:289)    at org.codehaus.plexus.classworlds.launcher.Launcher.launch(Launcher.java:229)    at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode(Launcher.java:415)    at org.codehaus.plexus.classworlds.launcher.Launcher.main(Launcher.java:356)    at org.codehaus.classworlds.Launcher.main(Launcher.java:47)Caused by: org.apache.maven.plugin.PluginExecutionException: Execution default-cli of goal org.mybatis.generator:mybatis-generator-maven-plugin:1.3.3:generate failed: Exception getting JDBC Driver    at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:145)    at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:207)    ... 21 moreCaused by: java.lang.RuntimeException: Exception getting JDBC Driver    at org.mybatis.generator.internal.db.ConnectionFactory.getDriver(ConnectionFactory.java:85)    at org.mybatis.generator.internal.db.ConnectionFactory.getConnection(ConnectionFactory.java:54)    at org.mybatis.generator.config.Context.getConnection(Context.java:733)    at org.mybatis.generator.config.Context.introspectTables(Context.java:618)    at org.mybatis.generator.api.MyBatisGenerator.generate(MyBatisGenerator.java:254)    at org.mybatis.generator.api.MyBatisGenerator.generate(MyBatisGenerator.java:188)    at org.mybatis.generator.maven.MyBatisGeneratorMojo.execute(MyBatisGeneratorMojo.java:199)    at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:134)    ... 22 moreCaused by: java.lang.ClassNotFoundException: com.mysql.jdbc.Driver    at org.codehaus.plexus.classworlds.strategy.SelfFirstStrategy.loadClass(SelfFirstStrategy.java:50)    at org.codehaus.plexus.classworlds.realm.ClassRealm.unsynchronizedLoadClass(ClassRealm.java:271)    at org.codehaus.plexus.classworlds.realm.ClassRealm.loadClass(ClassRealm.java:247)    at org.codehaus.plexus.classworlds.realm.ClassRealm.loadClass(ClassRealm.java:239)    at java.lang.Class.forName0(Native Method)    at java.lang.Class.forName(Class.java:348)    at org.mybatis.generator.internal.ObjectFactory.internalClassForName(ObjectFactory.java:167)    at org.mybatis.generator.internal.ObjectFactory.externalClassForName(ObjectFactory.java:122)    at org.mybatis.generator.internal.db.ConnectionFactory.getDriver(ConnectionFactory.java:82)    ... 29 more[ERROR] [ERROR] Re-run Maven using the -X switch to enable full debug logging.[ERROR] [ERROR] For more information about the errors and possible solutions, please read the following articles:[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/PluginExecutionException```","output":"```<plugin>    <groupId>org.mybatis.generator</groupId>    <artifactId>mybatis-generator-maven-plugin</artifactId>    <version>1.3.2</version>    <configuration>        <configurationFile>{basedir}/src/main/resources/generatorConfig.xml</configurationFile>        <overwrite>false</overwrite>        <verbose>true</verbose>    </configuration>    <dependencies>        <dependency>            <groupId>mysql</groupId>            <artifactId>mysql-connector-java</artifactId>            <version>{mysql.version}</version>        </dependency>    </dependencies></plugin>```在plugin中单独依赖Mysql驱动包"},{"instruction":"vue-cli构建的项目，eslint一直报CRLF/LF的linebreak错误如题，vue在构建项目的时候选择了airbnb规则，同时项目构建后被windows的unix bash工具pull并且push过，这之后在windows上进行开发，就开始一直报```Expected linebreaks to be \'CRLF\' but found \'LF\'```这样的错误，后经查是一种强制统一方式，并且解决方法是```linebreak-style: [\\"error\\", \\"windows\\"]```强制使用windows方式，我将之添加到了项目根目录下的 .eslintrc.js 文件中的rule字段下：```// add your custom rules here  \'rules\': {    // don\'t require .vue extension when importing    \'import/extensions\': [\'error\', \'always\', {      \'js\': \'never\',      \'vue\': \'never\'    }],    // allow optionalDependencies    \'import/no-extraneous-dependencies\': [\'error\', {      \'optionalDependencies\': [\'test/unit/index.js\']    }],    // try to fix the line break problem    \'linebreak-style\': [\\"error\\", \\"windows\\"],    // allow debugger during development    \'no-debugger\': process.env.NODE_ENV === \'production\' ? 2 : 0  }```结果无效，现有问题二个：\'1. 是否是因为系统环境不同而造成了某种强制转换才会引发如上的错误？2. 如何选择性的关闭eslint某个功能（linebreak检查）？","output":"# 问题1不同的操作系统下，甚至是不同编辑器，不同工具处理过的文件可能都会导致换行符的改变。# 问题2项目根目录下有`.eslintrc.js`文件，在配置文件中修改rule配置项，如下：```// 统一换行符，\\"n\\" unix(for LF) and \\"rn\\" for windows(CRLF)，默认unix// off或0: 禁用规则\'linebreak-style\': \'off\'```"},{"instruction":"关于javascript es6 class中static方法的使用场景我们知道在class中定义的static方法，在使用时可以直接调用，不用实例化，我的疑惑是1. 在定义类的方法的时候，什么方法适宜定义成static，什么方法不用？2. 我可不可以把类中的方法都定义为static,这 样做有什么弊端没有？还请详细介绍下class的适用场景以及static的适用场景，不胜感激！","output":"在OOP中，带方法的类（即非数据类），一般有两个作用- 封装方法和属性（通常意义的 OOP 类）- 封装临时变量（和来处理复杂事务的类）不管哪个作用，方法通常都是会操作成员变量的，这种情况下，肯定只能写实例方法（因为要操作成员）除此之外，不需要访问类属性的方法都可以写成静态的，这类方法一般都是 Helper 方法，即对输入进行处理再得到一个输出，与对象的成员无关。这类方法也可以直接写为公共函数（非方法函数）。不过在 C#、Java、TypeScript 等有权限限制的语言中，静态方法可以访问对象的私有成员，比如 `Foo` 类的 `Foo.bla(f: Foo)` 静态方法内部可以直接访问 `f.somePrivateMethod()`，当然目前 JavaScript 中不存在这种情况，以后引入私有成员之后会不会存在这种情况也还要观望顺便说一下，多数静态类型语言中成员方法都是可以直接调用同一个类的静态方法的，但 JavaScript 由于实现机制不能，做不到。 回看有惊喜，2020-02-27 更新JavaScript 的私有字段提议已经到了 stage-3 (实验) 阶段，TypeScript 3.8 和 Chrome 7.4 已经支持私有字段，那么前面提到的疑惑其实是可以实验来验证的实验环境：- Microsoft Edge Version 80.0.361.62 (Official build) (64-bit)- TypeScript Playground实验代码，TypeScript```class MyClass {    static create(name: string, age: number = 10) {        var obj = new MyClass();        obj.#name = name;        obj.#age = age;    }    #name: string;    #age: number;    constructor() {        this.#name = \\"Default Name\\";        this.#age = 0;    }    toString(): string {        return `{this.#name}: {this.#age`;    }}const inst = MyClass.create(\\"James\\", 10);// inst.#name = \\"Hello\\";console.log(inst.toString());```结论- 静态方法（`static create()`) 中可以访问对象的私有成员 （`#name` 和 `#age`）- 外部不能访问对象的私有成员(`inst.#name = \\"Hello\\"` 会报错）"},{"instruction":"react ant design 中如何在表头中加个Icon,悬浮icon又触发Tooltip?如题，表头的某一列是：```<Table.Column title=\'目的地\' dataIndex=\'destination\' key=\'destination\'></Table.Column>```显示效果就是‘目的地’。我想在后面加个问号的Icon：question-circle,鼠标悬停上去的时候显示提示文字：‘这是提示’。这里面用到了Table，Icon.Tooltip三个组件，但是不知道该怎么写出来。写法一直报错。","output":"`Table.Column` 的 `title` 传值可以传入一个 `ReactNode `。所以，可以写成这样```const title = (  <span>    目的地    <Tooltip title=\\"这是提示\\">      <Icon style={{ marginLeft: \'0.25em\' }} type=\\"question-circle\\" />    </Tooltip>  </span>);<Table.Column title={title} dataIndex=\'destination\' key=\'destination\'></Table.Column>```"},{"instruction":"js promise中如何取到[[PromiseValue]] ?```Promise {[[PromiseStatus]]: \\"resolved\\",         [[PromiseValue]]: \\"http://dl.stream.qqmusic.qq.com/M8000046HRBd0FvKLm…C380C8F140044403EDC0124&guid=489780640&fromtag=30\\"        }```有一个promise，现在取到的值为上述所示， 能不能直接从中取到  promisevalue的url？该promise由 `QQMusic.getSong(1561).then(song => song.url)` 获得这个程序是别人写的，再加上不太了解promise，所以请问下可否直接取到？","output":"```var a = Promise.resolve(\'xx\')// Promise {[[PromiseStatus]]: \\"resolved\\", [[PromiseValue]]: \\"xx\\"}a.then(function (result) { console.log(result) })```"},{"instruction":"vue的CDN有几种文件结尾，分别是什么意思？CDN地址：http://www.bootcdn.cn/vue/下面几种文件结尾分别是什么意思？```vue.jsvue.common.jsvue.esm.jsvue.runtime.jsvue.runtime.esm.jsvue.runtime.common.js```","output":"common和esm分别是2种现代模块化规范CommonJS和EcmaScript Module的缩写。现在主流的webpack2采用esm，也就是es6及以上的模块化编程，说白了就是import ... from ...vue.runtime.js则是运行时的意思，纯粹全是javascript，适用于生产环境，需要经过预编译。官方说法是用来创建 Vue 实例，渲染并处理 virtual DOM 等行为的代码。基本上就是除去编译器的其他一切。vue.esm.js，预编译+运行时，也就是模板字符串和现在最常用的单文件组件.vue文件，需要经过它预编译转化成纯javascrit，然后再运行，适用于开发环境。官方说法叫用来将模板字符串编译成为 JavaScript 渲染函数的代码。vue.js则是直接用在<script>标签中的。1.若是自己写个小demo测试一下```用vue.js即可，方便阅读源码```2.若你是用vue2+webpack2开发项目（vue-cli采用的方式）```开发环境用vue.esm.js生产环境用vue.runtime.esm.js，比完整版小30%左右，前端性能更优```"},{"instruction":"怎么让类数组使用forEach?```<div>1</div><div>2</div>``````let div = document.getElementsByTagName(\'div\');div.forEach = Array.prototype.forEach;div.forEach(item=>{    console.log(item);});这样是一种方法，如何使用call、apply或bind 使用forEach方法```","output":"```[].forEach.call(document.getElementsByTagName(\\"div\\"), (item) => console.log(item))``````[].forEach.apply(document.getElementsByTagName(\\"div\\"), [(item) => console.log(item)])``````var getDivs = [].forEach.bind(document.getElementsByTagName(\\"div\\"))getDivs(item => console.log(item))``````document.querySelectorAll(\'div\').forEach(item => console.log(item))```"},{"instruction":"正则表达式，3-10位必须包含至少1个数字和1个字母，为何我这样写不对？```(?=[a-zA-Z]+)(?=[0-9]+)[a-zA-Z0-9]{3,10}```上面是我写的，但不正确，不知道原因。我理解的是第一个正向预查找出至少一个字母，和第二个正向预查找出至少一个字母。然后最后是[a-zA-Z0-9]{3,10}，这大家都懂。不知道哪里错了，是不是我对正向预查的理解不正确？","output":"`?=`不同的人叫法不一样，你称之为`预查`，我更倾向于叫`零宽断言`，也就是说`?=`只是匹配一个位置，并不匹配具体的字符，所以是`零宽`，也就是宽度是0。所以`(?=[a-zA-Z]+)`匹配一个位置，这个位置后面`紧跟`至少一个字母，注意此时位置并没有后移;`(?=[0-9]+)`也是匹配一个位置，这个位置后面后面`紧跟`至少一个数字；因为`(?=[a-zA-Z]+)`和`(?=[0-9]+)`都只匹配位置，而不匹配具体的字符，这两个又直接写在了一起，也就是说`(?=[a-zA-Z]+)(?=[0-9]+)`意味着这个位置后面`紧跟`至少一个字母，`同时紧跟`至少一个数字，也就是说这个位置后面的字符既是字母又是数字，显然这样的位置不存在。Update:你试试这个`/^(?=[a-zA-Z]*[0-9])(?=[0-9]*[a-zA-Z])[a-zA-Z0-9]{3,10}/`。"},{"instruction":"JS 中 new Date 默认为1或0的问题最近看到了一个获取天数的写法，之前一直没用过，直接上代码```let dayLength = new Date(2017,2,0); //28```有哪位大佬知道上面为什么能得到2017年2月的总天数吗？看了 MDN 没找到答案MDN_Date","output":"虽然  `new Date(2017,2,0)` 并不是输出 28 但是它却包含 28 这个信息，确实是一个获取某月天数的好方法。下面来说下为什么，Date 作为构造函数，有一种用法是这样的，就是您说的这种：`new Date(year, month[, day[, hour[, minutes[, seconds[, milliseconds]]]]]);`重点：month 参数，是指月份，从 0 开始，也就是说，0 表示 1月，2表示 3月。day 参数，是指月份中的某一天，从 1 开始，也就是说 1 就是月份中的第一天，2就是第二天，0 是不在取值范围内的然后看一下 ES 规范：http://es5.github.io/#x15.9.1.12，这一节的第七和第八条：7.Find a value t such that YearFromTime(t) == ym and MonthFromTime(t) == mn) and DateFromTime(t) == 1; but if this is not possible (because some argument is out of range), return NaN. 8.Return Day(t) + dt − 1.简单解释下就是，传入 year, month, day 来获取一个新的日期实例时，会先获取指定年、月的 1 号，例如 year=2017, month=4，会先获取 2017-5-1 这个日期，这是上面第七步完成的。然后第八步，上面这个日期会加上 day 参数的整数值，然后减去 1。看见了没有，要减去 1。你上面的例子：```new Date(2017, 2, 0)```先获取 `2017-3-1` 然后 加上 0 ，再减去 1，就是 `2017-2-28`明白了吧。综上，咱们可以这样来获取某年某月有多少天：```function getMonthLength(year, month) {    return new Date(year, month, 0).getDate();}getMonthLength(2017, 2); //28```"},{"instruction":"后台管理系统有必要允许多端登录么？php在写后台管理系统的时候有必要开启多设备登录么？请发表观点，并说明原因吧，谢谢！","output":"允许还不允许，取决于你的需求。比如早期 QQ 就不允许多端登录，但是随着智能手机的发展，越来越多人 PC、手机同时登录QQ，也就允许多端了。到底需要不需要，应该从你的应用的使用场景去考虑，比如是否有两地同时办公(比如办公室、家里)的场景，有没有PC、手机同时访问的需求，有没有 Web、客户端同时访问的需求……"},{"instruction":"如何在 Spring容器 service层获取当前登录用户信息？用户信息绑定会话，怎样才可以在服务层注入？","output":"谢谢邀请回答。如果不想在controller拿到用户信息传到service层，直接在service层也是可以拿到的。spring mvc在处理请求的时候，会把请求对象放到RequestContextHolder持有的ThreadLocal对象中,你可以去看看DispatcherServlet类的源代码。在service层可以按照如下代码获取：```//获取到当前线程绑定的请求对象HttpServletRequest request = ((ServletRequestAttributes)RequestContextHolder.getRequestAttributes()).getRequest();//已经拿到session,就可以拿到session中保存的用户信息了。        System.out.println(request.getSession().getAttribute(\\"userInfo\\"));```"},{"instruction":"拼团活动 的 业务逻辑有人做过拼团活动么，做过的讲一下业务逻辑吧。看看和我自己想的一样不。","output":"可以参照人人商城的拼团活动（网上有源码）或者是有赞的（只能看规则什么的）或者是拼多多（同样是展示，这里有0元参团的，正好可以用来查看各界面展示）的，他们三个逻辑也各不相同，但大体思路是一样的。相关的表差不多是：- 拼团商品表（包含商品信息，是否单独购买，开团人数，开团期限等）- 开团信息表（关联拼团商品，团开始时间，团结束时间，总人数，当前参团人数，开团人，参与人等）- 开团会员的购买订单表（也可在普通商品订单表基础上增加字段区分）需要注意的基本就是：- 超时未成团的自动退款（可能需要支付宝、微信等退款接口）- 未成团前不能发起退款，只有成团后才能发起退款- 未支付成功不算参团，需要注意超卖的情况大体是这样的吧。"},{"instruction":"vue-router两种模式，到底什么情况下用hash,什么情况下用history模式呢？vue-router两种模式，hash，history看了官方文档也不怎么明白，到底什么情况下用hash,什么情况下用history模式呢？","output":"# None对于 Vue 这类渐进式前端开发框架，为了构建 SPA（单页面应用），需要引入前端路由系统，这也就是 Vue-Router 存在的意义。前端路由的核心，就在于 —— 改变视图的同时不会向后端发出请求。为了达到这一目的，浏览器当前提供了以下两种支持：1. hash —— 即地址栏 URL 中的 `#` 符号（此 hash 不是密码学里的散列运算）。比如这个 URL：`http://www.abc.com/#/hello`，hash 的值为 `#/hello`。它的特点在于：hash 虽然出现在 URL 中，但不会被包括在 HTTP 请求中，对后端完全没有影响，因此改变 hash 不会重新加载页面。2. history —— 利用了 HTML5 History Interface 中新增的 `pushState()` 和 `replaceState()` 方法。（需要特定浏览器支持）这两个方法应用于浏览器的历史记录栈，在当前已有的 `back`、`forward`、`go` 的基础之上， 它们提供了对历史记录进行修改的功能。只是当它们执行修改时，虽然改变了当前的 URL，但浏览器不会立即向后端发送请求。因此可以说，hash 模式和 history 模式都属于浏览器自身的特性，Vue-Router 只是利用了这两个特性（通过调用浏览器提供的接口）来实现前端路由。# None一般场景下，hash 和 history 都可以，除非你更在意颜值，`#` 符号夹杂在 URL 里看起来确实有些不太美丽。> 如果不想要很丑的 hash，我们可以用路由的 history 模式，这种模式充分利用 history.pushState API 来完成URL 跳转而无须重新加载页面。——  Vue-router 官网。另外，根据 Mozilla Develop Network 的介绍，调用 `history.pushState()` 相比于直接修改 `hash`，存在以下优势：- `pushState()` 设置的新 URL 可以是与当前 URL 同源的任意 URL；而 `hash` 只可修改 `#` 后面的部分，因此只能设置与当前 URL 同文档的 URL；- `pushState()` 设置的新 URL 可以与当前 URL 一模一样，这样也会把记录添加到栈中；而 `hash` 设置的新值必须与原来不一样才会触发动作将记录添加到栈中；- `pushState()` 通过 `stateObject` 参数可以添加任意类型的数据到记录中；而 `hash` 只可添加短字符串；- `pushState()` 可额外设置 `title` 属性供后续使用。当然啦，`history` 也不是样样都好。SPA 虽然在浏览器里游刃有余，但真要通过 URL 向后端发起 HTTP 请求时，两者的差异就来了。尤其在用户手动输入 URL 后回车，或者刷新（重启）浏览器的时候。1. `hash` 模式下，仅 `hash` 符号之前的内容会被包含在请求中，如 `http://www.abc.com`，因此对于后端来说，即使 没有做到对路由的全覆盖，也不会返回 404 错误。2. `history` 模式下，前端的 URL 必须和实际向后端发起请求的 URL 一致，如 `http://www.abc.com/book/id`。如果后端缺少对 `/book/id` 的路由处理，将返回 404 错误。Vue-Router 官网里如此描述：“不过这种模式要玩好，还需要后台配置支持……所以呢，你要在服务端增加一个覆盖所有情况的候选资源：如果 URL 匹配不到任何静态资源，则 应该返回同一个 index.html 页面，这个页面就是你 app 依赖的页面。”# 小节对于一般的 Vue + Vue-Router + Webpack + XXX 形式的 Web 开发场景，用 `history` 模式即可，只需在后端（Apache 或 Nginx）进行简单的路由配置，同时搭配前端路由的 404 页面支持。"},{"instruction":"vscode 怎么双击选中连字符我的css类名习惯用 - 横线连字符，可是在vscode每次双击只能选中其中一个单词，不能选中整个连字符，请问有办法解决吗？谢谢了！","output":"在设置里```  // 执行文字相关的导航或操作时将用作文字分隔符的字符  \\"editor.wordSeparators\\": \\"`~!@#%^&*()-=+[{]}|;:\'\\",.<>/?\\",```去掉 - 就好了。"},{"instruction":"JS 构造函数原型对象设为 null，为什么其实例依旧存在原型链？```    function Dog(){}    Dog.prototype = null;    var dog = new Dog();    console.log(dog.__proto__==Object.prototype)//为什么这里dog.__proto_不是null，不是dog.__proto应该指向 Dog.prototype的么```","output":"可以查看es5的说明：> If Type(proto) is not Object, set the [[Prototype]] internal property of obj to the standard built-in Object prototype object as described in 15.2.4.就是说，在通过 new 关键字来创建一个对象的时候，会查看 Dog.prototype 是不是一个对象，如果不是的话，就设置为 `Object.prototype`如果你想让 dog 没有原型链，可以 `var dog = Object.create(null)``Object.create`的执行步骤可以看这里：> Set the [[Prototype]] internal property of obj to O.`Object.create(null)`等价于：```var obj = new Object();obj.__proto__ = null;```"},{"instruction":"PHP命名空间中define和const的区别比如在a.php用define定义一个常量，在b.php中声明一个命名空间 && 引入a.php此时在b.php中无法再次定义同名的常量，然而用const却可以，求解，谢谢诸位```a.php代码：define(\'ROOT\',\'123\');b.php代码：namespace web360;require \'c.php\';define(\'ROOT\',\'123\');```此时会报错（常量已经定义）而如果用const定义的话，则不会出现此问题","output":"这是因为 define 不会考虑命名空间，而 const 会。简单的说，使用 define 定义时，不会考虑当前的命名空间，所以你两次定义的常量名称重复，会报重复定义。而使用 const 定义时，会带上命名空间，你两次定义的常量实际是 `ROOT` 和 `web360ROOT` 。名称不重复，不会报重复定义的错误。"},{"instruction":"Python中list+dict的一个小问题，求大家帮忙解答l1 = [{\\"name\\": \\"aaa\\",\\"value\\": 1},{\\"name\\": \\"aaa\\",\\"value\\": 1},{\\"name\\": \\"bbb\\",\\"value\\": 2},{\\"name\\": \\"bbb\\",\\"value\\": 1}]l2 = [{\\"name\\": \\"aaa\\", \\"value\\": 2},{\\"name\\": \\"bbb\\", \\"value\\": 3}]l1--->l2?请教一个小问题，如何将列表l1中所有dict中name相同的value加起来，生成类似于l2的列表？","output":"```data = [    {\\"name\\": \\"aaa\\", \\"value\\": 1},    {\\"name\\": \\"aaa\\", \\"value\\": 1},    {\\"name\\": \\"bbb\\", \\"value\\": 2},    {\\"name\\": \\"bbb\\", \\"value\\": 1}]#第一种pandasimport pandas as pddf = pd.DataFrame(data)print df.groupby(\'name\', as_index=False).sum().to_dict(orient=\'records\')#第二种groupbyfrom itertools import groupbylst = []for k, g in groupby(sorted(data), key=lambda x: x[\'name\']):    lst.append(dict(name=k, value=sum([_[\'value\'] for _ in list(g)])))print lst```"},{"instruction":"对于<router-view></router-view>的用法在APP.vue主组件中，内容上就只有<router-view></router-view>，然后在其他页面也有<router-view></router-view>，它是怎么传递的。原理是什么","output":"可以这样理解，正常写法中，一层路径(`/xxx`)对应一个`router-view`。比如url: /a/b/c (假设a、b、c都为正常路径，不会作为参数)- 那`/a`对应的就是App.vue中的router-view，`/a`进入`a.vue`中- 那`/a/b`对应的就是a.vue中的router-view， `/a/b`进入`b.vue`中以此类推。"},{"instruction":"ES6中如何判断Set和Map等类型怎么判断这些数据类型?","output":"Chai 有过讨论，这个应该可以满足了```function getType(obj) {     var type = Object.prototype.toString.call(obj).match(/^[object (.*)]/)[1].toLowerCase();     if(type === \'string\' && typeof obj === \'object\') return \'object\'; // Let \\"new String(\'\')\\" return \'object\'     if (obj === null) return \'null\'; // PhantomJS has type \\"DOMWindow\\" for null     if (obj === undefined) return \'undefined\'; // PhantomJS has type \\"DOMWindow\\" for undefined     return type;   }``````getType(new Map()) // \\"map\\"```"},{"instruction":"如何通过onclick添加多个事件？那天面试官问我一个问题，如何用`onclick`给一个元素添加多个事件。前提是这个元素已经有一个其它人绑定的事件，在无法修改那个绑定代码的情况下现在你需要再绑定一个，如何做？```element.onclick = function(){  alert(1);}```这个是未知的，只知道已经绑定了一个事件，现在需要添加一个绑定：```element.onclick = function(){  alert(2); }```请赐教。","output":"面试官估计是想考你给onclick重新包裹一个函数后上下文的切换与参数的传递```function addClickEvent(el,fn){    if(el.onclick){        var _bak = el.onclick;        el.onclick = function(e){            _bak.call(this,e)            fn.call(this,e)        }    }else{        el.onclick = fn    }}```"},{"instruction":"【mongoose】连接警告：`open()` is deprecated in mongoose >= 4.11.0mongoose 连接成功，但是发出警告，好像是新版本要修改哪？错误信息如下```DeprecationWarning: `open()` is deprecated in mongoose >= 4.11.0，use `openUri()` instead, or set the `useMongoClient` option if using `connect()` or `createConnection()````网上找了半天没有结果，求答案，附上连接代码```var mongoose = require(\'mongoose\')mongoose.connect(\'mongodb://localhost/test\');var db = mongoose.connectiondb.on(\'error\', console.error.bind(console, \'连接错误:\'));db.once(\'open\', function() {    console.log(\'连接成功\');})```","output":"加个{useMongoClient:true}比如mongoose.connect(\'mongodb://localhost/test\',{useMongoClient:true})就可以了，我是查看：http://mongoosejs.com/docs/co...拉下来最后页的The `useMongoClient` Option才知道的"},{"instruction":"如何 “意外地” 打印 “hello world”一道简单的题目，如何“出人意料”地打印hello world，比如说用更机器native的方式。语言无所谓，也无所谓代码长短。我自己想到的一种：```# Pythonls = [104, 101, 108, 108, 111, 32, 119, 111, 114, 108, 100]s = \'\'.join(map(lambda x: chr(x), ls))print(s)```","output":"javascript: 方案一：```console.log([104, 101, 108, 108, 111, 32, 119, 111, 114, 108, 100].map(x=>String.fromCharCode(x)).join(\'\'));```方案二：```console.log(\\"x68x65x6Cx6Cx6Fx20x77x6Fx72x6Cx64\\");```方案三：```console.log((+(+!+[]+[+[]]+[+!+[]]))[(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(+![]+([]+[])[([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([![]]+[][[]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(+![]+[![]]+([]+[])[([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]])[!+[]+!+[]+[+[]]]](!+[]+!+[]+[+!+[]])[+!+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(![]+[])[!+[]+!+[]]+(![]+[])[!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(+[![]]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+!+[]]]+(+(!+[]+!+[]+!+[]+[!+[]+!+[]]))[(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(+![]+([]+[])[([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([![]]+[][[]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(+![]+[![]]+([]+[])[([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]])[!+[]+!+[]+[+[]]]](!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]])+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]+(![]+[])[!+[]+!+[]]+([][[]]+[])[!+[]+!+[]]);```"},{"instruction":"es6中export无法向外输出对象变量?comment.js中定义了一对象```const comment = {  text: \'This is text\',  author: {    name: \'Sara\',    avatarUrl: \'http://images.ichewbubble.com/01.jpg\'  }}```为什么我用export comment会出错，但是用export default comment就不会出错还有请问一个js文件中当中只能使用一次export default 吗","output":"需要特别注意的是，export命令规定的是对外的接口，必须与模块内部的变量建立一一对应关系。```// 报错 export 1;// 报错 var m = 1; export m;```上面两种写法都会报错，因为没有提供对外的接口。第一种写法直接输出1，第二种写法通过变量m，还是直接输出1。1只是一个值，不是接口。正确的写法是下面这样。```// 写法一 export var m = 1;// 写法二 var m = 1; export {m};// 写法三 var n = 1; export {n as m};```上面三种写法都是正确的，规定了对外的接口m。其他脚本可以通过这个接口，取到值1。它们的实质是，在接口名与模块内部变量之间，建立了一一对应的关系。"},{"instruction":"python循环获取json数组中某个值？我想使用Python来获取这组Json数据中的name及short字段的值，请问该怎样循环获取呢？```{  \\"apps_count\\": 6,  \\"page_size\\": 20,  \\"items\\": [    {      \\"id\\": \\"59bf8e26959d69523e000177\\",      \\"user_id\\": \\"XXXXXX\\",      \\"org_id\\": \\"59bba986548b7a1688812a7c\\",      \\"type\\": \\"android\\",      \\"name\\": \\"yljk\\",      \\"short\\": \\"yx9a\\",      \\"bundle_id\\": \\"XXXXXX\\",      \\"genre_id\\": 0,      \\"is_opened\\": false,      \\"web_template\\": \\"default\\",      \\"custom_market_url\\": \\"\\",      \\"has_combo\\": false,      \\"created_at\\": 1505725990,      \\"updated_at\\": 1505726002,      \\"expired_at\\": 1505898802,      \\"icon_url\\": \\"https://XXXXXX.com\\",      \\"master_release\\": {        \\"version\\": \\"1.0.0\\",        \\"build\\": \\"1\\",        \\"release_type\\": \\"inhouse\\",        \\"distribution_name\\": \\"\\",        \\"supported_platform\\": null,        \\"created_at\\": XXXXXX      }    },    {      \\"id\\": \\"XXXXXX\\",      \\"user_id\\": \\"XXXXXX\\",      \\"org_id\\": \\"XXXXXX\\",      \\"type\\": \\"android\\",      \\"name\\": \\"wld\\",      \\"short\\": \\"bpdb\\",      \\"bundle_id\\": \\"XXXXXX\\",      \\"genre_id\\": 0,      \\"is_opened\\": false,      \\"web_template\\": \\"default\\",      \\"custom_market_url\\": \\"\\",      \\"has_combo\\": false,      \\"created_at\\": XXXXXX,      \\"updated_at\\": XXXXXX,      \\"expired_at\\": XXXXXX,      \\"icon_url\\": \\"https://XXXXXX.com\\",      \\"master_release\\": {        \\"version\\": \\"1.0.0\\",        \\"build\\": \\"1\\",        \\"release_type\\": \\"inhouse\\",        \\"distribution_name\\": \\"\\",        \\"supported_platform\\": null,        \\"created_at\\": XXXXXX      }    },    {      \\"id\\": \\"XXXXXX\\",      \\"user_id\\": \\"XXXXXX\\",      \\"org_id\\": \\"XXXXXX\\",      \\"type\\": \\"android\\",      \\"name\\": \\"wzlj\\",      \\"short\\": \\"1tdc\\",      \\"bundle_id\\": \\"XXXXXX\\",      \\"genre_id\\": 0,      \\"is_opened\\": false,      \\"web_template\\": \\"default\\",      \\"custom_market_url\\": \\"\\",      \\"has_combo\\": false,      \\"created_at\\": XXXXXX,      \\"updated_at\\": XXXXXX,      \\"expired_at\\": XXXXXX,      \\"icon_url\\": \\"https://XXXXXX.com\\",      \\"master_release\\": {        \\"version\\": \\"1.0.0\\",        \\"build\\": \\"1\\",        \\"release_type\\": \\"inhouse\\",        \\"distribution_name\\": \\"\\",        \\"supported_platform\\": null,        \\"created_at\\": XXXXXX      }    },    {      \\"id\\": \\"XXXXXX\\",      \\"user_id\\": \\"XXXXXX\\",      \\"org_id\\": \\"XXXXXX\\",      \\"type\\": \\"android\\",      \\"name\\": \\"maib\\",      \\"short\\": \\"y6td\\",      \\"bundle_id\\": \\"XXXXXX\\",      \\"genre_id\\": 0,      \\"is_opened\\": false,      \\"web_template\\": \\"default\\",      \\"custom_market_url\\": \\"\\",      \\"has_combo\\": false,      \\"created_at\\": XXXXXX,      \\"updated_at\\": XXXXXX,      \\"expired_at\\": XXXXXX,      \\"icon_url\\": \\"https://XXXXXX.com\\",      \\"master_release\\": {        \\"version\\": \\"1.0.0\\",        \\"build\\": \\"1\\",        \\"release_type\\": \\"inhouse\\",        \\"distribution_name\\": \\"\\",        \\"supported_platform\\": null,        \\"created_at\\": XXXXXX      }    },    {      \\"id\\": \\"XXXXXX\\",      \\"user_id\\": \\"XXXXXX\\",      \\"org_id\\": \\"XXXXXX\\",      \\"type\\": \\"android\\",      \\"name\\": \\"jieb\\",      \\"short\\": \\"jg3e\\",      \\"bundle_id\\": \\"XXXXXX\\",      \\"genre_id\\": 0,      \\"is_opened\\": false,      \\"web_template\\": \\"default\\",      \\"custom_market_url\\": \\"\\",      \\"has_combo\\": false,      \\"created_at\\": XXXXXX,      \\"updated_at\\": XXXXXX,      \\"expired_at\\": XXXXXX,      \\"icon_url\\": \\"https://XXXXXX.com\\",      \\"master_release\\": {        \\"version\\": \\"1.0.0\\",        \\"build\\": \\"1\\",        \\"release_type\\": \\"inhouse\\",        \\"distribution_name\\": \\"\\",        \\"supported_platform\\": null,        \\"created_at\\": XXXXXX      }    },    {      \\"id\\": \\"XXXXXX\\",      \\"user_id\\": \\"XXXXXX\\",      \\"org_id\\": \\"XXXXXX\\",      \\"type\\": \\"android\\",      \\"name\\": \\"xxdk\\",      \\"short\\": \\"5ewf\\",      \\"bundle_id\\": \\"XXXXXX\\",      \\"genre_id\\": 0,      \\"is_opened\\": false,      \\"web_template\\": \\"default\\",      \\"custom_market_url\\": \\"\\",      \\"has_combo\\": false,      \\"created_at\\": XXXXXX,      \\"updated_at\\": XXXXXX,      \\"expired_at\\": XXXXXX,      \\"icon_url\\": \\"https://XXXXXX.com\\",      \\"master_release\\": {        \\"version\\": \\"1.0.0\\",        \\"build\\": \\"1\\",        \\"release_type\\": \\"inhouse\\",        \\"distribution_name\\": \\"\\",        \\"supported_platform\\": null,        \\"created_at\\": XXXXXX      }    }  ]}```","output":"用`get`方法更安全：```import jsondata = json.load(file)result = [(item.get(\'name\', \'NA\'), item.get(\'short\', \'NA\')) for item in data[\'items\']]```"},{"instruction":"怎样入门“人工智能-深度学习”领域，包含哪些关键技术？请已经在此坑中人事给指个方向，例如：该学习什么语言、或框架。整天被“人工智能”这几个字熏陶，感觉在不去了解下就、、、真晚了，求大神指教。","output":"这个问题不是一个糟糕的问题，只是有很多装神弄鬼的大神把人工智能吹到了天上去，就像以前说要想学计算机编程必须要数学好英语好一样，其实不见得。人工智能也是类似，很多人说要想搞人工智能必须会高等代数（甚至装逼到说连高等代数这个名词都不好，必须叫线性代数才牛逼）一样，其实没必要。实际上，学人工智能分为三个层次： 第一层对于绝大多数人来说，你只要会调用API接口就会人工智能。现在各种开放云全部提供各种人工智能接口，包括百度、阿里等等。需要语音识别吗？调接口就行了；需要图像识别吗？调接口就行了。相信我，你们公司的应用还没有牛逼到必须自己写算法的地步，市面上的各种开放接口所能做到的效果绝对比你自己写的强一百倍。当然，你只到这个层次，没有人会给你百万年薪，如果想要高薪，接着往下看。 第二层对于剩下的人里的绝大多数来说，你还是不需要什么线性代数，如果你想稍微学得深入一些，不想直接使用阿里云的语音识别，而想了解得更深入一些，这时候，你需要学习Python语言或者R语言，对R语言我了解得不多，就以Python为例，这时候有2个框架是你需要知道的：`scikit-learn`, `matplotlib`。光知道了框架也没有用，你得知道你想干什么。就像师傅给你一把斧子和一把锯子，然后呢？接下来，你需要了解一下工具的用法，可以从最简单的泰坦尼克幸存者分类或者鸢尾花分类开始做起。没有什么神秘的，原理很简单：给了你2000个人的姓名、年龄、舱位号，你来预测一下另外1000个人是死还是活？问题够简单吧？这就是“机器学习”！scikit-learn里有几百种不同的算法，你可以一个一个拿来试，直到找到一个预测准确度最高的算法为止。而且scikit-learn已经把所有算法完全包装，甭管多复杂的算法，上来就是三板斧：创建、学习、预测：```model = RandomForestClassifier() # 这里你可以随意选择任意算法model.fit(X_train, y_train)model.score(X_test, y_test)```你觉得这需要多么复杂高深的线性代数吗？你学不会算我输。当然，这时候算法的精度不够高，大概80%多，不到90%的样子，如果你对预测结果的准确率不满意，恭喜你，你又上了一个层次，这时候你可以开始逐渐尝试一些神经网络的库，比如tensorflow的cnn等等，稍微需要一些技巧，不过还是不需要什么线性代数之类的鬼东西，准确度已经可以提升到95%以上了。因为神经网络是分层的，一开始层次不能太多，最多也就是七八层的样子，现在的一些神经网络已经可以提升到100多层，所以就叫深度神经网络，相应的机器学习也就得到了一个牛逼的名字——深度学习。接下来是你该思考的问题：我能用这些库解决什么实际问题？假设你们公司是开饭馆的，那么能不能预测一下哪个饭点来的客人花钱多？诸如此类的问题，需要你去开动脑筋想一想，然后试着用这些库预测一下，看你的预测准不准。够简单吧？能做这事，大概你到外面能骗到三四十万年薪。 第三层你实在是不爽别人开发的框架（你还是想要获得百万年薪），这时候你可以开发你自己的框架，做出一个比Tensorflow还要牛逼的框架，这个时候你需要用到高等代数了，一般你应该是大学里的一个研究生或者教授，到这个层面，我就帮不上你什么忙了，因为我也还没有修炼到那个程度。不过说真的，你搞这个东西能为公司挣回来百万吗？基本也是不可能的，所以这种算法的虚火要不了多长时间就会灭火，用不着羡慕别人。做这个基本就是觉得好玩去做而已，工程师在任何商业文化里都是被人利用然后唾弃最后资本赚钱的，喜欢就好。 附录最后，英语好的话，可以经常上Kaggle寻摸寻摸，看看别人又在玩什么新花样了，增长眼界的同时也可以练练手。入门教程方面，Cousera上吴恩达教授的机器学习入门还是一门不错的课程，不过需要较好的英语。交朋友方面，可以看看我这篇被众多Java爱好者喷的体无完肤的小文。Python就是牛，在机器学习领域无敌手，哈哈哈！"},{"instruction":"vue组件注册为什么有时候要在require后面加上default?手边有两个项目，都是通过vue-cli生成的项目。其中一个项目可以直接用这样的代码注册组件：```Vue.component(\'HeaderBar\',require(\\"./components/common/HeaderBar.vue\\"));```可是另外一个项目却需要这样注册组件：```Vue.component(\'HeaderBar\',require(\\"./components/common/HeaderBar.vue\\").default);```否则的话就会报错说：```Failed to mount component: template or render function not defined```请问这是怎么一回事呢？","output":"webpack 打包时支持 CommonJS、AMD 和 ES6 的模块化系统。我们通常写 .vue 单文件组件时，在 script 语言块中使用的是 ES6 的语法，使用 export default 进行默认导出。require 是 CommonJS（和 AMD，想不到吧？）的模块导入方式，不支持模块的默认导出，因此导入的结果其实是一个含 default 属性的对象，因此需要使用 .default 来获取实际的组件选项。或者使用 ES6 的 import 语句，ES6 的模块化导入导出语法参见 http://es6-features.org/#Valu...，import 时需要给定一个变量名，所有 import 语句必须统一放在模块的开头。如果 .vue 文件中使用的本来就是 CommonJS 或者 AMD 的模块化系统语法，导出的是 module.exports 对象作为组件选项，那么使用 require 导入时就不需要使用 .default 来获取。以上就是这个问题出现的原因，下面我说说用`webpack`打包`esm`成可直接引入的配置吧。之前打包`export default`导出的包都会成为```{  default: {    // 内容  }}```webpack3多了一个配置```libraryExport: \'default\'```会将`default`中内容打包```{   内容}```"},{"instruction":"Java使用消息队列还是直接使用线程池ExecutorService异步处理？说说这两种的区别，各自适合什么场景？用线程池ExecutorService异步处理：我理解`ExecutorService`其实也是内部使用了队列（如`LinkedBlockingQueue`），所以从设计上，其实和使用中间价的消息队列是差不多一致的。只是这里应用服务器既充当生产者又充当消费者，也是消息队列中间价的实现者。这种应该适合非分布式的架构，比如简单的只有一台服务器。使用消息队列：消息队列（指activeMQ，rabbitMQ，kafaKa，Redis等）因为一般都是中间件，部署在其他机器，需要一定的网络消耗。本着解耦的目的，使用后者更合理，因为应用服务器一般内存也不会太多，队列长度不易太长。让应用服务器只处理逻辑比较合理。适合分布式架构。1.使用`JDK`提供的异步框架`ExecutorService`。```threadPool.execute(new Runnable() {    @Override    public void run() {        // 这里是异步处理的，比较耗时的逻辑，比如数据库操作        userService.setDefaultAddressId(user.getUserId(), bookingForm.getAddressId());    }});```2.将消息发送到消息队列，如使用`redis`的`List`简单实现，然后后台线程消费消息。```// 生产消息redisTemplate.opsForList().leftPush(LOG_MQ_KEY, JsonUtil.beanToJson(httpRequestLog));// 后台线程异步消费消息String popValue = redisTemplate.opsForList().rightPopAndLeftPush(LOG_MQ_KEY, TEMP_LOG_MQ_KEY);```","output":"MQ可以更加有扩展性, 支持的场景更多, 而且支持消息自动的持久化, 建议你看看 RabbitMQ 和 AMQP 协议, JMS 可以学但是没 AMQP 更加通用, redis的MQ还是不要用了, 那只是一个附带的功能, kafka 是大数据领域的不适合做核心业务功能, 只适合数据统计类应用的发送数据, 因为他不确保消息100%不丢失, 如此大的数据量丢一条无所谓的, 不会对统计结果造成影响, 但速度和吞吐量高很多线程池就不一样了, 目前执行状态你无法知道, msg的消费率是多少都不知道, 消息转发啊, 消息拒绝啊, 都的自己实现, 而且是单机版的, 我目前用他来做一级转发, 就是用他来将 event 异步发送出去, 而不是让他异步做一些很繁重的工作, 举例: 注册用户service方法, 当事务结束后, 发送 RegisterUserEvent, 这个发送就是用java线程池(如spring的), 然后 RegisterUserListener 监听到了这个 event 就发送 msg 到 Rabbit MQ, 之后对注册用户这个Topic感兴趣的应用都可以订阅, 比如送积分的服务, 送优惠券的服务, 开辟云盘空间的服务等等java领域有很多这种类比, ehcache 和 redis对比做缓存啊, java并发库 和redis锁对比并发啊等等, 都可以提出你这类型的问题"},{"instruction":"vue中自定义按钮组件为什么要加.native一直不明白为什么要@click.native = \\"goback\\"  我引用过muse-ui里面的自定义组件，很多事件都加了.native 但是我去掉也没关系，只是一直不理解加这个意义是什么。","output":"因为在自定义组件上注册的事件触发的是组件自定义的事件额 有点绕 举个例子你就明白了自定义 Button.vue 组件```<template>  <button type=\\"button\\" @click=\\"clickHandler\\"><slot /></button></template>``````export default {  name: \'button\',  methods: {    clickHandler () {      this.emit(\'vclick\') // 触发 `vclick` 事件    }  }}```引用 Button.vue 组件```<vButton @click=\\"clickHandler\\" @vclick=\\"vClickHandler\\">按钮</vButton>``````import vButton from \'@/components/Button\'export default {  components: { vButton },  methods: {    clickHandler () {      alert(\'onclick\') // 此处不会执行 因为组件中未定义 `click` 事件    },    vClickHandler () {      alert(\'onvclick\') // 触发 `vclick` 自定义事件    }  }}```如果将上面模版改成```<vButton @click.native=\\"clickHandler\\" @vclick=\\"vClickHandler\\">按钮</vButton>```那么两个事件都会执行， `.native` 修饰符就是用来注册元素的原生事件而不是组件自定义事件的至于你说的 `muse-ui` 中的自定义组件去掉 `.native` 也可以执行 想必是为了方便做了兼容处理```<template>  <!-- 此处自定义事件名也叫 `click` 所以在使用组件时加不加 `.native` 修饰符都可以 -->  <button type=\\"button\\" @click=\\"emit(\'click\')\\"><slot /></button></template>```"},{"instruction":"求解一道promise笔试题```setTimeout(function () {  console.log(1);}, 0);Promise.resolve(function () {  console.log(2);})new Promise(function (resolve) {  console.log(3);});console.log(4);```输出：3 4 undefined 1","output":"js中的事件执行主要分为两个任务类型 macro task以及micro task  也就是宏仁务和微任务宏仁务：script（全局任务），setTimeout ，setInterval ，setImmediate ，I/O ，UI rendering微任务：process.nextTick，promise,Object.observer,MutationObserver执行顺序为  script先进入函数调用栈，然后执行遇到任何其他宏仁务，比如遇到了setTimeout，就把setTimeout放进宏仁务队列中，遇到了微任务就放入微任务队列中，等到函数调用栈的所有内容出栈后 然后执行微任务队列，然后再回头执行宏仁务队列再进入函数调用栈再执行微任务队列，知道宏仁务队列执行完毕在看上面的例子```//遇到setTimeout，放入宏仁务队列setTimeout(function () {  console.log(1);}, 0);//遇到promise，放入微任务队列Promise.resolve(function () {  console.log(2);})//这里虽然遇到了promise，但是是用new声明的，也就是立即执行，所以会先输出3new Promise(function (resolve) {  console.log(3);});//第二输出4console.log(4);//需要注意的是那个undefined并不是微任务输出的，而是console.log(4)输出的，具体可以控制台测试----然后执行微任务，这个微任务并没有调用，所以也不会执行，然后执行宏仁务队列中的setTimeout，输出1```"},{"instruction":"centos7上安装php7，php -v查看php版本，提示命令不存在在centos7上安装了php7。查看当前运行的进程，有php-fpm。查找php文件，找到以下这些：```[root@demo /]# find . -name php./var/opt/remi/php71/lib/php./opt/remi/php71/root/usr/lib64/php./opt/remi/php71/root/usr/share/php./opt/remi/php71/root/usr/bin/php```运行`which php`,显示没有php：```[root@demo /]# which php/usr/bin/which: no php in (/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/root/bin)```php -v查看当前php版本，提示命令不存在，要怎么才可以？","output":"1.建立php程序的软连接 sudo ln -s /opt/remi/php71/root/usr/bin/php /usr/bin/php2.修改rc文件  1.当前用户的环境变量```#如果是使用bash作为shellvim ~/.bashrc#增加一行环境变量export PATH=/opt/remi/php71/root/usr/bin:PATH#刷新一下环境变量source ~/.bashrc```2.修改全局环境变量``` vim /etc/profile export PATH=/opt/remi/php71/root/usr/bin:PATH```"},{"instruction":"js对象方法里面为什么不能用箭头函数先上个代码例子，再说我不理解的地方，求指点，谢谢！```var name=\\"window\\";var obj={  name:\'netease\',   print1:()=>{    console.log(this.name);    }}obj.print1();//window````es6`中的`this`是定义时绑定，跟运行时无关，我很纳闷就是这个例子中，定义时  `print1`方法里面的`this`不是应该最先查找到的就是`obj`里面的`name`吗，为什么输出是`window`，还是绑定到全局变量上去了?不是明明`print1`里面没有`this`，再查找外围`this`，先找到的应该是`obj`中的`this`吗？","output":"谢邀。下面这句话引自《深入理解ES6》箭头函数没有 this/super/arguments/new.target 的绑定，这些值是由外围最近一层非箭头函数决定。箭头函数的`this`和普通函数的`this`可以看成完全两个概念的东西，不用传统的this去理解。我对`外围`的理解是，这个外围指的是`()=>{}`整体的外围，比如你的代码中：name属性的外围是什么？print1的外围是什么？。所以 `()=>{console.log(this.name);}`的外围已经出了obj，从而进入window可以借助我下面的代码来理解：```    var name = \\"window\\";    var obj = {        name: \'netease\',        print1: () => {            console.log(this.name);        },        print3: function () {            return ()=>{                console.log(this.name);            }        }    }    obj.print1();// window    obj.print3()();// netease 注意是返回闭包函数```"},{"instruction":"如何获取vue input的值```<template>  <div class=\\"hello\\">    <div class=\\"login\\">      <div class=\\"input-wrapper\\">        <input  class=\\"input\\" type=\\"text\\" placeholder=\\"手机号\\"  value=\\"\\"/>      </div>      <div class=\\"input-wrapper\\">        <input  class=\\"input\\" type=\\"password\\" placeholder=\\"密码\\" value=\\"\\"/>      </div>        <div class=\\"button\\" @click=\\"login\\">          <text class=\\"text\\">登陆</text>        </div>    </div>   <!-- <toast id=\\"toast\\"></toast>-->  </div></template><script>  //var modal = weex.requireModule(\'modal\');  var modal = weex.requireModule(\'modal\');var stream = weex.requireModule(\'stream\');  export default {    methods: {      login (event) {        //alert(\'66\');        stream.fetch({                    method: \'GET\',                    type: \'json\',                    url: \'http://xxxxxx.com/xxx/xxx?username=ggjz&password=123\'                }, function(ret) {                    if(!ret.ok){                        modal.toast({                            \'message\': \'登陆失败\',                            \'duration\': 2.0                        })                    }else{                        modal.toast({                            message: \'登陆成功\',                            duration: 2.0                        })                    }                })      },    }  }<\/script><style scoped>  .input-wrapper{    margin-left: auto;    margin-right: auto;  }  .input {    font-size: 60px;    height: 80px;    width: 750px;  }  .text{    color: #666666;    font-size: 60px;  }  .button {    width: 200px;    height: 80px;    text-align: center;    border-width: 2px;    border-style: solid;    border-color: rgb(162, 217, 192);    background-color: rgba(162, 217, 192, 0.2);    margin-top: 20px;    margin-left: auto;    margin-right: auto;  }</style>```","output":"```<input v-model=\\"value\\"/>``````data() {  return {    value: \'\'  }}``````this.value //获取```"},{"instruction":"php中静态成员方法和静态成员变量是不是不支持多态？我实现了一个日志工具基类，并派生了两个子类，一个是运维日志类，一个是业务日志类，并在基类中设置了一个静态变量希望能用以区分两个子类，但在调用静态方法时，实际上完全不是想象中的情况，代码如下：```// 日志工具基类class LogTool{    protected static type;        public static function debug(msg) {        switch (self::type) {        case \'biz\':            echo \'把日志写入数据库表1\';            break;        case \'opt\':            echo \'把日志写入数据库表2\';            break;        default:            echo \'error\';        }    }        // 其他代码省略}// 运维日志类class OptTool extends LogTool{    protected static type = \'opt\';}// 业务日志类class BizTool extends LogTool{    protected static type = \'biz\';}// 调用代码BizTool::debug(\'王小虎已登录\');```代码如上，实际上函数 dosomething 的运行情况是每次都输出 \'error\'，因为在执行静态方法debug时，静态成员 type 是空值；但是如果我把 debug 函数在子类中再实现一次，则运行时 type 变量就是有值的。可是这样做就完全没意义了，抽象父类出来就是为了减少重复代码的，现在两个子类除了写入日志的表不同，其他完全相同，结果这样的结果弄得我欲哭无泪。非常简要地回答就行","output":"基类中采用static::的方式，可以覆盖当前基类中定义的静态变量/方法，而去使用子类中定义的静态变量/方法。"},{"instruction":"redis 失效的key造成的问题是这样得```//这里面执行判断是否存在缓存res = redis -> get(\\"xxx\\");if(res != null){  //返回缓存结果  return res;//缓存返回}res = db -> query(\\"select * ...\\")//假设这句要3秒redis -> setex(\\"xxx\\",3600,res)//保存到缓存，3600时间//返回查询结果return res;```大概意思是这样的,就是我先从缓存取，没有就从数据库取，且存到缓存中，方便下次再去取。但是问题就来了，假设我有千万并发，xxx 这个key存在3600,3600时间后自动销毁，必须得重新从数据库获取，而这句sql要3秒，3秒钟并发了几千万，就是查了几千万次数据库，必须得第一条成功缓存下来,后续的才不会跳过缓存返回那句，但这期间3秒却足以使服务器垮了，我想问的是怎样才能只访问一次数据库，其他那几千万访问都是从缓存取。","output":"可以看看这篇博文：缓存更新的套路补充：缓存被“击穿”问题（以前看过一篇文章的做法，你可以借鉴一下）：业界比较常用的做法，是使用mutex。简单地来说，就是在缓存失效的时候（判断拿出来的值为空），不是立即去load db，而是先使用缓存工具的某些带成功操作返回值的操作（比如Redis的SETNX或者Memcache的ADD）去set一个mutex key，当操作返回成功时，再进行load db的操作并回设缓存；否则，就重试整个get缓存的方法。类似下面的代码：``` public String get(key) {      String value = redis.get(key);      if (value == null) { //代表缓存值过期          //设置3min的超时，防止del操作失败的时候，下次缓存过期一直不能load db          if (redis.setnx(key_mutex, 1, 3 * 60) == 1) {  //代表设置成功               value = db.get(key);                      redis.set(key, value, expire_secs);                      redis.del(key_mutex);              } else {  //这个时候代表同时候的其他线程已经load db并回设到缓存了，这时候重试获取缓存值即可                      sleep(50);                      get(key);  //重试              }          } else {              return value;                }  }```"},{"instruction":"求解一道关于js的百度笔试题```var name = \\"World\\";(function () {  if (typeof name === \'undefined\') {    var name = \'Jack\';    console.log(\'Goodbye\' + name);  } else {    console.log(\'hello \' + name);  }})()```输出：GoodbyeJack","output":"变量声明提升: 变量的声明会提升到当前作用域的顶部你的代码等于```var name = \\"World\\";(function () {  var name //声明提升  if (typeof name === \'undefined\') {    name = \'Jack\';    console.log(\'Goodbye\' + name);  } else {    console.log(\'hello \' + name);  }})()```"},{"instruction":"react不能给组件绑定点击事件吗？这是我的点击事件：```useCoupon=()=>{    console.log(444444)};```这是我的DOM结构：```<div className=\\"select-wrapper-inner\\">  {    this.state.availableCouponList.map((item,index)=>{      return (                 <SingleCoupon key={index} onClick={this.useCoupon} price={item.price} condition={item.condition} deadline={item.deadline}/>             )    })   }</div>```我现在绑定的这个点击事件不会被触发，什么意思？SingleCoupon是我自定义的一个组件","output":"SingleCoupon是你定义的组件，并不是一个真实的DOM元素，它不存在点击事件，因为它不是最终渲染的页面的元素。你应该这样用```class SingleCoupon extends Component {    render() {        return (            <div onClick={this.props.onClick}/>        )    }}```所有的事件处理函数都必须要绑定到真实的DOM上。传给组件，组件只会认为它是个prop"},{"instruction":"js对象为什么不能直接操作？发现一个小问题，在控制台输入{a:1}.toString()会报错，必须要先把{a:1}赋值给一个变量然后在进行操作才行，这是什么情况","output":"因为语法规定。因为语法规定导致 js 解释器没有正确理解你的意图。解决办法, 加括号消歧义。```({a:1}).toString() // or({a:1}.toString())```## 引申开始以为是 console 的锅，后来发现 node CLI 里一样存在这个问题，于是发现里蹊跷：花括号 `{}` 除了可以用来定义对象字面量，还可以用来定义代码块。冒号`:` 除了可以用来定义对象字面量中的 key-value 对外，还可以用来定义 `label`label的概念如果你听说过 C 语言（js就是C系的语法），你听说过有个语句叫 `goto`，那你应该对 `label` 有印象。js 里没有 `goto`，但是有 `break` 和 `continue`, 这俩货可以和 `label` 连用。`{a:1}.toString()` 之所以报错 `unexpected token .` ，是因为它被解析成了：```{// code blocka: // 定义一个label，名字叫a1 // 这是一条语句，就一个数值 1 }// block 结束了.toString() // 报错，非法字符`.````所以你可以这样玩：```{  a:console.log(1);console.log(2);}```这代码语法正确，能执行！"},{"instruction":"从mysql查出200万数据有什么好的办法查询的时候老是崩溃","output":"不要用分页，查到后面越查越慢。因为```limit 10000,100```这种那个10000是会查询然后丢弃的。正确的做法是用游标。假设你的游标字段为`id````cursor = 0;size = 1000;do {sql = \'SELECT * FROM user WHERE id > :id ORDER BY id DESC limit :size\';data = 执行查询得到的数组。count = count(data);foreach(data as row){    id = row[\'id\'];//处理数据}// 当前条数不大于size，证明下面没数据了。if(count<size){    break;}}while(true);```这种是利用mysql查询筛选【一部分你要的数据，不存在数据丢弃】。所以速度一直都很快"},{"instruction":"请问大家某些大牛常说不要做“api程序员”，这里的api一般是哪些api呢？ 像 环信 融云 这样的算api吗 ？请问大家某些大牛常说不要做“api程序员”，这里的api一般是哪些api呢？ 像 环信 融云 这样的算api吗 ？本人是做php开发的","output":"API（Application Programming Interface,应用程序编程接口）是一些预先定义的函数，目的是提供应用程序与开发人员基于某软件或硬件得以访问一组例程的能力。我们在写程序时，无疑会调用各种第三方库的API来实现功能。从描述看，问题中的API指的是Web API，这里的API并不是特指某个服务的API。对于Web API而言，仅仅调用别人的API来实现业务功能，或者说，自己仅仅是从数据库中取数据，写简单的增删查改的API，这类工作的技术含量是很低的，所以不要做“API程序员”一个好的Web开发者，应当是需要具备比较深厚的编程功底的。比如数据结构、算法等，做web开发，需要知道restful规范，HTTP协议，负载均衡，分布存储等知识。这些要求就会高得多了。简而言之，你需要去做一些技术含量高的东西，简单的API调用很基本，刚学了几天web开发的程序员就会调用，这不能构成任何的竞争力。大量轮子已经造好，完全从零开始不实际的，需要关注的是，你的代码中算法和模型这些核心占比多少，纯粹的API调用占比多少，调用的API内部实现的机制了解多少，不要只是简单调用。"},{"instruction":"golang time.Now() 格式化的问题。golang中使用time.Now().Format(\\"2006/1/2 15:04:05\\") 格式化时间输出时，Format的参数必须是\\"2006/1/2 15:04:05\\",这个时间为例的时间格式吗？```func main() {    now := time.Now()    fmt.Println(now)        // 必须使用这个时间才能返回正确的格式化后的时间，其他的都不行    fmt.Println(now.Format(\\"2006/1/2 15:04:05\\"))    fmt.Println(now.Format(\\"2006/01/02 15:04:05\\"))    fmt.Println(now.Format(\\"15:04:05 2006/1/2\\"))    fmt.Println(now.Format(\\"2006/1/2\\"))}```请问\\"2006/1/2 15:04:05\\"这个时间有什么历史典故吗？","output":"这个是我以前收藏的笔记go 的time package 提供了time.Format函数，用来对时间进行格式化输出。类似的还有time.Parse用来解析字符串类型的时间到time.Time。这是两个互逆的函数。问题是，go 采用的格式化 layout 和我们以往所用的任何经验都不同。以至于初次接触总是一头雾 水。其实 go 提供的这个 layout 对算法的实现非常科学高效，而且很规律。下面我们详细分解下。 直接上个对应表前面是含义，后面是 go 的表示值,多种表示,逗号\\",\\"分割```月份 1,01,Jan,January日　 2,02,_2时　 3,03,15,PM,pm,AM,am分　 4,04秒　 5,05年　 06,2006时区 -07,-0700,Z0700,Z07:00,-07:00,MST周几 Mon,Monday```您看出规律了么！哦是的，你发现了，这里面没有一个是重复的，所有的值表示都唯一对应一个时间部分。并且涵盖了很多格式组合。比如小时的表示(原定义是下午3时，也就是15时)```3 用12小时制表示，去掉前导003 用12小时制表示，保留前导015 用24小时制表示，保留前导003pm 用24小时制am/pm表示上下午表示，保留前导03pm 用24小时制am/pm表示上下午表示，去掉前导0```又比如月份```1 数字表示月份，去掉前导001 数字表示月份，保留前导0Jan 缩写单词表示月份January 全单词表示月份```实例对应真实时间：我的UTC时间是 2013年12月5日，我的本地时区是Asia字符表示：　　2013 12 5 AsiaGo Layout：　2006 01 2 MST真实时间：我的UTC时间是 2013年12月22点，我的本地时区是Asia字符表示：　　2013 12 22 AsiaGo Layout：　2006 01 15 MST是滴，上面这个时间是合法的，虽然没有说是那一天，但是说了小时而所有这些数字的顺序正好是1,2,4,5,6,7和一个时区MST其实还有一个秒的 repeated digits for fractional seconds 表示法用的是 0和9 ,很少用，源代码里面是这样写的stdFracSecond0                          // \\".0\\", \\".00\\", ... , trailingzeros included stdFracSecond9                          // \\".9\\", \\".99\\",..., trailing zeros omitted那些分界符除了那些值之外的都是分界符号，自然匹配了，直接举例子吧字符表示：　　2013-12 21 AsiaGo Layout：　2006-01 15 MST字符表示：　　2013年12月21时 时区AsiaGo Layout：　2006年01月15时 时区MST好了，您是否感觉这个表示方法兼容度更好，适应性更强呢，更容易记忆呢。"},{"instruction":"javascript把json对象转为数组转换前是这样的：```var articles = [{    title: \'hello\',    content: \'hello world\',    created_at:\'2017-08-30 13:45:15\'},{    title: \'foo\',    content: \'foo bar\',    created_at:\'2017-08-30 13:45:15\'}];```我想把它转成这样：```var articles2 = [    [ \'hello\', \'hello world\', \'2017-08-30 13:45:15\' ],    [ \'foo\', \'foo bar\',\'2017-08-30 13:46:06\' ]];```用js应该怎么做呢？","output":"```var articles = [{    title: \'hello\',    content: \'hello world\',    created_at:\'2017-08-30 13:45:15\'},{    title: \'foo\',    content: \'foo bar\',    created_at:\'2017-08-30 13:45:15\'}]var result = articles.map(item => {  return Object.values(item)})```"},{"instruction":"如何用Laravel 做Api接口我想用laravel做个api接口，但是作为接口，应该对请求做校验，我能想到将校验的数据放到header中，在laravel的中间件对header做校验，但是我现在不知道拿到header怎么去用。还有就是做api对请求校验的作用，重要性","output":"API接口的校验有很多种，看你的API是用在哪方面，APP还是web。也不一定非要放在header中，使用基础的signature方案也能完成对接口的校验。signature方案：客户端和API使用同一套加密规则，提供一个APPkey和secret，然后经过secret加密（或者其他处理过程）生成signature，传输的时候将signature和appkey作为参数传递。这是目前用的比较多的一种API接口调用权限校验，只是用来校验客户端是否有权限调用API。JWT: JSON WEB TOKEN 也是一种可选的，只不过他更复杂， 更多的是用来校验用户的登录状态和权限，（用在APP、无状态的web系统），关于JWT有相对应的 composer 包可选择。核心思想就是，API加密一个uid或者其他标识，生成一个token，这个token是有时限的，比如两个小时，放在header的Authorization中，通过获取进行校验，（涉及用户的操作，一般会传递uid或者其他类似标识字段），通过JWT进行权限校验即可。至于拿到 header 怎么用，如果是JWT 取出 Authorization字段，以及标识字段（如UID）然后进行JWT校验即可，加密和校验可以自己实现，不过建议使用成熟的composer包吧，比如我用过的：https://github.com/lcobucci/jwt。看你到底需求什么校验 是 `用户鉴权` 还是 `API接口调用权限校验`，个人认为这两者是不同的。另外API请求校验的作用很明显，别人即使知道你的API，也无法调用。（这个无法调用是相对的，如果你的signature校验写的很死，尤其是可以多次应用的signature，就存在重放攻击）。用户鉴权这个就更不用说了，不同的用户只能操作自己权限的东西，不鉴权的API，是存在各种问题的。"},{"instruction":"angular 对象？.语法的具体含义在angular项目的html中，比如a是个对象，a？.b这句语法是什么意思，是angular中特有的吗？还是问号运算符本身就有的功能，如```<div>    {{ foo?.bar }}</div>```","output":"`?.`是angular模板中的安全属性操作符语法，属于angular模板特有语法`a?.b`表示当a存在时(不为null或undefined)，取`a.b`的值，否则置空；以避免出现a未赋值时直接报错详见官方文档The safe navigation operator ( ?. ) and null property paths"},{"instruction":"vue-router的beforeEach导航钩子，next(\'/\')出现死循环问题为什么next()指定路径会出现死循环```router.beforeEach((to, from, next) => {  console.log(\'beforeEach\');  if(true){    next(\'/\');  }else{    next(); }});```","output":"next()直接跳转到to.path路径，没有再执行一遍beforeEach导航钩子，next(\'/\')或者next(\'/login\')自己指定路径的，路由跳转的时候还执行一遍beforeEach导航钩子，所以上面出现死循环；栗子：如我们登录页（\'/login\'）面进入首页(\'/\')，可以这么写：```router.beforeEach((to, from, next) => {  var userInfo= JSON.parse(sessionStorage.getItem(\'userInfoStorage\'));//获取浏览器缓存的用户信息  if(userInfo){//如果有就直接到首页咯    next();  }else{    if(to.path==\'/login\'){//如果是登录页面路径，就直接next()      next();    }else{//不然就跳转到登录；      next(\'/login\');    }  }});```"},{"instruction":"短信验证码是前端做还是后端？1.短信验证码接口是前端做的吗？  我们后台是php2.前端需要做什么工作啊？我以前没有做过这种事，求大神指导","output":"初步实现步骤：```1、 用户：填写手机号码2、 用户：点击发送短信3、 js  ：调用后端接口，提交手机号码-告知后端发送短信4、 后端：生成随机码，作为验证码5、 后端：保存随机码-6、 后端：调用短信接口-将随机码发送给用户7、 用户：接收到短信，填写验证码8、 用户：点击提交按钮9、 js  ：调用后端接口，提交手机号码、验证码10、后端：根据手机号码获取保存的验证码，与接收到的验证码对比，是不是一样的11、js  ：判断后端返回的结果Y/N12、js  ：反馈用户```可以另外再做些优化```a、限制用户多次提交b、后端保存的随机码加个时间限制，。。。```"},{"instruction":"什么是跳板机？什么是跳板机？","output":"跳板机，就是可以给你远程连接的机器，然后通过这个机器再去访问别的机器，这个跳板机可以是`windows`下也可以是`Linux`下，跟操作系统无关，下面是其中比较常见的一种场景：很多客户方的服务器外网是连接不了的，一般只能通过`VPN`然后才能连接，然而一些客户方觉得做`VPN`的代价太大，但是开发方不方便经常去现场或者其他原因需要访问客户方的服务器并且服务器外网不能连接时，没有`VPN`时，只能通过远程连接，比如`teamview`,`QQ`远程，还有`windows`自带的远程连接工具，连接到远端的一台电脑上，这台电脑就是跳板机，作为一个桥梁，然后再通过这个机器在内网中访问其服务器"},{"instruction":"相对于前端来说，SDK指的是什么？请问 相对于前端开发来说 SDK指的是什么？- 是API接口？- 是一段注入JS？求大大给解惑解惑！","output":"假设我开发了一个博客后台管理系统，开放了一系列功能操作的HTTP或其他协议的接口，用于创建博客、发布文章、文章列表、发布评论、对文章以及评论点赞等操作，那么这个叫API，用于其他程序方便通过接口实现博客功能。一般情况下有可能到这一步，我的博客系统就打完收工了。但是某一天有一个合作伙伴说，你们这一堆API，我熟悉起来要半天，能不能更加方便我来接入，那我问他你用什么语言，他说我就会javascript，那么我就用js写了一堆类和方法，把我的API接口封装起来，用户不需要关心接口地址等，只需要引入我封装的js的url，就可以通过类和方法就可以发布文章、创建博客、文章列表等，这个就叫SDK，当然这个SDK很简单，可能就是一个或几个js文件以及简陋的不能再简陋的文档。复杂的SDK其实是一整套完整的解决方案，比如IOS APP开发，苹果提供的SDK其实包含了开发工具Xcode、ios各种版本的sdk、帮助文档、命令行工具等等一些列东西"},{"instruction":"laravel 路由冲突跟着网上视频学习laravel5.4，写了下面两行代码。Route::get(\'/posts/{post}\',\'AppHttpControllersPostController@show\');Route::get(\'/posts/create\',\'AppHttpControllersPostController@create\');然后视频中访问localhost/laravel/public/posts/create 结果是成功的，而我访问却跳转到了show中，求解？？","output":"加一个正则表达式限制就好了，默认情况下，`laravel` 的路由匹是从上往下的，匹配到符合的第一条后，就不会往下匹配了：```//假设post为intRoute::get(\'/posts/{post}\',\'AppHttpControllersPostController@show\')->where(\'post\', \'[0-9]+\');Route::get(\'/posts/create\',\'AppHttpControllersPostController@create\');```"},{"instruction":"php 的yield叫协程，go的goroutine也叫协程，它这两种完全不一样吧？php那个我是没搞懂，而且是会暂停的。go那个呢，并不需要暂停，我就是类似另开一个线程，做完了事，返回数据，就闪人，这个还更好理解。PHP那个有点搞不懂。","output":"在`php`等语言里的`yield`，不是`协程`语法，而是`迭代器`语法。  而包括`php`在内的大多数语言实现`迭代器`的方式，是通过一个可中断的函数完成的。  而`协程`的一个特点就是执行中断，切换上下文。  所以就有了通过`迭代器`函数去`实现`协程的方案。这种方案充分利用了`迭代器`可中断的特点来模拟`协程`中断，而利用闭包函数的上下文独立性，实现`协程`的上下文切换。  总结起来，什么是协程，协程是通过切换运行方法和上下文，来在同一个空间中完成不同的处理任务（注意，不是另外开线程）。  那么协程怎么实现，`goroutine`就是协程的一种实现方式。  而通过`迭代器`实现协程，就又是另外一种方式。  两者的区别在于，`goroutine`是已经存在的实现。相当于已经成品的车，你理解起来会相当容易。  而`迭代器`只是提供者实现`协程`的方法，具体要实现协程，还需要自己去写代码完成。这就好像是汽车的零件，你需要自己组装，所以还需要深入学习你才能理解它的原理"},{"instruction":"php如何打包下载远程图片现在页面上有多张图片（来自 OSS）,如何根据这些图片的 url 来一次性将图片全部下载到本地？","output":"如果你想在 浏览器端做这个功能就需要借助 js 实现如果你想在 服务端实现这个功能，可以一张一张获取，然后打包。From : https://stackoverflow.com/que...```image1 = \\"http://cdn.screenrant.com/wp-content/uploads/Darth-Vader-voiced-by-Arnold-Schwarzenegger.jpg\\";image2 = \\"http://cdn.screenrant.com/wp-content/uploads/Star-Wars-Logo-Art.jpg\\";files = array(image1, image2);tmpFile = tempnam(\'/tmp\', \'\');zip = new ZipArchive;zip->open(tmpFile, ZipArchive::CREATE);foreach (files as file) {    // download file    fileContent = file_get_contents(file);    zip->addFromString(basename(file), fileContent);}zip->close();header(\'Content-Type: application/zip\');header(\'Content-disposition: attachment; filename=file.zip\');header(\'Content-Length: \' . filesize(tmpFile));readfile(tmpFile);unlink(tmpFile);```"},{"instruction":"为什么.vue文件需要使用export default```因为项目要使用vue开发。学习了一段时间之后有几个问题一直困惑着我：（1）首先就是.vue结尾的文件为何需要export default，就像下面的代码一样？（2）为什么data需要return，我不用return，直接 data(){    menu:MENU.data,    poi:POILIST.data}不行吗？这两个问题问了几个人都不能给我合理的解释，求懂的兄弟们给个帮助，谢谢了。``````<script>    import { POILIST, MENU } from \'../config/vuex.js\';    export default {        data() {            return {                menu: MENU.data,                poi: POILIST.data            }        },        methods: {            set() {                MENU.list.push(\'首页\');                POILIST.list.push({                    lng: 124.1,                    lat: 42.3                });            }        }    }<\/script>```","output":"export default是ES6的语法，意思是将这个东西导出，你要import 引入东西，导出了才能引用，data是一个函数是因为data是被很多组件共享的，如果 data 是一个的对象的话，每次实例化会造成所有的实例共享引用同一个数据对象，如下```var fnc= function() {}fnc.prototype.data = {  a: 1,  b: 2,}var fnc1 = new fnc()var fnc2 = new fnc()fnc1.data.a === fnc2.data.a // truefnc2.data.b = 1;fnc2.data.b // ==1```data 是函数的话，每次创建一个新实例后，调用 data 函数，用return返回初始数据的一个全新副本数据对象，就避免了所有实例共享引用同一个数据对象。"},{"instruction":"npm install -g 和npm install --save-dev的关系npm install --save-dev xxx是自动把模块和版本号添加到devdependencies部分npm install -g xxx是将模块安装在全局但是执行了npm install --save-dev，package.json中devDependencies会加入安装的模块，但是在命令行中执行命令时还是出现command not found，还是必须要npm install -g安装在全局才行。npm install --save-dev的作用仅仅是自动把模块和版本号添加到devdependencies部分么，我们还是需要先安装么？还是说我们没配对环境变量？ 为什么很多教程在Installation这流程都是npm install --save-dev xxx就OK了呢","output":"1.`npm install`本地安装（1）将安装包放在 ./node_modules 下（运行 npm 命令时所在的目录），如果没有 node_modules 目录，会在当前执行 npm 命令的目录下生成 node_modules 目录。（2）可以通过 require() 来引入本地安装的包。2.`npm install` -g全局安装(1) 将安装包放在 /usr/local 下或者你 node 的安装目录。(2)可以直接在命令行里使用。3.`npm install --save`(1)会把msbuild包安装到node_modules目录中(2)会在package.json的dependencies属性下添加msbuild(3)之后运行npm install命令时，会自动安装msbuild到node_modules目录中(4)之后运行npm install --production或者注明NODE_ENV变量值为production时，会自动安装msbuild到node_modules目录中4.`npm install --save-dev`(1)会把msbuild包安装到node_modules目录中(2)会在package.json的devDependencies属性下添加msbuild(3)之后运行npm install命令时，会自动安装msbuild到node_modules目录中(4)之后运行npm install --production或者注明NODE_ENV变量值为production时，不会自动安装msbuild到node_modules目录中"},{"instruction":"React-Router V4+ 打包后刷新网页404错误开发使用的构建工具是 create-react-app我在使用 React-Router V4+ 版本的时候，```npm run build```编译成功后放在我本地的 Tomcat9 上，运行后可以正常访问首页，跳转其它页面 URL 都正常显示， 但是再刷新当前页面404错误。按照官方提示：There is also a similar approach for Apache servers. Create an .htaccess file in your folder\'s root:```RewriteBase /RewriteRule ^index.html - [L]RewriteCond %{REQUEST_FILENAME} !-fRewriteCond %{REQUEST_FILENAME} !-dRewriteRule . /index.html [L]```问题1 ：创建了 .htaccess 文件后，该文件是放在我编译好的包的根目录（index.html所在目录）下，还是在 其它位置。如果需要修改其它东西如 Apache 配置文件，要怎么修改。问题2 ：在网上看到这种情况都是将 URl 重定向到 index.html，请问还有其它不修改服务器配置文件的解决办法没有。跪求解答，谢谢","output":"我没看过文档，建议你要理解内部的机制。之所以你在浏览器内可以由首页跳转到其他路由地址，是因为这是由前端自行渲染的，你在React Router定义了对应的路由，脚本并没有刷新网页访问后台，是JS动态更改了location。当你刷新时，你首先是访问的后台地址，然后返回的页面内加载了React代码，最后在浏览器内执行；也就是说如果这个时候报404，是因为你后台并没有针对这个路由给出返回HTML内容，也谈不上执行React Router了。解决办法就一条：如果你期望所有的路由都由React Router来定义，只有你的后台，无论任何路径，都返回index.html就好了。剩下的事情交给React Router。那么你要做的就是修改后台服务器，可以放在apache，也可以放在你的java路由内做一个通配路径处理。"},{"instruction":"如何用 javascript 实现多字段模糊查询数组如下```var arr = [    {id: \\"1\\", en: \\"Afghanistan\\", cn: \\"阿富汗\\", code: \\"93\\"},    {id: \\"2\\", en: \\"Iraq\\", cn: \\"伊拉克\\", code: \\"964\\"},            {id: \\"3\\", en: \\"Qatar\\", cn: \\"卡塔尔\\", code: \\"974\\"}    ]```en,cn,code都能查询比如输入`aq`，查询返回第二条比如输入`卡`，查询返回第三条比如输入`97`，查询返回第三条","output":"```function query(arr, q) {  return arr.filter(v => Object.values(v).some(v => new RegExp(q + \'\').test(v))  )}```"},{"instruction":"在命名规范的情况 你还会写注释么？比如一些方法```// 封装链路信息数据formatLinksInfo() {}// 获取节点坐标数据getNodesPosition() {}// ip转数字ipToNum() {}// 判断元素是否全部选中isAllElemsActive() {}// 右键菜单选项itemContextMenu() {}if(target.classed(\'topo\')){} // 拓扑图情况if(target.classed(\'node\')){} // 节点if(target.classed(\'link\')){} // 链路```比如像这种命名 不写注释感觉也能通过方法名或者类名 也能看懂，但自己还是都写了 现在code review看来觉得很冗余问一下你们关于代码注释编写原则是啥呢，能通过命名读懂的都不写么？","output":"- 你不应该在每次调用方法的时候写注释，而是应该在声明函数的地方写注释- 建议每个函数都写相应的注释你自己写代码存在主观性，你觉得规范，其实不一定规范，或许可以说不一定全面;每个人理解方法是不一样的，你觉得命名规范了，那也许是真的很规范，但是并不是所有人都能一下子看懂，如果要整个遍历一下方法实现过程这是非常浪费时间的，别人看到一个函数应该立刻能从注释和方法名知道这个函数是干什么的;函数名写的再好，我也只能大概猜到这个函数是干什么的，但是我对函数的参数和返回值类型等信息一无所知总而言之，空间换时间，一次时间换以后的`N`次时间是非常值得的- 建议写英文注释，这样`review`起来更加简洁，不显得那么格格不入，不要觉得什么自己或者其他人英文底子不好，网上各种英汉词典，多写英文注释遇到不知道的还能多学几个英文单词建议每个函数都写相应的注释- 你自己写代码存在主观性，你觉得规范，其实不一定规范，或许可以说不一定全面;- 每个人理解方法是不一样的，你觉得命名规范了，那也许是真的很规范，但是并不是所有人都能一下子看懂，如果要整个遍历一下方法实现过程这是非常浪费时间的，别人看到一个函数应该立刻能从注释和方法名知道这个函数是干什么的;- 函数名写的再好，我也只能大概猜到这个函数是干什么的，但是我对函数的参数和返回值类型等信息一无所知- 总而言之，空间换时间，一次时间换以后的`N`次时间是非常值得的"},{"instruction":"Vue路由的router.back(-1)回退时如何判断有没有上一个路由现在每个页面的左上角有一个返回按钮<点击时的代码是this.router.back(-1)，返回上一个路由但是我们现在有这样一个需求，把其中某一页分享出去，用户打开时并没有上一条路由的历史记录，所以点击<按钮时没有反应。所以应该怎么判断有没有上一条路由的历史记录。代码：routerback: function () {  this.router.back(-1)},","output":"在页面一开始加上一个全局的函数：```activated: function () {  this.setgoindex()}```这个函数是这样的，判断当前页面的历史记录是不是小于等于1，如果小于等于1，说明这个页面没有可以返回的上一页，如果没有可以返回的上一页，就给地址栏加上一个goindex=true的参数，这样你从这个页面在往下一个页面跳转在返回，这个参数就一直加上的```Vue.prototype.setgoindex = function () {  if (window.history.length <= 1) {    if (location.href.indexOf(\'?\') === -1) {      window.location.href = location.href + \'?goindex=true\'    } else if (location.href.indexOf(\'?\') !== -1 && location.href.indexOf(\'goindex\') === -1) {      window.location.href = location.href + \'&goindex=true\'    }  }}```然后在左上角返回按钮加上这个逻辑：```if (this.route.query.goindex === \'true\') {  this.router.push(\'/\')} else {  this.router.back(-1)}```这样就可以了"},{"instruction":"axios 可以挂在Vue原型上 为啥还有个vue-axios?如题，这个vue-axios有什么其他用途还是多余的？因为```Vue.prototype.http = axios和import Vueaxios from ‘vue-axios’Vue.use(VueAxios,axios)```这二者效果都是一致，这样我就感觉vue-axios显得多余。希望知道多一点的朋友，能告诉我vue-axios存在的必要，非常感谢！","output":"何不看看vue-axios的源码，就一个文件：index.js```(function () {/ * Install plugin * @param Vue * @param axios */function plugin(Vue, axios) {  if (plugin.installed) {    return  }  plugin.installed = true  if (!axios) {    console.error(\'You have to install axios\')    return  }  Vue.axios = axios  Object.defineProperties(Vue.prototype, {    axios: {      get() {        return axios      }    },    http: {      get() {        return axios      }    }  })}if (typeof exports == \\"object\\") {  module.exports = plugin} else if (typeof define == \\"function\\" && define.amd) {  define([], function(){ return plugin })} else if (window.Vue && window.axios) {  Vue.use(plugin, window.axios)}})();```首先是按照`Vue`的插件文档来写的，直接绑在原型链上不是不可以，如果像您这样注册一个http，和项目其他成员协作的时候就必须注明你注册的变量名称，而使用vue-axios大家就没有歧义了。说白了，使用vue-axios更多是为了符合规范，并且方便协作吧。"},{"instruction":"react native使用 react-navigation登录后如何清空 react-navigetion 内的返回记录？如题所说，使用navigation 导航，登录后清空记录，navigation有相应的方法吗???????","output":"跳转并清空路由记录``` import { NavigationActions } from \'react-navigation\' resetAction = NavigationActions.reset({                index: 0,                actions: [                    NavigationActions.navigate({routeName:\'xxx\'})//要跳转到的页面名字                ]            });this.props.navigation.dispatch(resetAction);```"},{"instruction":"移动端页面使用background-attachment:fixed;固定背景图片在某些机型中微信中打开不起作用，大家遇到过没？怎么解决的呢","output":"移动端对`background-attachment: fixed`支持的不好，但可以hack一下。```cssbody:before {  content: \' \';  position: fixed;  z-index: -1;  top: 0;  right: 0;  bottom: 0;  left: 0;  background: url(path/to/image) center 0 no-repeat;  background-size: cover;}```"},{"instruction":"怎么用js通过文件的url下载文件到本地目前拿到的是文件的url，不是下载地址，只是文件的存放地址。前端怎样用js通过这个url实现文件的下载呢？","output":"```<!DOCTYPE html><html><head>    <meta charset=\\"utf-8\\">    <title></title></head><body>    <a href=\\"/download/papers/abc.doc\\">点击链接下载</a>    <button onclick=\\"download1()\\">点击按钮下载</button>      <button onclick=\\"download2\\">点击按钮下载</button>    <script>        // 会打开一个空白页下载，然后空白页消失，用户体验不好        function download1() {            window.open(\'/download/papers/1\');        }              // 直接下载，用户体验好        function download2() {            var form = (\'<form method=\\"GET\\"></form>\');            form.attr(\'action\', \'/download/papers/1\');            form.appendTo((\'body\'));            form.submit();        }    <\/script></body></html>```"},{"instruction":"请问 React 中的 registerServiceWorker是干什么的？create-react-app生成的项目中，多了一个registerServiceWorker.js，并且在 index.js 中引用，请问这个registerServiceWorker是什么东西，融合进 react 的目的是什么？","output":"看下注释你就知道了，主要是用于在生产环境中为用户在本地创建一个`service worker` 来缓存资源到本地，提升应用的访问速度，具体看下面这段注释。```// In production, we register a service worker to serve assets from local cache.// This lets the app load faster on subsequent visits in production, and gives// it offline capabilities. However, it also means that developers (and users)// will only see deployed updates on the \\"N+1\\" visit to a page, since previously// cached resources are updated in the background.// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.// This link also includes instructions on opting out of this behavior.```"},{"instruction":"jQuery修改input的val能否触发v-model的更新现在有需求，希望能通过jQuery修改input的值，并且能触发相关数据的更新，能不能办到。比如```(\\"input\\").val(2333);```我的需求比较奇葩啊，页面上有循环出来的大量input框，而这些input框需要通过一个自定义的键盘来输入。用jQuery的话只要在需要修改的input上打标记，然后再改它的值就行。只用vue的话目前没想到有啥简单的方法来实现。现在的想法是，实在不行就在每个input上打上数组的维度标记，然后用jQuery根据维度去data中修改对应的值。这么一来就有点麻烦了","output":"可以的，需要在设置完之后触发一下事件:```(\\"input\\").val(2333)//触发一下该input的input事件(\\"input\\")[0].dispatchEvent(new Event(\'input\'))````v-model` 只不过是个语法糖，底层还是监听的input事件"},{"instruction":"css 当a的父节点是p 的话,该怎么表达呢?```<p><a></a><p>```这种该怎么表达呢?主要是给p加一个样式……","output":"原来用纯 CSS是表达不了（CSS3没有父元素选择器）；不过 CSS4更新了功能，可以参考 CSS4选择器文档CSS Selectors from CSS4 till CSS1，还有这篇文档：新增伪类 :has()语法是：```!li > p { border:1px solid #CCC; }  /* 为 p 的父元素 li 设置一个边框 */```注意的是，这样的父级选择器当时一直都没有被各大浏览器支持；但是可以试试。"},{"instruction":"微信小程序的背景图要怎么显示？开发小程序的时候，设置页面的背景，我用到css代码：```.page__bd{    width: 100%;    height: 220px;    background: url(\'../../assets/img/images.jpg\') no-repeat;    background-size: 100% 100%;}```在调试工具上是显示的，但是扫面上传到手机上却显示不出来，谁遇到过这样的问题？","output":"可以用行内来实现```<view class=\\"warp\\" style=\\"background-image: url(\'../../images/welcome.png\')\\"></view>```上面这个在“开发工具”中能显示，但是用手机预览的时候就不出图，所以下面：以欢迎页面来说：wxml:```<!-- welcome.wxml --><view bindtap=\\"goHome\\" class=\\"warp\\">    <image src=\\"../../images/welcome.png\\"></image>    <text>{{ countDownNumber }}</text> <!-- 倒计时 --></view>```css:```page {    height: 100%;}.warp {    height: 100%;    position: relative;}.warp image {    width: 100%;    height: 100%;}.warp text {    width: 20px;    height: 20px;    line-height: 20px;    text-align: center;    color: #fff;    position: absolute;    top: 46%;    left: 50%;    margin-top: -10px;    margin-left: -10px;    border-radius: 50%;    background-color: rgba(0,0,0,.5)}```js:```//welcome.js//获取应用实例const app = getApp();Page({    /     * 页面的初始数据     */    data: {        countDownNumber: 5,        timerId: 0    },    /     * 生命周期函数--监听页面加载     */    onLoad: function (options) {        var page = this;        //倒计时关闭当前页，重定向到首页        var timer = setInterval(function(){            page.setData({                countDownNumber: page.data.countDownNumber - 1            });            if (page.data.countDownNumber == 1) {                clearInterval(timer);                wx.switchTab({                    url: \'../index/index\'                })                         }                    },1000);        page.setData({            timerId: timer        })    },    /     * 触击“欢迎页面”直接重定向到首页     */    goHome: function(e){        //清空计时器        clearInterval(this.data.timerId);        //关闭当前页，重定向到首页        wx.switchTab({            url: \'../index/index\'        })    }})```这么着“开发工具”与预览都没问题，线上没试过，它这css里好像只能放网络地址...，我也是头一次摸...."},{"instruction":"vue2 如何去除带__ob__这样的数据？```data: function () {    return {        cityData: cityData,        selectedOptions:this.source[this.schema_key]    }}```console上面的this.source[this.schema_key]如下```[24, 81, __ob__: Observer]```有么有一种方式可以直接这样获取这样数据```[24, 81]```","output":"`__ob__: Observer`这些数据是vue这个框架对数据设置的监控器，一般都是不可枚举的。`console.log`这样的打印函数，被打印的变量会执行自身的`toString()`，这样，即便内部属性是不可枚举，实际上也能看到。举个例子：```const obj = {    a: 0,    b: 1};Object.defineProperty(obj, \'b\', {    writable: false,    enumerable: false,    configurable: false});console.log(obj);    // Object {a: 0, b: 1}```因为你已经将数据绑定在了vue之中，vue就肯定要为数据添加监控器的，如果你强制删掉了这些监控器，那么这些数据也就失去了监控，那么你使用vue的意义何在……如果仅仅是去掉这些监控器而不考虑后果的话，把对象复制一份就行了，因为复制的对象是不包含不可枚举属性的。```const obj1 = {    a: 0,    b: 1};Object.defineProperty(obj1, \'b\', {    writable: false,    enumerable: false,    configurable: false});const obj2 = Object.assign({}, obj1);console.log(obj2);    // Object {a: 0}```js这类动态语言，复制对象是个很头疼的事情。我写了个简单的，你可以参考一下：```//对象深复制，不考虑循环引用的情况function cloneObj(from) {    return Object.keys(from)        .reduce((obj, key) => (obj[key] = clone(from[key]), obj), {});}//数组深复制，不考虑循环引用的情况function cloneArr(from) {    return from.map((n) => clone(n));}// 复制输入值function clone(from) {    if (from instanceof Array) {        return cloneArr(from);    } else if (from instanceof Object) {        return cloneObj(from);    } else {        return (from);    }}const obj = [    {        name: \'1\'    },    {        name: \'2\'    }];const obj2 = clone(obj);console.log(obj2);```在外面直接用`clone()`方法就行了。"},{"instruction":"php new 一个类 比如a = new Cat(); Cat后面为什么写()而不是{}<?php```class Cat{    public name;    public age;    function __construct(name,age){        this->name = name;        this->age = age;    }}a = new Cat(\'小白\',2);为什么new Cat(\'小白\',2) Cat后面是()而不是{},看起来很像是函数调用啊,虽然new一个对象,构造函数会自动调用因为js里面没有类,只有构造函数,所以new方式调用函数很好理解!```?>","output":"首先`new xxx()`这是规定的声明类的写法，至于你说像函数调用，其实你也可以理解成在`new Cat(\'小白\', 2)`的时候调用了`class Cat`中的构造函数`__construct()`，并且传递了两个参数"},{"instruction":"提高InnoDB导入数据的速度向mysql中导入维基百科的数据（数据源中sql的部分,总数据20g，单条sql 100MB--5GB），导入速度太慢，1个晚上才导入不到1GB，如何提高导入速度。主键唯一性检验和自动提交都已经关了。","output":"之前回答过一个类似的问题，思路如下：对于insert方式写入优化点：1、insert批量执行，禁止单条insert value（注意单条sql长度限制，可临时调整max_allowed_packet）2、开启事务处理，批量提交。原理类似上1(条件允许可适当增大innodb_log_buffer_size，增加单事务提交日志量，该参数read only)3、主键顺序插入，效率更高4、业务允许，暂时disable keys其他录入方式，比如load data是比较快的，可以试试另外如果业务允许，暂时禁用binlog，并将redolog文件采用软连接的方式放入内存减少磁盘io（同样也可以把你的表数据文件放入内存目录/dev/shm，要求内存足够），要记得导入完成重新放入磁盘，以上两种方式导入均可采用此方式减少磁盘io"},{"instruction":".vue文件中 使用@import 来导入样式的路径问题```    <style  lang=\\"stylus\\">        //使用 ../来匹配路径可以正确导入        @import \'../assets/css/main.styl\'; //正确        //使用 alias 中 配的 @ 就不能用了        @import \'@/assets/css/main.styl\';  //错误    </style>```怎么解决这个 @import 导入css文件的路径问题的 总不能一直 ../ 吧、webpack 配置的 alias 好像不能作用在css里面里面大佬们有什么解决办法吗？？","output":"eg: @import \'~@/assets/scss/helpers/_mixin\';使用 ~原理：CSS loader 会把把非根路径的url解释为相对路径， 加~前缀才会解释成模块路径。"},{"instruction":"PHP二维数组根据键值对获取一组数组 (不使用foreach)```user = array(      0 => array(          \'id\'    => 1,          \'name\'  => \'张三\',          \'email\' => \'zhangsan@sina.com\',      ),      1 => array(          \'id\'    => 2,          \'name\'  => \'李四\',          \'email\' => \'lisi@163.com\',      ),      2 => array(          \'id\'    => 5,          \'name\'  => \'王五\',          \'email\' => \'10000@qq.com\',      ),      ......  ); ```比如我想获取当id=2时,该数组的全部内容,不使用foreach,在PHP 5.3版本下","output":"```user = array(      0 => array(          \'id\'    => 1,          \'name\'  => \'张三\',          \'email\' => \'zhangsan@sina.com\',      ),      1 => array(          \'id\'    => 2,          \'name\'  => \'李四\',          \'email\' => \'lisi@163.com\',      ),      2 => array(          \'id\'    => 5,          \'name\'  => \'王五\',          \'email\' => \'10000@qq.com\',      ));ids = array_column(user, \'id\');new_user = array_combine(ids, user);var_dump(new_user[2]);```"},{"instruction":"vue for循环内点击只显示当前的拿到了后台给的数据，在循环的时候添加的click，想在点击当前td的时候改变当前下面的show，而不是所有```<tr v-for=\'(i,index) in data\'>    <td @click=\\"changeData\\">      <div v-if=\\"show\\">{{i.mobileNumber}}</div>    </td>    <td></td>    <td></td>    <td></td></tr>```我想过在拿到后台数据以后自己给每条数据加个show:false,但有没有更好的方法","output":"再添加一个数据项```currentActive: -1```td设置```@click=\\"currentActive = index\\"```然后div设置```v-if=\\"currentActive == index\\"```相当于一个游标，指向当前激活数据。"},{"instruction":"js = ==赋值判断问题1.无意间发现的一个问题 知道语法错误 但不知道原理是为什么.为什么bool打印出来是false2.var bool,bool_;if(bool=true && bool_==false){}console.log(bool,bool_);//false undefined","output":"很简单， js 运算符优先级的问题， && 的优先级比 = 的要高，所以你这样写等于```var bool,bool_;if(bool=(true && bool_==false)){}console.log(bool,bool_);//false undefined```这样写即可得到想要的结果```var bool,bool_;if((bool=true) && bool_==false){}console.log(bool,bool_);```望采纳！"},{"instruction":"小程序标记点（markers）怎么保持在地图中间?组件：https://mp.weixin.qq.com/debu...API:https://mp.weixin.qq.com/debu...效果就像滴滴出行的地图，可以进行选点，让标记（markers）一直居中，用户滑动放手后，获取地图中心点坐标","output":"标记marker可以用control来做，将这个control定位在地图中间就行；放手后获取地图中心坐标需要用regionchange，他可以判断当前对地图的操作状态，当e.type为end时用mapContext 获取到地图中心的位置；相关文档：https://mp.weixin.qq.com/debu...https://mp.weixin.qq.com/debu..."},{"instruction":"Python requests.get 爬虫 设置代理 IP地址未改变工作需要爬取亚马逊上面的信息，但是亚马逊反爬虫太厉害，同一个IP地址会被封。Python版本：3.6， IDE：Pycharm 2017.1在网上查了很多资料，requests库的手册也读过，但是都是同一个方法，代码如下：```import requests\'\'\'代理IP地址（高匿）\'\'\'proxy = {\'HTTPS\': \'117.85.105.170:808\'}\'\'\'head 信息\'\'\'head = {\'User-Agent\': \'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/50.0.2661.102 Safari/537.36\',     \'Connection\': \'keep-alive\'}\'\'\'http://icanhazip.com会返回当前的IP地址\'\'\'p = requests.get(\'http://icanhazip.com\', headers=head, proxies=proxy)print(p.text)```根据我看过的许多教程的理论，如果代理设置成功，最后显示的IP应该是代理的IP地址，但是最终还是我真实的IP地址，这样一来不就等于没有设置代理么？","output":"proxies在你访问http时用http的设置，访问https时用https的设置所以你的proxy需要同时包含http及https的配置，这样才能生效```proxy = {    \'http\': \'http://117.85.105.170:808\',    \'https\': \'https://117.85.105.170:808\'}```"},{"instruction":"express app和router的区别var app = express(); var router = express.Router();以上二者的区别是什么，什么时候用哪个最合适","output":"区别看下面的例子：app.js```var express = require(\'express\'),    dogs    = require(\'./routes/dogs\'),    cats    = require(\'./routes/cats\'),    birds   = require(\'./routes/birds\');var app = express();app.use(\'/dogs\',  dogs);app.use(\'/cats\',  cats);app.use(\'/birds\', birds);app.listen(3000);```dogs.js```var express = require(\'express\');var router = express.Router();router.get(\'/\', function(req, res) {    res.send(\'GET handler for /dogs route.\');});router.post(\'/\', function(req, res) {    res.send(\'POST handler for /dogs route.\');});module.exports = router;```在 `app.js` 中调用 `express()` 时，返回一个 `app` 对象。`app` 对象可以看作创建了一个 `Express` 应用程序。而当 `express.Router()` 被调用时，返回稍微不同的“迷你应用”。“迷你应用程序”背后的想法是，应用程序中的不同路线可能变得相当复杂，你可以从将该逻辑移动到单独的文件中获益。在上面这个简单的例子中，`/dogs` 路由的逻辑已经被移动到自己的文件中，所以它的 `GET` 和 `POST` 处理程序不会混乱 `app.js`。现在，你可以独立地处理对 `/dog` 的任何请求的逻辑，而不用担心它将如何影响猫 `/birds`。如果你具有与所有三条路由相关的逻辑（`Express` 中称为中间件），则可以将其放在 `app.use(...)` 调用上方的 `app.js` 中。如果你有逻辑仅与其中一条路线（`/dog`）相关，那么你只将它放在该路由的文件中。以上回答，来源于Differences between express.Router and app.get?共同学习，给赞更好～～～至于什么时候使用，其实上面的例子已经解释了。如果代码非常简单，完全可以 `app.get(\'/\',....)`,如果路由比较复杂，使用 `express.Router()` 更合适。"},{"instruction":"vue webpack [HMR] 警告[HMR] bundle has 2 warningsclient.js?ede2:161 ./src/components/Banner.vueThere are multiple modules with names that only differ in casing.This can lead to unexpected behavior when compiling on a filesystem with other case-semantic.Use equal casing. Compare these module identifiers:- D:用户目录我的文档HBuilderProjectvue-bulingwangpulingwangnode_modules.11.3.4@vue-loaderindex.js??ref--0!D:用户目录我的文档HBuilderProjectvue-bulingwangpulingwangsrccomponentsBanner.vue`Used by 6 module(s), i. e.D:用户目录我的文档HBuilderProjectvue-bulingwangpulingwangnode_modules.6.4.1@babel-loaderlibindex.js!D:用户目录我的文档HBuilderProjectvue-bulingwangpulingwangnode_modules.11.3.4@vue-loaderlibselector.js?type=script&index=0!D:用户目录我的文档HBuilderProjectvue-bulingwangpulingwangsrcpagebbsindex.vue`- D:用户目录我的文档HBuilderProjectvue-bulingwangpulingwangnode_modules.11.3.4@vue-loaderindex.js??ref--0!D:用户目录我的文档HBuilderProjectvue-bulingwangpulingwangsrccomponentsbanner.vue`Used by 1 module(s), i. e.D:用户目录我的文档HBuilderProjectvue-bulingwangpulingwangnode_modules.6.4.1@babel-loaderlibindex.js!D:用户目录我的文档HBuilderProjectvue-bulingwangpulingwangnode_modules.11.3.4@vue-loaderlibselector.js?type=script&index=0!D:用户目录我的文档HBuilderProjectvue-bulingwangpulingwangsrcpageserviceserviceDetails.vue`./~/.6.4.1@babel-loader/lib!./~/.11.3.4@vue-loader/lib/selector.js?type=script&index=0!./src/components/Banner.vueD:用户目录我的文档HBuilderProjectvue-bulingwangpulingwangnode_modules.11.3.4@vue-loaderindex.js??ref--0!D:用户目录我的文档HBuilderProjectvue-bulingwangpulingwangsrccomponentsBanner.vue````Used by 6 module(s), i. e.D:用户目录我的文档HBuilderProjectvue-bulingwangpulingwangnode_modules.6.4.1@babel-loaderlibindex.js!D:用户目录我的文档HBuilderProjectvue-bulingwangpulingwangnode_modules.11.3.4@vue-loaderlibselector.js?type=script&index=0!D:用户目录我的文档HBuilderProjectvue-bulingwangpulingwangsrcpagebbsindex.vue````D:用户目录我的文档HBuilderProjectvue-bulingwangpulingwangnode_modules.11.3.4@vue-loaderindex.js??ref--0!D:用户目录我的文档HBuilderProjectvue-bulingwangpulingwangsrccomponentsbanner.vue````Used by 1 module(s), i. e.D:用户目录我的文档HBuilderProjectvue-bulingwangpulingwangnode_modules.6.4.1@babel-loaderlibindex.js!D:用户目录我的文档HBuilderProjectvue-bulingwangpulingwangnode_modules.11.3.4@vue-loaderlibselector.js?type=script&index=0!D:用户目录我的文档HBuilderProjectvue-bulingwangpulingwangsrcpageserviceserviceDetails.vue````./~/.6.4.1@babel-loader/lib!./~/.11.3.4@vue-loader/lib/selector.js?type=script&index=0!./src/components/Banner.vueThere are multiple modules with names that only differ in casing.This can lead to unexpected behavior when compiling on a filesystem with other case-semantic.Use equal casing. Compare these module identifiers:- D:用户目录我的文档HBuilderProjectvue-bulingwangpulingwangnode_modules.6.4.1@babel-loaderlibindex.js!D:用户目录我的文档HBuilderProjectvue-bulingwangpulingwangnode_modules.11.3.4@vue-loaderlibselector.js?type=script&index=0!D:用户目录我的文档HBuilderProjectvue-bulingwangpulingwangsrccomponentsBanner.vue`Used by 1 module(s), i. e.D:用户目录我的文档HBuilderProjectvue-bulingwangpulingwangnode_modules.11.3.4@vue-loaderindex.js??ref--0!D:用户目录我的文档HBuilderProjectvue-bulingwangpulingwangsrccomponentsBanner.vue`- D:用户目录我的文档HBuilderProjectvue-bulingwangpulingwangnode_modules.6.4.1@babel-loaderlibindex.js!D:用户目录我的文档HBuilderProjectvue-bulingwangpulingwangnode_modules.11.3.4@vue-loaderlibselector.js?type=script&index=0!D:用户目录我的文档HBuilderProjectvue-bulingwangpulingwangsrccomponentsbanner.vue`Used by 1 module(s), i. e.D:用户目录我的文档HBuilderProjectvue-bulingwangpulingwangnode_modules.11.3.4@vue-loaderindex.js??ref--0!D:用户目录我的文档HBuilderProjectvue-bulingwangpulingwangsrccomponentsbanner.vue`D:用户目录我的文档HBuilderProjectvue-bulingwangpulingwangnode_modules.6.4.1@babel-loaderlibindex.js!D:用户目录我的文档HBuilderProjectvue-bulingwangpulingwangnode_modules.11.3.4@vue-loaderlibselector.js?type=script&index=0!D:用户目录我的文档HBuilderProjectvue-bulingwangpulingwangsrccomponentsBanner.vue````Used by 1 module(s), i. e.D:用户目录我的文档HBuilderProjectvue-bulingwangpulingwangnode_modules.11.3.4@vue-loaderindex.js??ref--0!D:用户目录我的文档HBuilderProjectvue-bulingwangpulingwangsrccomponentsBanner.vue````D:用户目录我的文档HBuilderProjectvue-bulingwangpulingwangnode_modules.6.4.1@babel-loaderlibindex.js!D:用户目录我的文档HBuilderProjectvue-bulingwangpulingwangnode_modules.11.3.4@vue-loaderlibselector.js?type=script&index=0!D:用户目录我的文档HBuilderProjectvue-bulingwangpulingwangsrccomponentsbanner.vue````Used by 1 module(s), i. e.D:用户目录我的文档HBuilderProjectvue-bulingwangpulingwangnode_modules.11.3.4@vue-loaderindex.js??ref--0!D:用户目录我的文档HBuilderProjectvue-bulingwangpulingwangsrccomponentsbanner.vue````","output":"有可能是因为是路径或者文件名大小写的问题，例如原本组件是得这么引的```import SueChooseCity from \'@souche-vue/sue-pc/src/components/choosecity\';```然而在单页应用的另外一个页面的一不小心把choosecity写成了chooseCity```import SueChooseCity from \'@souche-vue/sue-pc/src/components/chooseCity\';```然后就出了这个错。```There are multiple modules with names that only differ in casing.This can lead to unexpected behavior when compiling on a filesystem with other case-semantic.```我看到你的报错信息里有bulingwangpulingwangsrccomponentsbanner和bulingwangpulingwangsrccomponentsBanner。大小写的B的区别，所以问题就出在这里。"},{"instruction":"为什么JAVA很多类都放弃了安全而要速度呢比如hashmap和hashtable，arrylist和vector这种的，我学的时候都说是xxx不用了，区别是一个安全一个不安全，当然hashtable那个还有个null的区别，为啥要用不安全的呢","output":"什么叫`放弃安全而要速度`。这认识错的太远了，需要线程安全的情况下当然是`必须`要使用线程安全的类型了，不需要自然是可以不用使用了。如下代码```public void m() {    int i = 0;    String s = \\"string\\" + i;    System.out.println(s);}````JDK`会将字节码编译成如下```  public void m();    descriptor: ()V    flags: ACC_PUBLIC    Code:      stack=2, locals=3, args_size=1         0: iconst_0         1: istore_1         2: new           #2                  // class java/lang/StringBuilder         5: dup         6: invokespecial #3                  // Method java/lang/StringBuilder.\\"<init>\\":()V         9: ldc           #4                  // String string        11: invokevirtual #5                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;        14: iload_1        15: invokevirtual #6                  // Method java/lang/StringBuilder.append:(I)Ljava/lang/StringBuilder;        18: invokevirtual #7                  // Method java/lang/StringBuilder.toString:()Ljava/lang/String;        21: astore_2        22: getstatic     #8                  // Field java/lang/System.out:Ljava/io/PrintStream;        25: aload_2        26: invokevirtual #9                  // Method java/io/PrintStream.println:(Ljava/lang/String;)V        29: return```可以很清楚的看到字节码中将字符串连接编译成`StringBuilder`的方式，我们知道`JDK`还提供了一个`StringBuffer`线程安全的字符串操作类。那`JDK`编译时为什么不选择`StringBuffer`来做呢，答案很显然是`不需要`，因为这是在一个方法的内部，一个`局部变量`是不可能会遇到`线程安全`问题的。而`HashMap`与`HashTable`也是同理，如果你是`局部变量`那只需要选择`HashMap`就可以了。如果是`全局变量`且会有多个线程同时操作该变量的情况当然是不能选择`HashMap`，而是要选择`HashTable`这种线程安全的类型，但是现在`HashTable`被选择的也会很少是因为有了更好的选择如`ConcurrentHashMap`来代替。"},{"instruction":"如何让不带www的网站访问时跳转到带www的网站我用的是nginx,我按照网上说的301配置但是没有效果，有没有懂的麻烦给讲解一下","output":"基于域名的虚拟主机的虚拟主机可以轻松做到这一点。```server {    server_name example.com;    return 301 scheme://www.example.comrequest_uri;}server {    server_name www.example.com;    #... SNIP ...#}```"},{"instruction":"PHP有办法在闭包外部得到闭包内部的变量吗？```<?php arr = [     [\'2\',\'3\'],     [\'6,7\'] ];      s= array_walk(arr, function(_value,_key){           a = 10;           return true;   });     var_dump(a);//a 打印的时候报错了，如何得到a呢？```","output":"```<?phparr = [    [\'2\',\'3\'],    [\'6,7\']];a = 0;s = array_walk(arr, function(_value,_key) use (&a) {   a = 10;   return true;});var_dump(a);```"},{"instruction":"三个函数调用之后分别输出什么？下面的三个函数调用之后分别输出什么？```function f1(x, y, a) {    arguments[2] = 10;    console.log(a);}f1(1, 2, 3);function f2(x, y, a) {    arguments[2] = 10;    console.log(a);}f2(1, 2);function f3(x, y, a) {    arguments[2] = 10;    console.log(arguments[2]);}f3(1,2);```求分析:输出结果：第一次：10；第二次：undefined；第三次：10","output":"- arguments是伪值，它是传入函数参数的值组成的数组，它的顺序和参数列表一致，且可以在函数内被重写- arguments中，每一个值都是指向参数本身的内存，而并非是副本- 函数内`arguments`，其实就是取到了`[x, y, a]`- 其中，`arguments[2]`对应的是`a`，且直接指向`a`的内存- 因此，第一个函数输出10，因为修改`arguments[2]`也就是修改`a`的内存，也就是对`a`赋值10- 第二次，由于没有传`a`，所以`arguments[2]`没有指向任何内存，且`a`也没有指定内存，因此是`undefined`- 第三次，由于`arguments[2]`没有指向任何内存，`a`也没有指定内存，所以，`arguments[2]`实质是给`arguments[2]`开辟了一块内存，并初始化值为10，但是这块内存并不是`a`的内存arguments是伪值，它是传入函数参数的值组成的数组，它的顺序和参数列表一致，且可以在函数内被重写arguments中，每一个值都是指向参数本身的内存，而并非是副本函数内`arguments`，其实就是取到了`[x, y, a]`其中，`arguments[2]`对应的是`a`，且直接指向`a`的内存因此，第一个函数输出10，因为修改`arguments[2]`也就是修改`a`的内存，也就是对`a`赋值10第二次，由于没有传`a`，所以`arguments[2]`没有指向任何内存，且`a`也没有指定内存，因此是`undefined`第三次，由于`arguments[2]`没有指向任何内存，`a`也没有指定内存，所以，`arguments[2]`实质是给`arguments[2]`开辟了一块内存，并初始化值为10，但是这块内存并不是`a`的内存"},{"instruction":"js产生1-20之间的数，要求数越小出现的概率越高，要怎么写？需要随机产生1-20之间的数，数字越小，出现的概率越高。请教大家，该怎么写？","output":"`1 + Math.floor(Math.random() * Math.random() * 20)``Math.random()`的几率是相等的，结果在0到1之间，落在0到0.5和0.5到1之间的概率都是0.5；两个`Math.random()`相乘落在0到0.5之间的概率是`3 / 4`，落在0.5到1之间的概率是`1/4`，因为只有当两次`Math.random()`的结果都在0.5以上时，结果才会在0.5到1之间。所以多个`Math.random()`相乘会使数越小出现的概率越高。Update:上面所说的：落在0到0.5之间的概率是`3 / 4`，落在0.5到1之间的概率是`1/4`，应该是`不对`的。因为即使两次`Math.random()`的结果都在0.5以上时，结果也不一定会在0.5到1之间，比如`0.6 * 0.6 = 0.36; 0.7 * 0.7 = 0.49`，所以上面的描述更正如下：感谢@manggo指正！"},{"instruction":"js扁平化树形结构的json对象 转换json数据结构有这样的一个`json`数据```[  {    \'Id\': \'1\',    \'Name\': \'教学素材管理\',    \'Pid\': \'0\',    \'id\': \'659354849B9A44AA9E2477223DF68C96\',    \'children\': [      {        \'Id\': \'4DDA93E00CD34E4D812EC1A9E10AA883\',        \'Name\': \'教学素材\',        \'Pid\': \'659354849B9A44AA9E2477223DF68C96\',        \'id\': \'4DDA93E00CD34E4D812EC1A9E10AA883\',        \'children\': [          {            \'Id\': \'6CD3A04CFBC1419F81E1A66BDC81F177\',            \'Name\': \'修改\',            \'Pid\': \'4DDA93E00CD34E4D812EC1A9E10AA883\',            \'id\': \'6CD3A04CFBC1419F81E1A66BDC81F177\'          },          {            \'Id\': \'B93352644544420782337BC41C0534A9\',            \'Name\': \'添加\',            \'Pid\': \'4DDA93E00CD34E4D812EC1A9E10AA883\',            \'id\': \'B93352644544420782337BC41C0534A9\'          }        ]      },      {        \'Id\': \'68F89C4E368048E699F3D7EDD69A86A7\',        \'Name\': \'测试试题\',        \'Pid\': \'659354849B9A44AA9E2477223DF68C96\',        \'id\': \'68F89C4E368048E699F3D7EDD69A86A7\'      },      {        \'Id\': \'CF31D0CA5BC34765A61909B296E470C6\',        \'Name\': \'问题任务\',        \'Pid\': \'659354849B9A44AA9E2477223DF68C96\',        \'id\': \'CF31D0CA5BC34765A61909B296E470C6\'      }    ]  },  {    \'Id\': \'B85EAE5FAAC64790AC62FA288E87AEAC\',    \'Name\': \'基础数据管理\',    \'Pid\': \'0\',    \'id\': \'B85EAE5FAAC64790AC62FA288E87AEAC\',    \'children\': [      {        \'Id\': \'134D7E54B9D041539940D29E24592DF4\',        \'Name\': \'专业设置\',        \'Pid\': \'B85EAE5FAAC64790AC62FA288E87AEAC\',        \'id\': \'134D7E54B9D041539940D29E24592DF4\'      },      {        \'Id\': \'2314DE1399484596A7440326E07590DB\',        \'Name\': \'专业管理\',        \'Pid\': \'B85EAE5FAAC64790AC62FA288E87AEAC\',        \'id\': \'2314DE1399484596A7440326E07590DB\'      }    ]  }]```怎么转换成（扁平化）如下格式：```[  {    \'Id\': \'1\',    \'Name\': \'教学素材管理\',    \'Pid\': \'0\',    \'id\': \'659354849B9A44AA9E2477223DF68C96\'  },  {    \'Id\': \'4DDA93E00CD34E4D812EC1A9E10AA883\',    \'Name\': \'教学素材\',    \'Pid\': \'659354849B9A44AA9E2477223DF68C96\',    \'id\': \'4DDA93E00CD34E4D812EC1A9E10AA883\'  },  {    \'Id\': \'6CD3A04CFBC1419F81E1A66BDC81F177\',    \'Name\': \'修改\',    \'Pid\': \'4DDA93E00CD34E4D812EC1A9E10AA883\',    \'id\': \'6CD3A04CFBC1419F81E1A66BDC81F177\'  },  {    \'Id\': \'B93352644544420782337BC41C0534A9\',    \'Name\': \'添加\',    \'Pid\': \'4DDA93E00CD34E4D812EC1A9E10AA883\',    \'id\': \'B93352644544420782337BC41C0534A9\'  },  {    \'Id\': \'68F89C4E368048E699F3D7EDD69A86A7\',    \'Name\': \'测试试题\',    \'Pid\': \'659354849B9A44AA9E2477223DF68C96\',    \'id\': \'68F89C4E368048E699F3D7EDD69A86A7\'  },  {    \'Id\': \'CF31D0CA5BC34765A61909B296E470C6\',    \'Name\': \'问题任务\',    \'Pid\': \'659354849B9A44AA9E2477223DF68C96\',    \'id\': \'CF31D0CA5BC34765A61909B296E470C6\'  },  {    \'Id\': \'B85EAE5FAAC64790AC62FA288E87AEAC\',    \'Name\': \'基础数据管理\',    \'Pid\': \'0\',    \'id\': \'B85EAE5FAAC64790AC62FA288E87AEAC\'  },  {    \'Id\': \'134D7E54B9D041539940D29E24592DF4\',    \'Name\': \'专业设置\',    \'Pid\': \'B85EAE5FAAC64790AC62FA288E87AEAC\',    \'id\': \'134D7E54B9D041539940D29E24592DF4\'  },  {    \'Id\': \'2314DE1399484596A7440326E07590DB\',    \'Name\': \'专业管理\',    \'Pid\': \'B85EAE5FAAC64790AC62FA288E87AEAC\',    \'id\': \'2314DE1399484596A7440326E07590DB\'  }]```","output":"供参考```function flatten (data) {  return data.reduce((arr, {Id, Name, Pid, id, children = []}) =>    arr.concat([{Id, Name, Pid, id}], flatten(children)), [])}```"},{"instruction":"正则表达式中 (?:)到底是什么意思例子：1.(w)((?=111)(1))+ 为什么=重复4次以上的字母数字，则匹配其剩下最后2位之前的部分2.\\"abcabc\\".match(/(?:a)(b).*1/g);   结果为 [\\"abcab\\"]","output":"先回答问题题目的`(?:)`意思这个代表不捕获分组比较`(X)`和`(?:X)`，前者是捕获分组，后者不捕获，区别在于正则表达式匹配输入字符串之后所获得的匹配的（数）组当中没有`(?:X)`匹配的部分；比如```var m = \\"abcabc\\".match(/(?:a)(b)(c)/)//结果 [\\"abc\\", \\"b\\", \\"c\\"]// m[0] 是/(?:a)(b)(c)/匹配到的整个字符串，这里包括了a// m[1] 是捕获组1，即(b)匹配的子字符串substring or sub sequence// m[2] 是捕获组2，即(c)匹配到的```如果这样```var m = \\"abcabc\\".match(/(a)(b)(c)/)//结果 [\\"abc\\", \\"a\\", \\"b\\", \\"c\\"]```第一小题应该是这样的正则表达式```/(w)((?=111)(1))+/```这里有一个知识点`zero-width positive lookahead`，零宽断言，正向前瞻（反正我记不住意思是`(?=X)`匹配某个位置，右边（正向）是X，它不真正匹配捕获子串。看几个匹配的测试例子```/(w)((?=111)(1))+/.test(\\"1111\\") // true/(w)((?=111)(1))+/.test(\\"2222\\") // false```匹配重复4次以上的字母或数字可以这么写```/(w)(?=1{3,})/.test(\\"AAAAAAAA\\") //true/(w)(?=1{3,})/.test(\\"AAAB\\") //false```"},{"instruction":"mysql like 模糊搜索问题一   name like \'%联想%\'  是全表搜索，如何使用索引来优化查询？```            有推荐用mysql 函数  locate/instr            explain SELECT * FROM product where name like \'%联想%\';            explain SELECT * FROM product where LOCATE(\'联想\',name)>0 ;            explain SELECT * FROM product where instr(name, \'联想\')>0 ;            看着解释没什么区别啊，都是用了全表搜索                        ```问题二   name like \'%联想%\'  是匹配的 XX联想XX。如何匹配 XX联XX XX想XX，现在是把搜索内容拆分了，name like \'%联%\' or name like \'%想%\'","output":"第一个问题: 如果左边有通配符`%`的话,是无法走索引的,只能走全表扫描,最好的结果是`select`中只查询索引覆盖的列,比如假设只有`name`s列带索引,`select name from product where name like \'%联想%\'`,走的是扫描整个索引,比全表扫描要快一点,但是应用很局限,一般不会只查被索引覆盖的列啊.第二个问题: 这种分词查询简单点就用全文索引, 如果表超级大,性能差的话, 上搜索引擎,比如`solr`,`Lucene`、`Sphinx`."},{"instruction":"webpack 生产环境打包出的 map 文件有什么用发现打包出的map文件体积比较大，想知道这个文件有什么用处，还有是否可以不打包生成这些文件？","output":"打包后产生后缀名为.map的文件是由于配置了sourcemap选项生成的，打包后的文件不容易找到出bug对应的源代码的位置，sourcemap就是来帮我们解决这个问题的，具体配置可以查看官网devtool配置或者其它的webpack sourcemap 选项多种模式的一些解释"},{"instruction":"Vue 点击切换颜色第一次点击span 字体变颜色，再次点击恢复原来颜色，做成选中的效果代码：```<li><span>健康医疗</span><span>生活服务</span><span>旅游</span><span>金融</span></li><li><span>信息安全</span><span>广告营销</span><span>数据服务</span><span>智能硬化</span></li><li><span>文化娱乐</span><span>网络招聘</span><span>分类信息</span><span>电子商务</span></li><li><span>移动互联网</span><span>企业服务</span><span>社交网络</span></li>```我是小白>_<   大神们，这个怎么弄？？？。。。有木有选择span标签进行判断的方法>_<。。。","output":"修改后： <ul v-for=\\"(item,index) in lidata\\">``` <li><span :class=\\"{active:index==isActive}\\"  @click=\\"changeClass(index)\\"> {{item.name}}</span></li>  ```</ul>data(){```    return{    isActive:-1，    lidata:[    {index:0,name:\'健康医疗\'},    {index:1,name:\'生活服务\'},    {index:2,name:\'旅游\'},    {index:3,name:\'金融\'},    {index:4,name:\'信息安全\'},    {index:5,name:\'广告营销\'},    {index:6,name:\'数据服务\'},    {index:7,name:\'智能硬化\'},    {index:8,name:\'文化娱乐\'},    {index:9,name:\'网络招聘\'},    {index:10,name:\'分类信息\'},    {index:11,name:\'电子商务\'},    {index:12,name:\'移动互联网\'},    {index:13,name:\'企业服务\'},    {index:14,name:\'社交网络\'}    ]    }   }   changeClass(index){ this.isActive=index;},实现多选： <ul v-for=\\"(item,index) in lidata\\"><li><span :class=\\"{active:item.checked}\\"  @click=\\"changeClass(item)\\"> {{item.name}}</span> </li>  ```</ul>changeClass(item){``` if(typeof item.checked==\'undefined\'){    this.set(item,\\"checked\\",true) }else{   item.checked=!item.checked }},限制三次：  changeClass(item){    let a=document.getElementsByClassName(\'active\');    if(typeof item.checked==\'undefined\'){     if(a.length<=3){      this.set(item,\\"checked\\",true);    }else{    alert(2222222222)   }    }else{   item.checked=!item.checked;   }},```"},{"instruction":"如何部署nodejs应用到服务器？事情是这样的，我是做前端开发的，最近学习nodejs并做了些练手项目。想把他们部署到服务器上，对linux和服务器部署相关知识了解较少。通过google得到大致思路如下：购买一台vps安装linux系统，安装nodejs和mongodb,用Nginx做端口映射，用pm2做进程监控管理。发现这些操作全是命令行，而且感觉好复杂，有好多不了解的知识。我只是单纯的想把项目部署到服务器，之前用php开发的程序的时候，就购买一个虚拟主机，然后ftp上传一下程序就好了，大家部署nodejs应用都是如何操作的，有没有啥简单的方法？","output":"nodejs服务器部署教程一nodejs服务器部署教程二，把vue项目部署到线上nodejs服务器部署教程三，部署基于node+vue+mongodb的项目nodejs服务器部署教程四，部署ssl证书，升级为https"},{"instruction":"antd Table 如何根据某一行的数据控制行tr的样式如果```[{nmae:xx,repeat:1},{nmae:xx,repeat:-1},{nmae:xx,repeat:1},{nmae:xx,repeat:-1},{nmae:xx,repeat:1}]```数据结构类似与上面，现在通过antd Tabel组件中的columns如何只能改变某一个单元格的式样。请问一下如何设置当repeat为1的时候改变整行tr背景？","output":"以下代码供参考```<Table columns={configColumns} rowClassName={(record, index) => index % 2  === 0 ? styles.classname : \'\'} dataSource={data}/>```"},{"instruction":"java8 stream根据下标分组我有个list想要按照奇偶下标生成两组list，只利用java8的stream可以做到吗？比如[1,3,5,7,9]，按照奇偶下标分成[1,5,9]和[3,7],但是stream似乎无法获取下标，所以试了半天也不行。另外，java8的stream以后可以完全取代for循环吗？我感觉有些复杂的逻辑拿stream折腾不是一个好的选择","output":"这个要从为什么`java8`会弄出`stream`这种循环方式说起了以前的`for`循环是属于外部循环，由调用者自己显式的取出每个元素加以处理，尤其是并行处理时，非常痛苦而stream是属于内部循环，你可以无需关心它是如何循环的，要是并行的时候如何优化，这些你都可以不管，你只需要简简单单告诉他需要做什么处理即可举个简单的例子：地上有很多乒乓球，爸爸要让你儿子捡起来放到盒子里如果是外部循环，可能这种模式爸爸：地上还有球么儿子：有爸爸：那把它捡起来放到盒子里，还有么？儿子：有爸爸：继续捡起来放到盒子里，还有么？儿子：有爸爸：接着捡起来放到盒子里，还有么？儿子：没有了爸爸：ok，收拾好了如果是内部循环爸爸：把地上的球捡起来全部放到盒子里儿子：好，完成例子可能很牵强，但是我们作为开发者，就是爸爸，只需要告诉儿子（`JDK`）把球放进盒子这个动作就好，具体儿子怎么放，一次一个手拿一个，还是一次每个手拿一个，由它自己来思考，不需要我们去指挥，我们只关注具体需要做的事就好所以说stream是一种内部循环，你不需要去关注下标...关注下标的话，从某种意义上来说，还是外部循环的思想在处理了，当然您的问题中，明确就是要求是关注下标了，貌似好像`stream`是没法写似的其实不然，写肯定能写的，只是说换一种方式而已，不把下标当成循环用的元素，而是把它与具体需要循环的数字绑定起来，写出来差不多是这个样子```public static void main(String[] args) {        List<Integer> list = Arrays.asList(1,3,5,7,9);        Map<Boolean, List<Integer>> collect = IntStream.rangeClosed(1, list.size())                                                      .boxed()                                                      // 把数字和下标绑定起来                                                      .map(i -> mapToEntry(i, list.get(i-1)))                                                      // 按照下标是否能被2整除进行分组                                                      .collect(Collectors.partitioningBy(simpleEntry -> Integer.parseInt(simpleEntry.getKey().toString()) % 2 == 0,                                                               Collectors.mapping(Map.Entry::getValue, Collectors.toList())));        // 偶数列表 3,9        List<Integer> evenList = collect.get(Boolean.TRUE);        // 奇数列表 1,5,7        List<Integer> oddList = collect.get(Boolean.FALSE);    }    private static AbstractMap.SimpleEntry<Integer, Integer> mapToEntry(Integer i, Integer integer) {        return new AbstractMap.SimpleEntry(i, integer);    }```"},{"instruction":"如何实现PHP版本共存?## 描述由于一个服务器多至多个项目.  有些项目对php版本有不一样的需求 如何实现每个项目对应指定的PHP版本?## 服务器环境- ubuntu- Nginx- MySQL- php.x (N个)ubuntuNginxMySQLphp.x (N个)## 实现效果www.demo.com -> 对应PHP7.xa.demo.com   -> 对应PHP5.xb.demo.com   -> 对应PHP4.x","output":"配置下让Nginx监听不同的端口或文件就可以实现了。大体思路如下：因为Nginx是通过PHP-FastCGI与PHP交互的，然后，PHP-FastCGI运行后会通过文件、或本地端口两种方式进行监听，在Nginx中配置相应的FastCGI监听端口或文件即实现Nginx请求对PHP的解释。因此，Nginx中根据需求配置调用不同的PHP-FastCGI端口或文件，便实现不同版本PHP共存了。修改php-fpm.conf，监听端口：```<value name=\\"listen_address\\">127.0.0.1:8001</value>```或者```<value name=\\"listen_address\\">/path/to/unix/socket</value>```修改好后，配置好php.ini相关的参数后重启一下然后，再修改Nginx```location ~ .*.(php|php5)?    {      fastcgi_pass 127.0.0.1:8001;      fastcgi_index index.php;      include fcgi.conf;    }```就可以通过监听不同端口来实现，不同版本的php-fpm调用了。"},{"instruction":"一道原生JS的问题```    <div>        <input/>        <span></span>    </div>            function nodeToFragme(node){            var flag = document.createDocumentFragment();            var child;            while(child = node.firstChild ){                flag.appendChild(child);    //请问为什么能够每次插入不同的节点？            }            return flag ;        }```为什么每次appendChild都能够插入不同的节点？不应该每次都是第一个节点么？","output":"appendChild 成功后，会把节点从原来的节点位置移除；当进入 while 循环的下次执行 (child=node.firstChild) 时, 这里面运算的 firstChild 已经变成了原先移除的下一个节点;直到 node 中再也没有节点时，(child=node.firstChild) 的返回值会为「false」,这时循环就结束了，appendChild 也完成了。附注：https://developer.mozilla.org..."},{"instruction":"laravel中如何区分get数据和post数据可能有时候会碰到这样的场景：有一个post提交请求，请求地址为:xxx?id=10，提交的post数据为:id=20而在控制器中，我要同时得到get和post中数据get中的id为10，而post中的id为20这两个id分别要如何取出来？","output":"```// 路由route::any(\'input\', \'YourController@input\')// 测试方法public function input(Request request){    // get方法    echo request->get(\'id\');    // get方法    echo request->query(\'id\');    // get方法    echo request->query->get(\'id\');    // 有post会覆盖get improve by amu(您)    echo request->id;    // 有post会覆盖get    echo request->input(\'id\');}```通过测试，一般情况下，如果post／get键名一样，post过来的数据，request->xxx和request->input(\'xxx\')会覆盖掉get的取值。"},{"instruction":"www.baidu.com为什么属于二级域名？baidu.com属于一级域名？www.baidu.com属于二级域名？www.google.com.hk属于三级域名？他的顶级域名是.hk还是.com呀？tieba.baidu.com前面为什么没有www？www.zhaopin.longfor.com前面为啥加了www，也是属于三级域名？","output":".com —— 根域（.com.cn .net.cn 等也属于根域）baidu.com —— 顶级域名、一级域名xxx.baidu.com —— 二级域名www（World Wide Web）俗称万维网，只是大家“默认”的域名前缀，但它并不是必须的。"},{"instruction":"javascript字符串提取数字？需求：要把一串字符拆分成有用的信息，字符串的格式有两种情形1、abc102、123abc100字符与数字长度不固定，提取后的结果应为:1、[\'abc\',\'10\']2、[\'123\',\'abc\',\'100\']补充需求输出结果1、[\'abc\',\'10\']2、[\'abc\',\'123\',\'100\']这样使用的时候更方便。当abc为某个特定的字符时，字符前面的数字与本身合并一起。如：1ab23=>[\'1ab\',\'23\']","output":"```/ * @param {string} str * @param {string|string[]} [keywords] * @returns {string} */function match (str, keywords) {  str = String(str)  var ks = \'\'  if (Array.isArray(keywords)) {    ks = keywords.map(k => \'d+\' + k).join(\'|\') + \'|\'  } else if (typeof keywords === \'string\') {    ks = `d+{keywords}|`  }  var checker = new RegExp(`{ks}d+|D+`, \'g\')  return str.match(checker).sort((a, b) => !isNaN(a * 1) && isNaN(b * 1) ? 1 : -1)}console.log(match(\'123abc100\')) // [ \'abc\', \'123\', \'100\' ]console.log(match(\'1ab23\', \'ab\')) // [ \'1ab\', \'23\' ]console.log(match(\'ab23\', \'ab\')) // [ \'ab\', \'23\' ]console.log(match(\'1ab23cd244gh3\', [\'ab\', \'cd\'])) // [ \'1ab\', \'23cd\', \'gh\', \'244\', \'3\' ]```"},{"instruction":"与php相比，python在采集方面有哪些优势？最新需要做采集功能，据说用python来做会比php直接用curl来写方便很多，请问主要是有哪些优势？如果是有特定的类库的话，PHP有类似的类库可以代替么？python大概看过hello word之类，感觉上手也算简单，如果为了采集单开一个项目用python来写值不值？","output":"会啥用啥，- python 和 php 数据采集方面的各自特点- PHP或者python进行数据采集和分析，有什么比较成熟的框架？python 和 php 数据采集方面的各自特点PHP或者python进行数据采集和分析，有什么比较成熟的框架？不过你有空可以深入了解了解`python`，毕竟人生苦短，不玩`python`可惜了"},{"instruction":"python set中的对象如何去重定义Person对象class Person():```def __init__(self,name,number):    self.name=name    self.number=number   ```person1=Person(\'yms\',(\'123456\',\'123\'))person2=Person(\'yms\',(\'123456\',\'123\'))将两个对象都放到set里面set([person1,person2])我得出的结果set里面含有2个对象，但是明显这俩个对象一样的，请问怎么去重呢?注意一下(\'123456\',\'123\')是个元组不是普通字符串","output":"你需要为这个类定义`__eq__`、`__ne__`、`__hash__`这三个函数，缺一不可：```class Person(object):    def __init__(self, name, number):        self.name = name        self.number = number            def __eq__(self, other):        if isinstance(other, Person):            return ((self.name == other.name) and (self.number == other.number))        else:            return False                def __ne__(self, other):        return (not self.__eq__(other))            def __hash__(self):        return hash(self.name) + hash(self.number)        p1 = Person(\'yms\', (\'123456\',\'123\'))p2 = Person(\'yms\', (\'123456\',\'123\'))print(set([p1, p2]))```由于你说`number`是元组，所以我就直接对其使用`hash`函数了。这个`hash`函数是随便写的，你自己根据实际情况调整。"},{"instruction":"Vue img使用@路径报错，import中使用正常1.webpack.base代码：``` extensions: [\'.js\', \'.vue\', \'.json\'], alias: {        \'vue\': \'vue/dist/vue.esm.js\',        \'@\': resolve(\'src\')    }```2.img报错代码：```       <div class=\\"m-icon-head\\">                <img src=\\"@/assets/head.png\\" alt=\\"\\">            </div>```3.import正常代码：index.jsimport manageJob from \'@/pages/jobhunter/Job/manage-job\';import loginSelect from \'@/components/index/login_select\';import phoneLogin from \'@/components/index/phone_login\';import passwordLogin from \'@/components/index/password_login\';组件：```import mHeader from \'@/components/header/header\';import mContent from \'./mine-content\';```错误提示：GET http://localhost:8880/@/asset... 404 (Not Found)为啥会这样？？？","output":"- 因为`@`是webpack中定义的别名，在JS中可以使用此别名，代替`resolve(\'src\')`指向的路径- `import xxxxxx`是JS语法，所以可以使用`@`别名- 而`<img src=\\"@/assets/head.png\\" alt=\\"\\">`标签中，src作为一个属性值，其值是字符串并非是JS，所以不能用`@`别名- 参见https://github.com/vuejs/vue-...- 这个方法我还没试验过，不过据上面的Issue所说，`url`地址前加`~`标记可以让解析器将地址中的别名解析出来- Issue中提出的方案是：`<img src=\\"~@/assets/head.png\\" alt=\\"\\">`因为`@`是webpack中定义的别名，在JS中可以使用此别名，代替`resolve(\'src\')`指向的路径`import xxxxxx`是JS语法，所以可以使用`@`别名而`<img src=\\"@/assets/head.png\\" alt=\\"\\">`标签中，src作为一个属性值，其值是字符串并非是JS，所以不能用`@`别名参见https://github.com/vuejs/vue-...这个方法我还没试验过，不过据上面的Issue所说，`url`地址前加`~`标记可以让解析器将地址中的别名解析出来Issue中提出的方案是：`<img src=\\"~@/assets/head.png\\" alt=\\"\\">`"},{"instruction":"Vue 怎么做scrolltop 的滚动动画做个了需求是点击右侧的item 左边滚动到队员的位置。。请问怎么可以在滚的时候加一些过度效果。。下面是我的代码```scrollToEl(name){      let scrollPosition=0      this.playerlist.forEach((item,index)=>{        if(item.players_name==name){          scrollPosition=index        }      })      // this.refs.index[scrollPosition].scrollIntoView()      let jump=document.querySelectorAll(\'.pick-right-item\')      let total=jump[scrollPosition].offsetTop      console.log(total);      // Chrome      document.body.scrollTop = total    }```这样可以直接滚动到制定位置，但是在vue中怎么做scroll的滚动动画。。","output":"非常遗憾的告诉你, scrollTop是js属性, 不是css属性, 所以无法使用transition或者animate去加动画。只能借助一些动画类库, 或者自己编写一个scroll滚动的效果."},{"instruction":"AJAX发送POST请求，请求提交后Method从POST变成GET代码如下：```.ajax({    type: \\"post\\",    dataType: \\"json\\",    url: \\"http://xxx\\",    data: {\'xxx\':\'xxx\'},    success: function(returnData) {}})```url 是经过 nginx 重定向的 http 地址，原地址为 https 地址AJAX 发送的是 POST 请求，请求提交后 chrome 调试工具中看到的请求 Method 从 POST 变成 GET","output":"服务器如果返回`301`或者`302`状态码，所有请求方法都会切换成`GET`头部的`location`如果要保证重定向后的请求方法，需要在服务端返回`307`(临时)或者`308`(永久)状态码，这两个状态码不会更改原请求方法（需要客户端支持）"},{"instruction":"怎么使用java8的stream合并HashMap的所有value为一个List，value的类型为Stack怎么使用java8的stream合并HashMap的所有value为一个List，value的类型为Stack`map = new HashMap<String, Stack<String>>;`要求把map的value合并成`List<String>`，并使用java8的stream方法操作Stack是java自带的容器，在这里完全可以看成是ArrayList","output":"在写`stream`的时候，一定要心里非常清楚当前`stream`中到底是什么元素，这样你才能结合`map`,`filter`,`peek`等方法来转化你的数据首先开始的时候还没有`stream`，数据源是一个`map`，把`map`转化为`stream`，我还是建议使用`entryset`的方式```// 此时stream里的元素是Map.Entry<String, Stack<String>>map.entrySet().stream()```您是想要`Entry`里面的`value`，也就是`Stack<String>`，那就要把`Map.Entry<String, Stack<String>>`转化为`Stack<String>`，那这里肯定要用`map`操作啦```// 此时stream里的元素是Stack<String>map.entrySet().stream().map(Map.Entry::getValue)```拿到了`Stack<String>`的`stream`还不够，看您的意思，是想取出`Stack`中的一个`String`的属性或者一个计算出来的值，那就是要把`Stack`转化为`String`，根据您的信息，这个`Stack`其实就是`java.util.Stack`,那这个也相当于是一个集合了，集合都会有都可以变成`stream`的，由于需要集合里的`string`对象，那就相当于要把这个`Stack`集合压平，压平的话，那就肯定要用`flatmap`啦```List<String> collect = map.entrySet().stream()                                     .map(Map.Entry::getValue)                                     .flatmap(Stack::stream)                                     .collect(Collectors.toList());```这样就完整啦，当然`map`中我用的是方法引用，觉得这么写更直观一点，可以看得到当前`stream`里到底是啥类型元素，你也可以写成`lamdba`的形式啦"},{"instruction":"javascript中forEach,map,for of的应用场景与效率？这裡讨论的是lodash版本的_.forEach和_.map，原生ES6 javascript的for of这三种方法。目前我的使用思路是，如果是要遍历并改变Array并回传一个新的Array，那我就选择_.map。至于for of 和_.forEach，我用了以下的方式测试效能:forEach```let arr = [];for(var i = 0 ; i<50000000 ; i++){    arr.push(i);}var start = Date.now();let sum = 0;_.forEach(arr,(a)=>{    sum += a;});var end = Date.now();console.log(\'总数:\'+sum,\'毫秒数:\'+(end-start));//总数:1249999975000000 毫秒数:1530```for of```let arr = [];for(var i = 0 ; i<50000000 ; i++){  arr.push(i);}var start = Date.now();let sum = 0;for(let a of arr){  sum += a;}var end = Date.now();console.log(\'总数:\'+sum,\'毫秒数:\'+(end-start));//总数:1249999975000000 毫秒数:575```for of速度大胜_.forEach，所以在遍历Array时，我现在会使用for of而不是_.forEach。我想问的是，这样的思路有问题吗？_.forEach要在什麽时候使用呢？我自己想到的_.forEach使用时机是遍历Object时，javascript原生的话应该是和for in比较。","output":"有问题。JS中不存在传统意义上的数组，静态语言中，数组是一段连续的内存，每一个元素都是固定字节长度的，所以通过下标可以取地址，快速找到引用值。但是JS中的数组是对象，这导致你遍历数组时，其实是在遍历对象的key(静态语言中的HashMap)，而JS中对数组类型的遍历做了特殊处理，所以foreach遍历不到非数值类型的键，这也解释了为什么foreach比forin慢，因为多了一层判断。但是如果你使用forin遍历数组，会带出非数字键：```var x = [1, 2, 3];x.a = \'a\';x.b = \'b\';x.c = \'c\';for (let k in x)  console.log(k)```即使你不会这么干，谁知道你的同伴们呢？第三方框架中呢？自定义原型链呢？结论：ES5中遍历数组还是老老实实的foreach或者for循环.你的例子中使用的是ES6，由于Array类型实现了Iterator接口，所以forof是安全的，但是如果通过babel编译成es5，我猜想由于需要引入Iterator的pollyfill，效率不可能比foreach高。"},{"instruction":"这种switch语句块中default放前面的情况怎么走```int c,i;for (int i = 1; i < 3; ++i){    switch (i)    {        default: c+=i;        case 2: c++;break;        case 4: c+=2;break;    }}printf(\\"%dn\\", c);```这个代码为什么会等于3啊？这里面不是default第一次i为1的时候走default: c+=i;，第二次i等于2就走case 2: c++;break;然后就结束，最后输出c=2吗？为什么是3呢？","output":"首先明确一下switch中的一些注意点：## 1.`switch` 语句体由一系列 `case` 标签和一个可选 `default` 标签组成。 `case` 语句中的两个常量表达式的计算结果不能为同一个值。 `default` 标签只能出现一次。 标记语句不是语法要求，但如果它们不存在，`switch` 语句是无意义的。默认语句（即`default`标签）无需显示在末尾；它可以显示在 switch 语句体的任何位置。 `case` 或 `default` 标签只能显示在 `switch` 语句内。  摘自：Microsoft Visual Studio 2015 c++ Switch语句官方文档## 2.上述所说的`case`和`default`本身就是标签，就是告诉编译器从满足这个标签开始向后执行，之后不会再判断其他标签的正确性，直到`break`语句或者`switch`语句的作用域结束。## For this problemSTEP 1 :当`i=1`时，由于`i!=2&&i!=4`故从`default`标签后开始执行，此时执行语句`c+=i;`(我们现在就假设编译器帮你把c初始化为0，要知道并不是所有的编译器都这么友好)执行后c的值为1；  STEP 2：综合上述1，2可知由于此时没有碰到任何`break`语句也没有到`switch`语句的作用域结束（因为这个`default`语句是放在第一个的）所以它接着向后执行`case 2`后的语句（此时编译器已经不看满不满足`case`标签了）此时执行语句`c++`;执行后c的值为2；遇到`break`语句跳出`switch`语句。  STEP 3:当`i=2`时，由于i满足`case 2`的情况，所以直接从`case 2`便签后的语句开始执行，此时执行语句`c++`,执行后c的值为3，遇到`break`语句跳出`switch`语句。  STEP 4:当i=3时，跳出`for`循环输出c=3；  （上述过程为本人用 Visual Studio 2015单步调试并结合资料得出的结论）"},{"instruction":"if语句如何判断中文```<?php if (96 < (this->category_info[\'id\']) && 108 > (this->category_info[\'id\'])) { ?>标题1<?php } else { ?>标题2<?php } ?>```通过以上代码可以定位如果id范围在97-107之间就显示标题1的内容，否则返回2怎么修改可以当搜索词this->search这个变量 包含\\"价格\\"这个词的时候显示标题1否则返回标题2","output":"使用 strpos```int strpos ( string haystack , string needle [, int offset = 0 ] )``````strpos(this->search, \'价格\') === false //说明不包含价格```"},{"instruction":"webpack中配置文件的module中的rules和use什么关系module有没有rules？rules中为什么还有loader，use不是也是加载loader的吗？","output":"rules是一个数组，指定多个Rule，Rule当中的loader是use中loader的简写，官方的文档的话语能很清楚的说明此疑问(建议看看官方documentation，链接: https://webpack.js.org/config... )：```Rule.loader is a shortcut to Rule.use: [ { loader } ]```"},{"instruction":"git 分支的作用如果有A和B两个人同时在开发，通常一个feature或者bugfix会建一个新分支再合并进develop分支，那如果A和B直接在develop上（pull下代码再push，有冲突再解决）不也可以开发吗，如果考虑回滚，在develop上不也可以reset或者revert吗？感觉同一个分支反而更简单，忽然不知道建新的feature或bugfix分支到底有什么好处？","output":"如果你在开发新功能的时候，急需修改一个 bug 怎么办？那你要把你新功能不稳定的代码也部署了？显然不可能。所以要有 feature 分支来保证新功能开发的差不多的时候才能进入主分支的代码。那你的 bug 可以随时修改。那么，如果你有两个 bug 是先后发现的，但是一个 bug 改好了需要上线，另一个还在改，怎么办？你把改到一般的 bug 部署上线么？显然不可能。所以你需要一个 bugfix 分支，来确保 bug 改好了代码才能回到主分支。最后，你在开发一个新功能，到一半。突然，产品经理跟你说，我这有个新功能，明天上线！！怎么办？你要把产品暴打一顿辞职还是明天上线新功能？那你第一个一半的新功能代码怎么办？扔了？还是半成品部署上线？所以你需要多个 feature 分支来开发不同的新功能。怎么样，主分支健壮了吧？随时随地可以部署了吧？"},{"instruction":"npm run dev 启动项目后报三个警告，百度查了一下也看不明白，求指点。warning  in ./~/vue-style-loader/lib/addStylesClient.jsThere are multiple modules with names that only differ in casing.This can lead to unexpected behavior when compiling on a filesystem with other case-semantic.Use equal casing. Compare these module identifiers:- E:WebProjectUFAPPDYJJnode_modulesvue-style-loaderlibaddStylesClient.js`Used by 4 module(s), i. e.E:WebProjectUFAPPDYJJnode_modulesvue-style-loaderindex.js!E:WebProjectUFAPPDYJJnode_modulescss-loaderindex.js?{\\"minimize\\":false,\\"sourceMap\\":false}!E:WebProjectUFAPPDYJJnode_modulesvue-loaderlibstyle-compilerindex.js?{\\"vue\\":true,\\"id\\":\\"data-v-f7c02f2c\\",\\"scoped\\":false,\\"hasInlineConfig\\":false}!E:WebProjectUFAPPDYJJnode_modulesvue-loaderlibselector.js?type=styles&index=0!E:WebProjectUFAPPDYJJsrcApp.vue`- E:WebProjectufappDYJJnode_modulesvue-style-loaderlibaddStylesClient.js`Used by 1 module(s), i. e.E:WebProjectUFAPPDYJJnode_modulesvue-style-loaderindex.js!E:WebProjectUFAPPDYJJnode_modulescss-loaderindex.js??ref--4-1!E:WebProjectufappDYJJnode_modules.7.0.0@normalize.cssnormalize.css`E:WebProjectUFAPPDYJJnode_modulesvue-style-loaderlibaddStylesClient.js````Used by 4 module(s), i. e.E:WebProjectUFAPPDYJJnode_modulesvue-style-loaderindex.js!E:WebProjectUFAPPDYJJnode_modulescss-loaderindex.js?{\\"minimize\\":false,\\"sourceMap\\":false}!E:WebProjectUFAPPDYJJnode_modulesvue-loaderlibstyle-compilerindex.js?{\\"vue\\":true,\\"id\\":\\"data-v-f7c02f2c\\",\\"scoped\\":false,\\"hasInlineConfig\\":false}!E:WebProjectUFAPPDYJJnode_modulesvue-loaderlibselector.js?type=styles&index=0!E:WebProjectUFAPPDYJJsrcApp.vue````E:WebProjectufappDYJJnode_modulesvue-style-loaderlibaddStylesClient.js````Used by 1 module(s), i. e.E:WebProjectUFAPPDYJJnode_modulesvue-style-loaderindex.js!E:WebProjectUFAPPDYJJnode_modulescss-loaderindex.js??ref--4-1!E:WebProjectufappDYJJnode_modules.7.0.0@normalize.cssnormalize.css````warning  in ./~/css-loader/lib/css-base.jsThere are multiple modules with names that only differ in casing.This can lead to unexpected behavior when compiling on a filesystem with other case-semantic.Use equal casing. Compare these module identifiers:- E:WebProjectUFAPPDYJJnode_modulescss-loaderlibcss-base.js`Used by 4 module(s), i. e.E:WebProjectUFAPPDYJJnode_modulescss-loaderindex.js?{\\"minimize\\":false,\\"sourceMap\\":false}!E:WebProjectUFAPPDYJJnode_modules.2.0.0-rc.17@iviewdiststylesiview.css`- E:WebProjectufappDYJJnode_modulescss-loaderlibcss-base.js`Used by 1 module(s), i. e.E:WebProjectufappDYJJnode_modulescss-loaderindex.js?{\\"minimize\\":false,\\"sourceMap\\":false}!E:WebProjectufappDYJJnode_modules.7.0.0@normalize.cssnormalize.css`E:WebProjectUFAPPDYJJnode_modulescss-loaderlibcss-base.js````Used by 4 module(s), i. e.E:WebProjectUFAPPDYJJnode_modulescss-loaderindex.js?{\\"minimize\\":false,\\"sourceMap\\":false}!E:WebProjectUFAPPDYJJnode_modules.2.0.0-rc.17@iviewdiststylesiview.css````E:WebProjectufappDYJJnode_modulescss-loaderlibcss-base.js````Used by 1 module(s), i. e.E:WebProjectufappDYJJnode_modulescss-loaderindex.js?{\\"minimize\\":false,\\"sourceMap\\":false}!E:WebProjectufappDYJJnode_modules.7.0.0@normalize.cssnormalize.css````warning  in ./~/vue-style-loader/lib/listToStyles.jsThere are multiple modules with names that only differ in casing.This can lead to unexpected behavior when compiling on a filesystem with other case-semantic.Use equal casing. Compare these module identifiers:- E:WebProjectUFAPPDYJJnode_modulesvue-style-loaderliblistToStyles.js`Used by 1 module(s), i. e.E:WebProjectUFAPPDYJJnode_modulesvue-style-loaderlibaddStylesClient.js`- E:WebProjectufappDYJJnode_modulesvue-style-loaderliblistToStyles.js`Used by 1 module(s), i. e.E:WebProjectufappDYJJnode_modulesvue-style-loaderlibaddStylesClient.js`E:WebProjectUFAPPDYJJnode_modulesvue-style-loaderliblistToStyles.js````Used by 1 module(s), i. e.E:WebProjectUFAPPDYJJnode_modulesvue-style-loaderlibaddStylesClient.js````E:WebProjectufappDYJJnode_modulesvue-style-loaderliblistToStyles.js````Used by 1 module(s), i. e.E:WebProjectufappDYJJnode_modulesvue-style-loaderlibaddStylesClient.js````","output":"There are multiple modules with names that only differ in casing.有多个模块同名仅大小写不同This can lead to unexpected behavior when compiling on a filesystem with other case-semantic.这可能导致在一些文件系统中产生不是预期的行为Use equal casing. 使用唯一的写法猜测是因为你的文件名和引用不一致，举个例，文件名是App.js，但是你引用的时候是写的app.js"},{"instruction":"React 如何监听路由变化重新渲染组件```// route.js<Router>  <Switch>    <Route path=\\"/\\" component={NewsList} />    <Route path=\\"/new\\" component={NewsList} />    <Route path=\\"/show\\" component={NewsList} />    <Route path=\\"/ask\\" component={NewsList} />    <Route path=\\"/jobs\\" component={NewsList} />  </Switch></Router>``````class NewsList extends Component {  componentWillMount () {    const type = this.props.location.pathname.replace(\'/\', \'\') || \'top\'    this.props.dispatch(fetchListData(type))  }      render () {    ...  }}```react: v15.6.1  react-router: v4.1.1部分代码如上，现在的问题是切换路由时，组件并不会重新渲染。请问如何解决？","output":"为什么需要重新渲染组件？实质上，你想要的只是当路由变化，请求对应路由的数据而已。那么考虑一下React组件的生命周期钩子。第一次加载时:```\\"constructor\\"\\"componentWillMount\\"\\"render\\"\\"componentDidMount\\"```当组件的props发生改变时，组件更新，会调用如下的生命周期钩子```\\"componentWillReceiveProps\\"\\"shouldComponentUpdate\\"\\"componentWillUpdate\\"\\"render\\"\\"componentDidUpdate\\"```当路由变化时，即组件的props发生了变化，会调用componentWillReceiveProps等生命周期钩子 那我们所需要做的只是： 当路由改变时，根据路由，也去请求一下数据就OK了，于是乎:```class NewsList extends Component {  componentDidMount () {     this.fetchData(this.props.location);  }    fetchData(location) {    const type = location.pathname.replace(\'/\', \'\') || \'top\'    this.props.dispatch(fetchListData(type))  }  componentWillReceiveProps(nextProps) {     if (nextProps.location.pathname != this.props.location.pathname) {         this.fetchData(nextProps.location);     }   }  render () {    ...  }}```"},{"instruction":"Vue.prototype的问题我用Vue在main.js中创建```Vue.prototype.a = 1;  这个全局的变量后；```在组件a中使用```console.log(this.a);     // => 1this.a = 2;```然后从a跳到b后；```console.log(this.a);```还是1，不是2，为什么？ 怎么修改这种全局的变量啊？还是说用其他的方法设置和修改全局的变量或对象？","output":"这个不是全局变量，而是原型。因为每一次跳转到新的Vue页面，都是一个独立的Vue实例，实例中`this.a`从`Vue.prototype.a`而来，所以仍然是1。如果需要设置全局变量，在`main.js`中，Vue实例化的代码里添加```new Vue({    ...    data() {        return {            ...,            a: 1            ...        };    },    ...});```其他所有组件中通过`root.a`可访问此变量。"},{"instruction":"数据库如何判断一条数据是否被修改?A ,B同时在一页面上访问一组数据, A针对其中一条数据做了修改. B的页面没有刷新,所以B看见的信息是在A修改之前的,这时候B也要修改这条数据. 我如何做才能提醒B,这条数据已经被修改过.  看到一个办法,修改数据之前根据这条数据最后修改的时间先将这条数据查出来(select * from xxx where updatetime = xxx and id= xxx),如果查不到说明修改过,查到了说明没有修改.我想问问有没有更好的办法?","output":"我记得hibernate中乐观锁用的是版本号字段实现的，每次更新成功后时候版本号字段的值加1在更新前，先检查数据库中的版本号和页面中保存的版本号是否相同，如果版本号变大，提示用户在编辑期间已有其他用户修改了数据。当然也可以用悲观锁，进入页面的时候使用的select ... for update锁定记录，这时候其他用户就不能同时编辑锁定的记录了。"},{"instruction":"关于NumPy数组操作的问题```[\'000001_2017-03-17.csv\', \'000001_2017-03-20.csv\', \'000002_2017-03-21.csv\', \'000002_2017-03-22.csv\', \'000003_2017-03-23.csv\', \'000004_2017-03-24.csv\']```numpy数组，总共有几个万个元素。现在想保留每个元素前面的编号000001之类的，并且去掉重复，只保留唯一的一个编号。结果应该是`[\'000001\',\'000002\',\'000003\',\'000004\']`除了用for语句实现外，有没有更高效的办法？","output":"写个NumPy的吧~python3```>>> import numpy as np>>> a = np.array([\'000001_2017-03-17.csv\', \'000001_2017-03-20.csv\', \'000002_2017-03-21.csv\', \'000002_2017-03-22.csv\', \'000003_2017-03-23.csv\', \'000004_2017-03-24.csv\'])>>> b = np.unique(np.fromiter(map(lambda x:x.split(\'_\')[0],a),\'|S6\'))>>> barray([b\'000001\', b\'000002\', b\'000003\', b\'000004\'],       dtype=\'|S6\')```还可以这样写：`np.frompyfunc``\'|S6\'`是以6个字节存储字符串`\'<U6\'`是以6个`小端序Unicode字符`存储字符串```>>> b = np.array(np.unique(np.frompyfunc(lambda x:x[:6],1,1)(a)),dtype=\'<U6\')>>> barray([\'000001\', \'000002\', \'000003\', \'000004\'],       dtype=\'<U6\')```"},{"instruction":"webpack rebuild 速度太慢工程的开发环境使用`express`+`webpack-dev-middleware`+`webpack-hot-middleware`，热加载+网页的错误提示开发起来很爽。之前webpack每次启动的build速度都比较慢，后来参照这篇文章做了优化：开发工具心得：如何 10 倍提高你的 Webpack 构建效率加上dll plugin和happypack等之后，构建速度一下子由120s缩短到30s以内，随着工程越来越大（12万业务代码），rebuild速度越来越慢，现在一次rebuild速度大概得12s左右，实在是不能忍受。哪位有这方面优化经验的，还请不吝赐教。","output":"There are quite a few conditions that can contribute to slowness. From personal experience, I have found that the best way about trying to solve it, is to Measure, Profile, and Diagnose the issue first. When you run webpack, instead run it with node and the following flags: `node --inspect --debug-brk ./node_modules/webpack/bin/webpack.js`Then open up Chrome Browser and goto `chrome://inspect` and click \'Open Dedicated Node Debugger\'. This will give you debug, breakpoint, and profiling features that you can use to measure and analyze what functions and areas of webpack are taking the longest. Once you have found that out, you can start to determine exactly what is causing the issue. Here is a great post (although a little outdated for the instructions), that shows how these steps might look likeIf this doesn\'t help, then you can try other webpack build features like DllPlugin, using `devtool: \'eval-source-map\'`, look for specific loaders that have caching features, as well as our new cache-loader."},{"instruction":"golang的slice问题```s1 := []int{1, 2, 3, 4}s2 := []int{-1, -2, -3}fmt.Println(append(s1[:1], s2...))fmt.Println(s1)```打印的结果：```[1 -1 -2 -3][1 -1 -2 -3]```弄不明白的是：为什么s1的值也变了？","output":"因为append函数并不保障slice是否被修改，也就是说append可能会修改slice，也可能不修改，所以使用append有两个原则：append函数调用后，应该使用返回值作为结果。1. append函数调用后，不应该再使用实参传入的slice。2. 所以使用append函数一般都是`s = append(s,elem1)`这种用法，也就是把结果重新赋值给原来的slice。|append函数之所以有这个表现，是因为slice的底层存储依赖于底层数组（underlying array），用你的例子来给你说明一下：你的s1初始化的值是`[]int{1, 2, 3, 4}`，它的len和cap都是4，所以它的底层数组是一个长度为4的数组`[4]int{1,2,3,4}`。基于slice的特点，`s1[:1]`和s1是共享底层数组的，所以`s1[:1]`这个slice的改变是会影响到underlying array的。> If it has sufficient capacity, the destination is resliced to accommodate the new elements. If it does not, a new underlying array will be allocated.append函数在填充elem1,elem2的时候会先判断slice的cap是否能容纳所有追加的值，这个计算方式是从slice的尾部计算的，在你的例子里，slice的尾部是第一个元素，后面的容量恰好可以满足3个元素，所以它不会申请新的底层数组，而会直接使用原有的底层数组作为存储，这也就把原本的底层数组改成了[1 -1 -2 -3],由于s1的存储依赖于这个底层数组，自然也就变成了`[1 -1 -2 -3]`。如果把你的例子改成`append(s1[:1],1, s2...)`，或者改成`append(s1[1:2], s2...)`,你就会发现s1没有被改变，这是因为容量不能容纳所有追加元素，append会申请一个新的底层数组用来存储，也会返回一个新的slice，这不会影响到原本的底层数组，也就不会影响到原本的slice。所以使用`s = append(s,elem1)`是一个好习惯，尽量使用这个用法。"},{"instruction":"react-router中嵌套的子组件拿location对象的问题比如说一个页面有个modal组件，modal组件里面的内容写在子组件里面(ModalDetail),在这个组件里面拿不到this.props.location，求解答，除了从父组件传进去和通过window对象拿，还有什么方法","output":"react-router v4之前的版本，有一个叫做`withRouter`的高阶组件。你在定义自己的modal组件时包一层即可。v4版本暂时没有用过，有没有改动不清楚```import React from \'react\'import PropTypes from \'prop-types\'import { withRouter } from \'react-router\'// A simple component that shows the pathname of the current locationclass ShowTheLocation extends React.Component {  static propTypes = {    match: PropTypes.object.isRequired,    location: PropTypes.object.isRequired,    history: PropTypes.object.isRequired  }  render() {    const { match, location, history } = this.props    return (      <div>You are now at {location.pathname}</div>    )  }}// Create a new component that is \\"connected\\" (to borrow redux// terminology) to the router.export default withRouter(ShowTheLocation)```包一层withRouter之后，就可以访问到你想要的属性了，你还可以进一步学习，看看里面都有些什么。"},{"instruction":"dockerfile 与 docker-compose的区别是什么?docker-compose是编排镜像, 那么docker-compose是不是可以做Dockerfile的能做的事?","output":"我所理解的docker-compose是编排容器的。例如，你有一个php镜像，一个mysql镜像，一个nginx镜像。如果没有docker-compose，那么每次启动的时候，你需要敲各个容器的启动参数，环境变量，容器命名，指定不同容器的链接参数等等一系列的操作，相当繁琐。而用了docker-composer之后，你就可以把这些命令一次性写在docker-composer.yml文件中，以后每次启动这一整个环境（含3个容器）的时候，你只要敲一个docker-composer up命令就ok了。而dockerfile的作用是从无到有的构建镜像。两个完全不是一码事"},{"instruction":"php 的 opcache 和最近的 php jit 有什么区别？opcache 是用于缓存 zend 引擎编译生成的 opcode，下次就无需编译。  最近听说了 php jit,看了一下 jit 的概念，描述是这样的:JIT编译（just-in-time compilation），即即时编译，狭义指某段代码即将第一次被执行时进行编译，而后则不用编译直接执行，它为动态编译的一种特例。那 php 的 jit 和 opcache 有什么区别呢？","output":"`源代码(人认识)->字节码(解释器认识)->机器码(硬件认识)`来看下PHP的执行流程，假设有个a.php文件，不启用opacache的流程如下：`a.php->经过zend编译->opcode->PHP解释器->机器码`启用opacache的流程如下`a.php->查找opacache缓存，如果没有则进行zend编译为opcode并缓存->opacode->PHP解释器->机器码`启用jit的流程如下`a.php->编译->机器码`以后都只执行机器码，不编译，效率上高了很多"},{"instruction":"python redis 列表插入 速度太慢```pool = redis.ConnectionPool(host=host, port=port)client = redis.StrictRedis(connection_pool=pool)for i in range(10000):    for j in range(30):        client.lpush(IDLE_TASKS, json.dumps(args)) ```这种执行效率低的可怕。需要等几十秒，才能插入完成。请问有没更高效率的处理手法？args 只是以一个元组内容随意(1,2,\\"3\\")之类","output":"用 Redis 的 Pipeline ， 先在循环内生成数据，最后一次性插入```>>> p = r.pipeline()        --创建一个管道>>> p.set(\'hello\',\'redis\')>>> p.sadd(\'faz\',\'baz\')>>> p.incr(\'num\')>>> p.execute()        -- 执行管道内命令[True, 1, 1]>>> r.get(\'hello\')\'redis\'``````pool = redis.ConnectionPool(host=host, port=port)client = redis.StrictRedis(connection_pool=pool)p = client.pipeline()for i in range(10000):    for j in range(30):        p.lpush(IDLE_TASKS, json.dumps(args))p.execute()   ```使用管道，Redis 会将命令暂时存储，当遇到 `execute()` 时才会执行，所以上面代码只需要和 Redis 服务器通信一次即可将数据全部插入"},{"instruction":"如何向localStorage上的数组push数据我想做的一个功能是向localstorage上设置一个空数组，每次点击就push当前点击的数据到localstorage的数组中，但是localstorage不允许push，我试过深拷贝localstorage的数组出来再push到深拷贝的数组中，在设置localstorage的数组为深拷贝的数组，但是也没尝试出来，请大神支招","output":"localStorage只能存储String，要用Json对象转化下：```var arrayObject = [];arrayObject.push(\'a\',\'b\',\'c\');localStorage.setItem(\\"array\\",JSON.stringify(arrayObject));var arrayObjectLocal = JSON.parse(localStorage.getItem(\\"array\\"));arrayObjectLocal.push(\'d\',\'e\',\'f\');for (i = 0; i < arrayObjectLocal.length; i++) {     console.log(arrayObjectLocal[i]);}```"},{"instruction":"Vue v-for判断是否为第4列，然后加个横线或者第4行才显示这一个<li>```<ul id=\\"right-notice\\">    <li v-for=\\"site in sites\\">        <span class=\'time\'>{{site.ntime}}</span>        <a title=\'{{site.qtitle}}\'>{{site.ntitle}}</a>    </li>    //  思路一：<li 如果是第4行，在这里加一个什么显示属性？></li>    // 思路二，如果是第4行，在这里插入一个`<hr>`是否可行</ul>```初学vue,翻了好久，没有解决问题，特来求助。望前辈们指点","output":"```<ul id=\\"right-notice\\">    <li v-for=\\"(site, index) in sites\\">        <span class=\'time\'>{{site.ntime}}</span>        <a title=\'{{site.qtitle}}\'>{{site.ntitle}}</a>        <hr v-if=\\"!((index + 1) % 4)\\" />    </li></ul>```1. 其中，用`(site, index) in sites`代替`site in sites`，`index`为获取到的元素顺序。2. 这里用到了`v-if`。其中对于index值为3（第四项）,7（第八项），11（第十二项）... （4的倍数项），需要显示`hr`，对于这些值，`(index + 1) % 4`为0，所以`!((index + 1) % 4)`为`true`，显示`hr`。【这里`index`按顺序从0开始计数，所以`index + 1`为表示当前site在sites数组中是第几个，然后`(index + 1) % 4`，每满4，顺序数除以4余数都为0】添加class的方法：（假设class名叫`underline`）```<ul id=\\"right-notice\\">    <li v-for=\\"(site, index) in sites\\" :class=\\"{underline: !((index + 1) % 4)}\\">        <span class=\'time\'>{{site.ntime}}</span>        <a title=\'{{site.qtitle}}\'>{{site.ntitle}}</a>    </li></ul>```"},{"instruction":"vue-router登录成功后回到登录前页面是如何实现的？例如复制了一个链接https://segmentfault.com/ask/...到浏览器粘贴回车 会进入登录页面  登录成功后想再回到https://segmentfault.com/ask/...这个页面","output":"大概思路：1.当你想进入 `http://localhost:8080/user` (该页面需要登录授权)2.检查是否登录，如果没有登录跳转到登录页，需要将上一页的path(‘/user’)作为query存到login页地址中，如：`http://localhost:8080/login?redirect=%2Fuser````if (!isLogin()) {   this.router.push({    path: \'/login\',    query: {redirect: \'your path\'} // 如果你使用钩子函数，your path 可以替换成to.fullPath  })}```3.登录成功后，获取query中的redirect属性，然后跳转到这个地址```this.router.push(this.route.query.redirect || \'/\')```这是一种方式，你也可以用其他方式存储上一页的地址"},{"instruction":"js中向下取整在js中，以前向下取整都是使用Math.floor方法，现在有看到这样的用法：或运算 interval = interval | 0为什么这样就可以向下取整了，这种用法和Math.floor比较，有什么好处？","output":"注意，`|` 不是逻辑或，而是按位或 （OR）。一些小区别。比如 `Math.floor(NaN)` 还是返回 `NaN`。但 `NaN | 0` 返回 0。再比如 `Math.floor(Infinity)` 返回 `Infinity`，但 `Infinity | 0` 返回 0"},{"instruction":"vue2.0如何设置全局变量比如资源服务器的host，后台api的host，微信第三方的host。这些host不能挨个去代码里面写吧。其实，我就是想知道vue如何设置全局变量。总感觉放到window，localstorage，sessionstorage不太正规。","output":"webpack 有global关键字比如在一个a.js文件中定义全局变量：```global.COURSES = \'xxxxx\'```在入口的main.js```import \'./a\'```就可以，别的js不需要import也能用到COURSES"},{"instruction":"为什么Github要把代码合并请求称为pull request而不是push request？https://stackoverflow.com/que...我看了这里面的解释，感觉还是不够有说服力啊我的理解是：我做了一些修改，我请求把我的修改push到你的仓库，然后你review一下我的代码，如果没问题就接受请求merge，这样的话叫做push request岂不是更合适？因为这个操作是我主动发起的。pull是仓库主向我fork的仓库发起的操作，那么pull request这种操作应该是要上游仓库主来向我发起啊，而不是我主动让上游仓库主来pull我仓库中的代码。","output":"是这样的，这个应该分开来解释。这个pull指的是权限主体的操作。你提交了代码，但是你没有操作上游repo的权限，你需要上游repo的主人review你的代码，然后把你的代码修改pull到他的repo中去，这是对于pull的解释。而request则指的是发起主体的操作。也就是说，上游repo的主人虽然有repo的控制权，可以把你的代码更改pull到他自己的repo里，但是他不会主动去pull。而是需要你（发起主体）向上游repo的主人提交申请，也就是request，上游repo的主人才会去响应你的request，也就是执行你所说的review和pull的过程。所以，pull request的理解方法是：一个通知上游repo所有者拉取代码(pull)的请求(request)。在英语中，request一般指的是提交一个申请，需要对方对申请给予答复的。而request之前的修饰词，则是答复方的动作，当然，中文中也是一样。比如“入团申请”，你提交申请之后，需要对方允许你入团你才算是团员。所以，入团的动作不是你主动做的，而是由审核的人把你的名字加上去才算“入团”。同理“pull request”中，request是你提交的，而pull则是对方做的事情。"},{"instruction":"vuejs页面加载完成后执行函数module.exports = {```data: function(){    return {        memberQrcodeState: false    }},components: {memberQrcode},created: function(){},beforeRouteEnter: function(to, from, next) {    // 在渲染该组件的对应路由被 confirm 前调用    // 不！能！获取组件实例 `this`    // 因为当钩子执行前，组件实例还没被创建    //e.target.src= require(\\"../imgs/test/232.jpg\\")    next();    return true;},methods: {    },beforeRouteLeave: function(to, from, next) {    // 导航离开该组件的对应路由时调用    // 可以访问组件实例 `this`    next();}```};在这基础上加一个页面加载完成后执行的函数！我是小白，第二天接触vuejs，希望大神指点一二","output":"```mounted(){    this.init()},methods:{    init(){        console.log(\'hello,world\')    }}```谨供参考~"},{"instruction":"怎么把自己fork别人的仓库中的代码更新至最新版本？我在Github上fork了别人一个项目，然后修改之后按照正常流程提交PR，并且对方merged了。我现在又需要对该项目进行贡献代码，但是发现对方的项目仓库也有别人更新了新代码上去，我怎么让我自己仓库中fork的这个项目代码也同步到和对方仓库一样的最新版本代码，然后我再进行贡献？","output":"首先 把别人的仓库添加到你的上游远程，通常命名为 upstream。操作一次就可以了。```git remote add upstream  原作者仓库地址```此时再用 `git remote -v` 就可以看到一个origin是你的，另外一个upstream是原作者的。其次 更新代码使用`git fetch upstream` 拉去原作者的仓库更新。使用`git checkout master` 切换到自己的`master`使用 `git merge upstream/master`, merge或者rebase到你的master"},{"instruction":"JSON.parse(JSON.stringify(data))问下JSON.parse(JSON.stringify(data))是什么情况下要用","output":"一般用来深拷贝一个json对象吧，还可以用来去除值不具有JSON 表示形式（数字、字符串、逻辑值、数组、对象、null）的属性，也就是说像undefined和function这样的属性值。```a: {    age: 1,    name: undefined,    time: () => {...}}变成：b: {    age: 1}```"},{"instruction":"用户余额和收入支出mysql表设计和实现方案因为第一次做相关业务，所以经验不足，想来取点经。1.用户余额表除了用户id和余额还应该有哪些字段？2.收入表和支出表是分开好还是合并？3.比如注册送100优惠券这种场景。注册成功后给余额字段加100，给明细表添加一条记录，这2个步骤放在一个事务中，还是明细表用消息队列处理等其他解决方案。","output":"1.用户ID，余额，开始时间（创建时间），最后交易（收入，支出）改变时间，收入总额，支出总额（看情况决定是否冗余，冗余为了避免每次统计都要查库）2.收入表和支出表看情况。如果收入来源和支出方式都有多种，适合分开，比如说收入（1.打赏，2充值，3转账），支出（1购买业务，2充值会员， 3转赠）等等3.放在一起直接事务也可，消息队列也行，只要涉及金钱，打好日志即可。因为送钱和明细表操作都不是耗时间操作。4.金钱计算，尽量避开浮点数，如1元应该存成100分"},{"instruction":"如何把数组对象相同的key值合并，并且把对应的id放到一个数组例如旧数据：var old = [```{    id: 1,    name: \'css\',    type: \'html\'},{    id: 2,    name: \'css\',    type: \'html\'}, {    id: 3,    name: \'javacript\',    type: \'code\'},{    id: 4,    name: \'javacript\',    type: \'code\'}```]想得到的 var new = [```{    id: [1,2],    name: \'css\',    type: \'html\'}, {    id: [3,4],    name: \'javacript\',    type: \'code\'},```]希望把相同name的对象合并，并且把对应的id放到一个数组","output":"```var hash = {};var i = 0;var res = [];old.forEach(function(item) {    var name = item.name;    hash[name] ? res[hash[name] - 1].id.push(item.id) : hash[name] = ++i && res.push({        id: [item.id],        name: name,        type: item.type    })});console.log(JSON.stringify(res))```"},{"instruction":"github怎么提交回退旧版本代码并更改后的文件到主分支上可能说的不是很明白，就是我代码写着写着，发现我已经不想这么弄了，用`git reset --hard <版本号>`退回到之前的某个版本重新写，这样当我当我写完之后，想在提交到远程仓库，它就会报错```To https://github.com/zifenggao/wenda.git ! [rejected]        master -> master (non-fast-forward)error: failed to push some refs to \'https://github.com/zifenggao/wenda.git\'hint: Updates were rejected because the tip of your current branch is behindhint: its remote counterpart. Integrate the remote changes (e.g.hint: \'git pull ...\') before pushing again.hint: See the \'Note about fast-forwards\' in \'git push --help\' for details.```说我版本是之前的版本，要我合并后再提交，那我应该怎么弄，能了几遍都没搞懂。","output":"首先，根据你的描述，既然你用到了 `git reset --hard`，那就可以推断出你已经 `add` 和 `commit` 过了。其次，根据报错，可以推断出你已经 `push` 过了（这个推断基于只有你一个人拥有 master branch 的更改权限。那么当你执行 `git reset --hard` 之后，历史纪录是不能跟远程的记录直接合并的。因此才会有这个报错。举个例子，远程是 `A -> B -> C -> D`，你 `git reset --hard` 之后是 `A -> B`。这时候除非远程那边抹掉 `C` 和 `D`，否则是不能合并的。因此，这时候，你应该使用 `git push origin master --force` 来强行覆盖远程记录。请不要根据提示使用 `git pull`。否则，你的本地又会变成 `A -> B -> C -> D`。因为 `git pull` 相当于 `git fetch` + `git merge`（以下内容基于上面的例子，远程是 `A -> B -> C -> D`，你想回滚到 B 那个状态）另外对于 `git revert`。其实，`git reset --hard` 和 `git revert` 都可以实现“回滚代码”。但区别在于：`git revert` 会把你的本地变成 `A -> B -> C -> D -> E`。其中，`E` 干的事儿是删除 `C` 和 `D`。这样做的好处在于，你 `git push origin master` 就不会有上面的报错了。但，历史线上还是会保留 `C` 和 `D` 这两个 commit。如果使用这个命令，记得要 `add` 然后 `commit`。`git reset --hard` 会直接删掉 `C` 和 `D`，形成 `A -> B` 这样的结果。好处在于更直接更彻底。缺点在于，首先要通过 `git push origin master --force` 去强行更改。其次，一旦你后悔了，除非根据本地的 `reflog` 直接恢复 HEAD 指针，此外没有其他办法。用哪个都是没错的，请根据自己的需要来选择。"},{"instruction":"输入一段不减的整数，如11111223333，怎么快速计算重复次数最多的那个数输入一段不减整数，如：11111223333输出出现次数最多的那个数字，如：本例中1的出现次数最多，输出1输入的数字具有以下规律1.数字为正整数，不一定从1开始2.如果增长，则increment = 13.整数的总量不会超过1W，但是事先无法知道总共会输入多少整数","output":"这题不用对所有数字计数，那样很慢。如果增长，则increment = 1把数字当作字符串来处理，只要找出所有增长的点的位置就可以了，然后把相邻的点的位置相减，即可得到长度。因为不一定是从1开始，所有可能的增长的点为：\\"12\\"，\\"23\\"，\\"34\\"，。。。\\"78\\"，\\"89\\"例如：将11111223333转为字符串，查找增长点结果：12-位置4，23-位置6增长点补正（加1）：12-位置5，23-位置7初始位置补0，末尾补字符串长度len,得到[0,5,7,11]取相邻两点之差[5,2,4]所以，出现次数最多的是第一个元素，5次除此之外，还有不需要遍历的算法：由于increment = 1，所以看开头和结尾2个数，即可算出出现数字有几种（如11111223333，开头为1，结尾为3，则出现的数为1到3，共3种）那么，考虑出现N种数的情况N=1就不用说了，等于白送答案。先从简单的N=2说起吧，因为有些细节在N=2的情况说了，后面N>2的情况类似的细节就省略了。2分采样若len为奇数，取len/2处的数，这个数就是出现次数最多的数。若len为偶数，len/2处是间隙，所以取该间隙前后2个数，这2个数相同的话，答案就是这个数，如果不同的话，答案是这两个数出现次数一样，并列最多。N分采样，取0、len/N、2len/N、...、（N-1）len/N、len处的（N+1）个点，（由于间隙的情况太复杂，这里省略，请参考N=2的处理方法）然后统计这（N+1）个点里面，出现次数最多的数，把出现次数最多的数叫做M1，出现第二多的叫做M2，依次类推若 （M1的次数 - M2次数） 大于等于2，则答案为M1若 （M1的次数 - M2次数） 小于2，那么2N分采样(若2N>len,则len分采样)，取len/2N、3len/2N、5len/2N、。。。。、处的N个点，与前面N分法时候取的（N+1）个点组合，重新求M1，M2，。。。。若 （M1的次数 - M2次数） 大于等于2，则答案为M1若 （M1的次数 - M2次数） 小于2，则4N分采样(若4N>len,则len分采样)。。。。依次类推，8N，16N。。。。直至找到 （M1的次数 - M2次数） 大于等于2为止。其中若变为len分采样，结束条件不需要（M1的次数 - M2次数）大于等于2，M1就是答案。# 小结这个算法大部分时候是比较快的，最差的情况是N个数的各个次数都相差很小，或者都相同，那就会进入最后的len分采样，等于遍历，那还不如一开始就直接遍历比较快。但是数据的分布越是不均匀，这个算法就越快。# 杂谈写完这个算法之后，我觉得有似曾相识的感觉，大家了解通信原理的有没有一样的感觉？  如果把这段不减整数映射到频域，那么这就是递增阶梯的方波，问题就是确定其最长一段方波，如果这个方波太长，数据量太大，我们可以对其特征点采样来压缩数据，根据奈奎斯特采样定理（或者叫香农采样定理）：当采样频率fs.max大于信号中最高频率fmax的2倍时(fs.max>2fmax)，采样之后的数字信号完整地保留了原始信号中的信息。上文的2N分采样与此正好相似，是不是很有趣～"},{"instruction":"assets 和static的区别使用 vue-cli 搭建的项目中有 assets 和 static 文件夹，一直不懂两者的区别，看到网上的说法太模糊，希望有位大神可以举例说明两者的区别。","output":"请参考 vue-cli 的 webpack 模板的文档 - Handing Static Assets，作者知道会有人有这个疑惑，所以作了详情的解释：You will notice in the project structure we have two directories for static assets: `src/assets` and `static/`. What is the difference between them?简单翻译一下。## Webpacked Assets为了回答这个问题，我们首先需要了解Webpack如何处理静态资产。在 `*.vue` 组件中，所有模板和CSS都会被 `vue-html-loader` 及 `css-loader` 解析，并查找资源URL。例如，在 `<img src=\\"./logo.png\\">` 和 `background: url(./logo.png)` 中，`\\"./logo.png\\"` 是相对的资源路径，将由Webpack解析为模块依赖。因为 `logo.png` 不是 JavaScript，当被视为模块依赖时，需要使用 `url-loader` 和 `file-loader` 处理它。vue-cli 的 webpack 脚手架已经配置了这些 loader，因此可以使用相对/模块路径。由于这些资源可能在构建过程中被内联/复制/重命名，所以它们基本上是源代码的一部分。这就是为什么建议将 Webpack 处理的静态资源放在 `/src` 目录中和其它源文件放一起的原因。事实上，甚至不必把它们全部放在 `/src/assets`：可以用`模块/组件`的组织方式来使用它们。例如，可以在每个放置组件的目录中存放静态资源。## \\"Real\\" Static Assets相比之下，`static/` 目录下的文件并不会被 Webpack 处理：它们会直接被复制到最终目录（默认是`dist/static`）下。必须使用绝对路径引用这些文件，这是通过在 `config.js` 文件中的 `build.assetsPublicPath` 和 `build.assetsSubDirectory` 连接来确定的。任何放在 `static/` 中文件需要以绝对路径的形式引用：`/static/[filename]`。如果更改 `assetSubDirectory` 的值为 `assets`，那么路径需改为 `/assets/[filename]`。"},{"instruction":"请问如何在html中输出字符串中的换行符我在后台获取了一段字符串输出到前台的<p>标签中，但是字符串中有换行符\'n\'，我想同样输出换行的效果。请问应该如何处理这段字符串呢？我把\'n\'替换成了<br/>还是不行，原样输出了。谢谢大家","output":"有两中方式，一是设置  `white-space: pre;`，空白会被浏览器保留。或者使用```<pre>    我是换行字    符串</pre>```，pre 元素可定义预格式化的文本。被包围在 pre 元素中的文本通常会保留空格和换行符。"},{"instruction":"python 如何将字符串转换成列表如何将字符串如`a = \\"我是中国人\\"`，转换成列表`li =[\\"我\\",\\"是\\",\\"中\\",\\"国\\",\\"人\\"]````a = \\"我是一个中国人\\"li = list(a)print li```输出却是```[\'xe6\', \'x88\', \'x91\', \'xe6\', \'x98\', \'xaf\', \'xe4\', \'xb8\', \'x80\', \'xe4\', \'xb8\', \'xaa\', \'xe4\', \'xb8\', \'xad\', \'xe5\', \'x9b\', \'xbd\', \'xe4\', \'xba\', \'xba\']```我用JavaScript很简单的就实现了```var a = \\"我是中国人\\"li = a.split(\\"\\")console.log(li) // >>>[\\"我\\",\\"是\\",\\"中\\",\\"国\\",\\"人\\"]```不知道python应该如何实现？","output":"可以先将字符串解编码成`unicode`, 再用`list````# 第一种:>>> a = u\\"我是中国人\\">>> s = list(a)>>> print s[u\'u6211\', u\'u662f\', u\'u4e2d\', u\'u56fd\', u\'u4eba\']>>> print s[1]是# 第二种>>> a = \\"我是中国人\\">>> s = a.decode(\'utf8\')>>> s = list(a.decode(\'utf8\'))>>> s[u\'u6211\', u\'u662f\', u\'u4e2d\', u\'u56fd\', u\'u4eba\']>>> print s[1]是```"},{"instruction":"为什么说promise不能取消是一个缺点什么场景下我需要取消一个promise？我不理解的地方：http是无状态的，那取消是不是意味着新的请求？还是说取消仅是本地取消，不处理之前请求的结果？","output":"Promise 的设计就是一个状态机，pending 到 resolve / reject 的状态变换是单向且唯一的，没有所谓的 cancel 状态。cancel 的加入会带来更多的状态问题，并不适合 Promise 这一模式来处理（这类场景下，RxJS 这类 FRP 的方案应该更为适合）。cancel 会带来什么状态问题呢？拿电商的退款来举例子。你买了一个东西（开始一个 pending 的 promise），然后东西还没收到（还没 resolve），你后悔了，点击了退款（把状态改为 cancel），但这时退款流程也不能立刻生效，需要审核（cancel 后不能立刻 reject），那这时候你发工资了，又不想退款了，又点了【取消退款】，这时候又是一个异步的状态更改（把 cancel 再 cancel 掉），而【取消退款】也是异步的，你还能取消【取消退款】的操作（把 cancel 在 cancel 掉前再 cancel 掉？）别忘了，这时候每一步状态变化还都可以对应到 resolve 和 reject 呢。好的同学们，接下来请画出流程的状态变化图，并编码实现这个支持 cancel 的 promise?这是一道送命题啊。"},{"instruction":"api 使用session替代token 的利弊在哪？补充：几种常用的验证机制 最近写app的api，使用laravel 框架的session替代了传统的存贮到数据库的token作为校验登录用户的方法！以下是我们目前的做法登录后后台生产session，会往返回信息head头里写一个set_cookieios和安卓 会从head头里得到拿到这个cookie的东西然后再请求需要登录的地方的时候，ios和安卓会把cookie放到head头里，让框架完成自我的校验ps:有人说不安全有人说不好管理有人说性能问题有谁具体研究过，请帮我分析分析其利弊我个人认为的观点：说session不安全的，感觉有点牵强，假如真的一点不安全的话，那网站也就完全被暴露了，而且laravel的session也是有自己加密的方式，不是直接暴露的！有人说不好管理，放在redis里了，我不太知道不好管理在哪里。性能问题，session可以存贮的位置有很多，mysql，文件，redis，我觉得性能也不是问题。我也不知其弊端在哪里，有谁具体研究过，请帮我分析分析其利弊也请大家有想法的各抒己见，我们一起讨论下","output":"在存储过等同的情况下，在只是简单运用上，我只能说session与token没有本质的区别，二者不都是一串被加密过的字符串，拿他来做校验都一样。以上，是因为你把token拿来当作用户是不是当事人做这么一个简单的校验的情况下。当然，如果我们抛开一些比较极端的操作，token比session也有很大的区别：- token可以存在任何位置（cookie、local storage）- token比session更容易跨域。- CORS预检查时token比较更简单。- token有更多的控制权，比如当token过期时，你可以拿通过刷新token，让用户一直保持有效登录。token可以存在任何位置（cookie、local storage）token比session更容易跨域。CORS预检查时token比较更简单。token有更多的控制权，比如当token过期时，你可以拿通过刷新token，让用户一直保持有效登录。等……其实如果你只是单纯拿着token做一下自己网站内用户登录检验的话是无太多区别的。但假如token指的是OAuth Token提供认证和授权这类机制的话，那么就可以把session甩开N条街了，甚至是已经完全是两种不同的概念。假设有这么一个场景，你们用户在你们网站产生的订单，而另一家公司是专业ERP公司；而你的用户希望他的订单同时授权给这家ERP公司使用的情况下，难道你希望用户拿在你家网站的用户名和密码给这家ERP公司吗？这时候OAuth Token就有意义了，OAuth Token的授权大概是这样的：- ERP需要调用我们提供的登录界面。- 用户输入用户名和密码后，我们再向ERP发送一个TOKEN。- ERP拿TOKEN换数据。ERP需要调用我们提供的登录界面。用户输入用户名和密码后，我们再向ERP发送一个TOKEN。ERP拿TOKEN换数据。总之，如果你只是在自己网站内部上使用二者没有什么太多区别。而如果你的API是在不同终端上使用，token会更方便。"},{"instruction":"正则表达式如何匹配重复出现的字符串比如说`aaabccc11fdsa`这个字符串，我要把aaa，ccc和11这种会重复两次以上的字符串匹配出来，该怎么办？如果正则表达式做不到的话，有其他什么PHP，Python内置函数可以做到吗？内置函数也没有的话只能手写算法了吗？","output":"JS代码：```var s = \'aaabccc11fdsa\';var re = /(.)1+/g;console.log(s.match(re));```其中，正则表达式中`.`表示任意字符，`1`表示第一个被匹配到的分组，`+`表示匹配前一个字符一次或一次以上。"},{"instruction":"vuex 中的 store 和 store  的区别```<router-link to=\\"/login\\">{{ store.state.userName }}</router-link><router-link to=\\"/login\\">{{ store.state.userName }}</router-link><router-link to=\\"/login\\">{{ this.store.state.userName }}</router-link><router-link to=\\"/login\\">{{ this.store.state.userName }}</router-link>```一直搞不清楚 vuex 中 `store` 和 `store` 的区别，也不知道什么时候前面应该加`this`,求大神告知。—— thanks in advance","output":"`store` 是挂载在 Vue 实例上的（即Vue.prototype），而组件也其实是一个Vue实例，在组件中可使用 `this` 访问原型上的属性，template 拥有组件实例的上下文，可直接通过 `{{ store.state.userName }}` 访问，等价于 script 中的 `this.store.state.userName`。至于 `{{ store.state.userName }}`，script 中的 `data` 需声明过 `store` 才可访问。"},{"instruction":"你能帮我写一段《舒马赫》的内容简介吗，风格参考其他豆瓣纪录片的介绍。","output":"一部关于传奇F1车神迈克尔·舒马赫的纪录片《舒马赫》将推出。该片已在后期制作中，据称获得了舒马赫家人的全力支持，将有此前从未曝光的视频和资料、与其家人的采访、亲近的赛车伙伴和对手的采访等。德国导演Michael Wech(《Resistance Fighters》)和Hanns-Bruno Kammertöns执导，Rocket Science公司执行制片和做国际发行，DCM做德语区发行，将在#戛纳电影节#卖片。如今，距离舒马赫拿到第一个世界冠军已25年，他被认为是F1成就最卓著的车手之一，唯一一个拿到7次F1世界冠军的人，跟红色的法拉利合作让许多车迷印象深刻。2012年退役后，舒马赫在2013年滑雪受伤，脑补受到损害，一度昏迷不醒，苏醒后到如今仍在接受治疗。"},{"instruction":"帮我写出关于《安然：房间里最聪明的人》的内容简介，主要包括该片的主要背景及内容等等，不要过多剧透，目的是能吸引读者的观看兴趣。","output":"记录华尔街有史以来最大的商业丑闻，揭露一群绝顶聪明的高阶经理人，如何将美国第七大企业搞挂，轻轻松松卷走十亿美金，让投资人血本无归，上万员工失去工作。 本片根据安隆事件畅销书The Smartest Guys in the Room摄制，运用访谈画面、录音、企业内部数据制作而成，甚至揭露布什家族可能涉案的内幕。安隆案影响甚巨，不仅使全球五大会计师事务所之一的安达信(Arthur Andersen LLP)被美国证期会吊销执照，也让国际知名的麦肯锡顾问公司重伤五内，更让所有商学院洗心革面，在高喊利润至上之外，重新向MBA学生传授「伦理与道德」。 全球各大企业也把「公司治理」捧上天，希望能够赢回投资人的信任。但安隆风暴尚未结案，高潮将可能再度袭卷华尔街…"},{"instruction":"帮我写出关于《1950他们正年轻》的内容简介，主要包括该片的主要背景及内容等等，不要过多剧透，目的是能吸引读者的观看兴趣。","output":"2014年，首批437具中国志愿军烈士遗骸归国，离开祖国60多年的烈士英灵终于得以回家。71年前，那些花一样年轻的战士走上了抗美援朝战场，有些人回来了，而有些人永远地留在了那片土地上。《1950他们正年轻》用全新的视角聚焦71年前参加抗美援朝的普通年轻人，通过不同军种，不同时期参战的老兵真人讲述，以一句句平实细微的话语呈现出他们曾经热血的青春与梦想，也还原了最真实的战场，给当代的年轻人带来触动内心的震撼与共鸣。最好的铭记是不遗忘，《1950他们正年轻》用镜头记录珍贵的民族记忆，一起致敬那些保家卫国的英雄们。"},{"instruction":"帮我写出关于《霍华德叔叔》的内容简介，主要包括该片的主要背景及内容等等，不要过多剧透，目的是能吸引读者的观看兴趣。","output":"Director Howard Brookner died of AIDS in NYC in 1989 while in post-production on his breakthrough Hollywood movie. His body of work has been buried for 30 years in William Burroughs\' bunker until his nephew Aaron unearths his uncle\'s story and the memory of everything he was."},{"instruction":"帮我写出关于《我们诞生在中国》的内容简介，主要包括该片的主要背景及内容等等，不要过多剧透，目的是能吸引读者的观看兴趣。","output":"广袤的中华大地，数不胜数的美丽生灵与人类共生，谱写一曲曲壮美的生命之歌。生活在高原地带的雪豹达娃不久前刚刚成为两个小家伙的妈妈，为了抚养孩子长大，她不仅要一次次出击捕猎，还要面对来自强劲对手的挑战。四川某处的茂密竹林中，大熊猫丫丫正和女儿美美快乐玩耍，美美对世界充满好奇，渴望尽早挣脱妈妈的束缚去拥抱未知的世界。神农架的原始丛林里，小金丝猴淘淘倍感落寞，因为新出生的妹妹夺走了本该属于他的关爱，于是淘淘离开家人，成为了流浪猴中的一员，却必须面对种种残酷的现实。可可西里的荒原上，母藏羚羊和丈夫们告别，成群结队赶往某个圣地，迎接新生命的到来。而另一边，仙鹤在长空中翱翔，带走一个又一个结束了生命之旅的灵魂，展开下一段充满未知的轮回……"},{"instruction":"你能帮我写一段《赝品》的内容简介吗，风格参考其他豆瓣纪录片的介绍。","output":"厌倦了逃亡生涯的匈牙利赝品画家艾米尔•德霍瑞（Elmyr de Hory）于1969年回到西班牙伊维萨岛，成为岛上名人，并结识了美国作家克利福德•艾尔文（Clifford Irving）。导演奥逊•威尔斯在介绍艾米尔•德霍瑞的同时穿插讲述了曾轰动一时的克利福德•艾尔文造假美国飞行业大亨霍华德•休斯自传案，随后又杜撰了女友欧嘉•蔻达（Oja Kodar）与毕加索之间的一段奇事。真假穿插中，奥逊•威尔斯提出了“艺术是什么”与作品归属权的问题。本片是美国导演奥逊•威尔斯的最后一部完整的电影作品，大部分镜头素材来自由艾尔文•克利福德编剧，法国导演弗朗索瓦•莱兴巴赫（Francois Reichenbach）导演的关于匈牙利赝品画家艾米尔•德霍瑞的BBC纪录片。"},{"instruction":"帮我写出关于《洞穴里的医院》的内容简介，主要包括该片的主要背景及内容等等，不要过多剧透，目的是能吸引读者的观看兴趣。","output":"故事发生在叙利亚，为了逃避空袭和化学武器的攻击，一些勇敢的医务人员被迫创建了地下医院，以保护病人的生命和医疗设施的安全。其中，大马士革成为了化学武器袭击的重灾区。在这里，一群医务人员建立了一个名为\\"洞穴\\"的地下避难所。阿玛尼博士和她的同事艾拉博士、护士沙马赫以及其他18位勇敢的妇女被选为医院的领导团队，负责管理和运营这个地下医院。总共有80名员工为此工作。每天，他们都面临着生死考验，他们努力拯救城镇上的人们，并采取措施加强医院的隔离，以防止进一步的攻击。这些医务人员面临着巨大的危险和压力，但他们坚定不移地履行着救死扶伤的使命。他们的奉献精神和团结合作令人钦佩，为了保护和拯救生命，他们甘冒生命危险。"},{"instruction":"请为以下纪录片写一段简短且吸引人的故事概述，包括影片的主要背景及内容，要清晰、干脆，能够很好地说明电影的情节，但是不要透露过多内容。《国家地理：解密紫禁城》","output":"以中央电视台斥资千万的12集大型纪录片《故宫》为蓝本，在中央电视台与美国国家地理频道众多资深制作人的共同努力下，《解密紫禁城》终于面世。今天，美国国家地理频道正在播出此片，该英文摘要即选自2007年4月23日的网站。作为《故宫》的精编版本，《解密紫禁城》以独特的文化视角，全新的叙事方式以及行云流水般的讲述，系统阐释了紫禁城从举世瞩目的帝王宫殿到国家博物馆的演变过程，全面揭秘了高耸的宫墙背后鲜为人知的故事以及价值连城的收藏，科学剖析了中国古代历史和文化的更迭进程。特别是好莱坞著名美籍华人演员陈冲的解说，更是画龙点睛。可以说，《解密紫禁城》不但是一部精华版的故宫编年史，而且更是一部众望所归的视听杰作!"},{"instruction":"请为《拼字王》这部纪录片写一段简短且吸引人的故事概述，包括影片的主要背景及内容，要清晰、干脆，能够很好地说明电影的情节，但是不要透露过多内容。","output":"一名印度裔美国选手连续 12 年赢得著名的斯克里普斯全国拼字比赛冠军，这是体育史上保持最久的记录。《拼字王》讲述了四名印度裔美国学生在追求赢得标志性锦标赛冠军这一梦想道路中的起起落落。这部电影从 CNN 的桑吉·古普塔博士和法里德·扎卡里亚、喜剧演员哈里·科达博卢、ESPN 的凯文·内甘迪、1999 年斯克里普斯全国拼字比赛冠军、努普尔·拉拉等人的精彩视角，探索了这一令人难以置信的胜利背后的原因，以及给社会带来的影响。萨姆·雷加担任导演和制片人。由克里斯·韦勒制作。"},{"instruction":"请为以下纪录片写一段简短且吸引人的故事概述，包括影片的主要背景及内容，要清晰、干脆，能够很好地说明电影的情节，但是不要透露过多内容。《BBC死前要吃的50种东西》","output":"本部记录片列举了你被上帝召唤前，一定要去享受的五十种天下美味，要不真的就妄走了人世一遭。影片用倒叙的方式从第五十位开始向你介绍这些美食：馅饼、鱼子酱、哈吉斯肠、挺举鸡/猪肉、tapas、烤牛肉、排骨、章鱼、水果梿、芒果、澳洲肉类饼、扇、kebab、驯鹿、barramundi、糕、寿司、鲨鱼、几内亚猪、鹿肉、鲑鱼、美国早餐、鱿鱼、墨西哥食物、汉堡、希腊食物、三明治、巧克力、袋鼠、牡蛎、鳄鱼、霜茶、羔羊、海派、蚌、面食、煎饼、烤肉、蚬浓汤、摩湾昆虫、虾、咖喱、螃蟹、比萨饼、冰淇淋、中国菜、泰国食品、牛排、龙虾和排名第一位的鲜鱼。小至冰淇淋甜品，大至中国菜整个菜系，包罗万象，五花八门。这五十种世界美味里，你品尝过多少？这是死前要吃的50种东西，BBC说。"},{"instruction":"写一段关于《大卫林奇短片集》的内容简介，要求能把整部片子的内容和背景交代出来，并且内容简洁，能够吸引观众兴趣。","output":"本部短片集由六部前卫奇异的短片组成，穿插导演大卫·林奇独树一帜的解说，自由游走在现实与超现实的世界里。《六个患病的人》由六个恐怖的素描头像患病开始，他们呕吐、流血，腐烂的器官跟苍白的呕吐物，反反复复的重复着。《字母表》里一个睡着的小女孩，被阴森恐怖的字母歌吓醒，“ABC，ABC，ABC……”，如同一场噩梦。《祖母》讲述一个小男孩为了摆脱残暴父母的控制，开始在楼上的卧室里种植奇怪的种子。随着这棵树的枝繁叶茂，血腥丑陋的树根下，一位和善的老奶奶被种了出来。可当他的父母发现时，悲剧开始了。《被截肢者》讲述一个双腿残缺的年轻姑娘，给她的情人写信的故事。《牛仔与法国人》是发生在三个牛仔与一位迷路的法国人之间的故事。他们虽然语言不通，但是友善使他们彼此熟识，彻夜狂欢。《卢米埃尔》则是像法国导演卢米埃尔致敬的终结之作。"},{"instruction":"请为《尘与雪》这部纪录片写一段简短且吸引人的故事概述，包括影片的主要背景及内容，要清晰、干脆，能够很好地说明电影的情节，但是不要透露过多内容。","output":"《尘与雪》是一部美得足以令人窒息的纪录片，它是一部活动的摄影集，每一帧单独抽出来都可以成为令人驻足观赏并流连忘返的摄影精品。影片始动于1999年，加拿大籍摄影师格利高里·考伯特（Gregory Colbert）的作品受到许多收藏家的青睐。在此之后，他的足迹更延伸到埃塞俄比亚、纳米比亚、汤加等国家。在那里，人与大象、鲸鱼、花豹、老鹰、、山猫等野生动物毫不违和地出现在同一画面中。他们彼此依靠，和谐共存，言语在绝美的画面前失去了用途，每次呼吸都成就了灵魂对生命的膜拜。羽变火，火变血，血变骨，骨变髓，髓变尘，尘变雪。生命周而复始，生生不息。这是一次对自然的无上赞颂。"},{"instruction":"帮我写出关于《16天》的内容简介，主要包括该片的主要背景及内容等等，不要过多剧透，目的是能吸引读者的观看兴趣。","output":"本部质朴真诚的音乐纪录片《16天》，记录了陈绮贞以及她的团队制作“华丽的冒险”这张专辑背后鲜为人知的16个日日夜夜的故事。继“Sentimental Kills”、“旅行的意义”与“after 17”这三张单曲之后，台湾创作型民女谣歌手陈绮贞，推出独立制作完成的个人专辑“华丽的冒险”。脱离唱片公司的庇荫，仅有极为有限的资源，陈绮贞选择了一般流行唱片较少采用的乐团现场录音方式，并搭造了一座充满人性的录音空间。这间看似简陋但却清幽宁静的乡间小屋，见证着这样一群为音乐痴迷、拥有着共同梦想的年轻人们的16个日夜。"},{"instruction":"写一段关于《超越极限》的内容简介，要求能把整部片子的内容和背景交代出来，并且内容简洁，能够吸引观众兴趣。","output":"一位优秀的俄罗斯艺术体操运动员Margarita Mamun正拼力冲击奥运冠军。这是她运动生涯中最重要的一年，也是她达成最终目标的最后机会——拿到奥运会金牌。影片塑造了一位年轻女性动人心魄的形象，她要努力在达成自己的志向的同时满足俄罗斯官方训练体制的期望。这部影片揭开了体操运动员精英生活神秘面纱，也独到地刻画了年轻女运动员与她两名教练之间的三角关系。《超越极限》是一部关于成功背后的残酷的贴近人心的影片。"},{"instruction":"我是一个为豆瓣电影页面写内容简介的工作人员，你能帮我写一段《约翰·列侬的理想世界》的内容简介吗？像豆瓣上其他纪录片那样","output":"本部描写摇滚史上最伟大音乐家之一约翰·温斯顿·列侬的纪录片《约翰列侬的理想世界》，以超过240小时的电影及录影片段，及穿插其中的36首经典名曲，讲述着这位摇滚乐坛有史以来最富传奇色彩的灵魂人物。影片收录了多段未被公开的私人视频片段，扑捉记录下列侬这位在音乐世界中狂放不羁才华横溢的天才，在生活中的多重侧面。这些精彩珍贵的视频镜头在36首传唱度极高的经典歌曲中，道出了列侬这位乐坛巨匠背后鲜为人知的故事。"},{"instruction":"帮我写出关于《东京偶像》的内容简介，主要包括该片的主要背景及内容等等，不要过多剧透，目的是能吸引读者的观看兴趣。","output":"以女子团体及流行音乐为主要载体的“偶像文化”现下正渗透着日本社会的方方面面。《东京偶像》以纪录片的形式，深入这一文化现象的核心，探讨偶像文化潮流对于社会的冲击。 影片通过一位真正的“东京偶像”来展现她的成名之路。她的“哥哥们”是一群在网络上与现实生活中以追随少女偶像为毕生事业的中年男性。他们放弃了自己的工作，曾被认为是社会的边缘人物，但他们全身心地投入偶像文化，伴随着偶像文化的膨胀发展，如今已成为网络世界的主流。本片导演三宅响子透过少女偶像带有挑逗意味的装扮，来揭示性别力量在日本流行音乐工业制度中的角色。"},{"instruction":"请为以下纪录片写一段简短且吸引人的故事概述，包括影片的主要背景及内容，要清晰、干脆，能够很好地说明电影的情节，但是不要透露过多内容。《互联网之子》","output":"本片《互联网之子》讲的是编程天才和信息活动家 亚伦·斯沃茨 的故事。从参与基础互联网协议RSS到联合创办Reddit，斯沃茨的足迹遍及整个互联网。但斯沃茨在社会公正和政治组织方面的开创性工作，以及对信息存取的雄心壮志，使他陷入了一场两年之久的法律噩梦。                                                                        亚伦的故事也触动了对他如雷贯耳的网络社区之外的人们。"},{"instruction":"请为《持摄影机的人》这部纪录片写一段简短且吸引人的故事概述，包括影片的主要背景及内容，要清晰、干脆，能够很好地说明电影的情节，但是不要透露过多内容。","output":"本片是苏联纪录片导演，“电影眼”理论的创始人吉加•维尔托夫（Dziga Vertov）的代表作。电影主要拍摄于乌克兰的敖德萨市，摄像师是维尔托夫的哥哥米凯尔•卡夫曼（Mikhail Kaufman）。影片主要分观众入席、城市黎明、人民的工作与休息、体育运动和艺术实践几部分，通过刻画人民生活的方方面面来呈现苏维埃新社会中的一个理想城市。摄影师米凯尔•卡夫曼在拍摄的同时也出现在电影画面中，首创了“自我暴露”的电影形式。在这部具有里程碑性突破意义的纪录片中，维尔托夫首次使用了二次曝光、快进、慢动作、画面定格、跳跃剪辑、画面分割等前卫剪辑手法，并采用了仰角、特写、推拉镜头等新颖的拍摄手法，并制作了一段定格动画。"},{"instruction":"你能帮我写一段《两个小时的世界历史》的内容简介吗，风格参考其他豆瓣纪录片的介绍。","output":"在两个小时里，浓缩呈现从宇宙大爆炸到现在的上百亿年历史。A rapid-fire history of our world, from the beginning of time as we know it to present day. This two-hour CGI-driven special delves into the key turning points: the formation of earth, emergence of life, spread of man and the growth of civilization--and reveals their surprising connections to our world today."},{"instruction":"请为以下纪录片写一段简短且吸引人的故事概述，包括影片的主要背景及内容，要清晰、干脆，能够很好地说明电影的情节，但是不要透露过多内容。《山地自行车之旅》","output":"由加拿大山地自行车摄影师Derek Frankowski和电影人Ryan Gibb联手执导拍摄的纪录片《山地自行车之旅》，讲述着关于山地自行车及其文化的精彩故事，将为您奉上一部令人叹为观止的视觉饕餮盛宴。Derek Frankowski与Ryan Gibb耗时三年时间，行走在壮阔的山间原野，利用春夏秋冬的XC路线越野骑行、稻田里BMX骑行、公路之旅等极为震撼的视觉之旅，展现着在自然环境中骑行与众不同的强大吸引力。本片使用4K超高画质摄像机进行拍摄，记录了山地车从创建到消逝的全过程，用充满张力的镜头捕捉着山地自行车独特魅力。众多世界顶级自行车运动选手也参与了本片的拍摄。"},{"instruction":"我是一个为豆瓣电影页面写内容简介的工作人员，你能帮我写一段《无尽之夏》的内容简介吗？像豆瓣上其他纪录片那样","output":"这是一部关于冲浪的体育记录片。两个来自加州的年轻人，罗伯特·奥古斯特（Robert August）和迈克·汉森（Mike Hynson），为了找到他们心目中完美的海浪，进行了一次环球旅行。足迹遍布夏威夷、西非，直至澳大利亚。一些真正的冲浪选手也参与了该片的拍摄工作。影片充满了60年代中期的气息。人们不仅可以看到那时冲浪选手们的装束，还可以了解到第三世界的住宅和燃料问题。虽然三十年后的今天，这些早已过时，但导演布鲁斯·布朗（Bruce Brown）独特的叙事手法使得该片仍然不失为一部佳作。随着两个年轻人旅程的不断深入，我们尽情地领略了大自然的美妙，同时，各种不同文化之间的碰撞与冲突也展现眼前。也许这才是导演真正想要传达的意图吧。"},{"instruction":"我是一个为豆瓣电影页面写内容简介的工作人员，你能帮我写一段《医疗内幕》的内容简介吗？像豆瓣上其他纪录片那样。","output":"一向作风犀利的美国纪录片导演迈克•摩尔（Michael Moore 饰）此次将矛头对准美国引以为豪的医疗保险体制，他采访了因无医保饱受伤病折磨的美国民众，揭露了美国医疗保健行业的黑幕，对美国负责药品审批的食品和药物管理局、负责监督医疗保健行业的国会议员进行了毫不留情的批评。通过大量个案以及和其他资本主义国家甚至社会主义国家的对比，向观者展示了所谓完善的美国医疗保健行业当前存在的种种弊端。本片荣获美国电影电视剪接师协会最佳纪录片剪辑奖、2008北美广播影评人协会奖最佳纪录片奖、2007芝加哥电影评论协会奖最佳纪录片奖、2007拉斯韦加斯电影评论组织奖最佳纪录片奖、2008纽约电影评论圈奖最佳纪录片奖等，并与导演之前两部作品《克伦拜恩的保龄》、《华氏911》并称为“高调三部曲”。"},{"instruction":"我是一个为豆瓣电影页面写内容简介的工作人员，你能帮我写一段《金钱无用：深入美联储》的内容简介吗？像豆瓣上其他纪录片那样","output":"美联储成立近 100 年后，其权力从未如此强大。  世界各地的市场和政府都屏住呼吸，期待美联储主席的每一句话。  然而，普通人对地球上最强大——也是最不了解的——金融机构知之甚少。  由 Liev Schreiber 讲述，Money For Nothing 是第一部将观众带入美联储并揭示美联储政策（过去、现在和未来）对我们生活的影响的电影。  加入现任和前任美联储官员的行列，与批评者以及彼此辩论，讨论导致全球金融体系在 2008 年濒临崩溃的决定。以及为什么我们可能会再次走向崩溃。"},{"instruction":"帮我写出关于《哈利·波特系列的50个精彩瞬间》的内容简介，主要包括该片的主要背景及内容等等，不要过多剧透，目的是能吸引读者的观看兴趣。","output":"2011年的夏天，《哈利·波特与死亡圣器（下）》在全球上演，这盛大的历史时刻同时宣布了长达10年的哈利·波特电影系列的终结。从此一个时代一去不复返，留在人们心间的确实久久无法忘怀的复杂回忆。在终结篇上映两周后，英国ITV电视台推出了纪录片《哈利·波特经典50幕》，遴选了该系列（前7部电影）50个最为精彩、令人难忘的场景，其中包括飞行汽车、列车上的摄魂怪、猫头鹰送信、三兄弟传说、波特的初吻等镜头，更有J·K·罗琳、丹尼尔·雷德克里夫、艾玛·沃森、鲁伯特·格林特、詹森·艾萨克等小说和电影的主创人员讲述影片拍摄背后的故事。这便是哈利·波特——那个陪伴许多孩子一起长大的男孩——送给影迷最后的礼物。"},{"instruction":"帮我写出关于《意志的胜利》的内容简介，主要包括该片的主要背景及内容等等，不要过多剧透，目的是能吸引读者的观看兴趣。如果该片曾获任何殊荣，也请简要介绍。","output":"1934年，德国著名女导演莱尼•里芬斯塔尔（Leni Riefenstahl）受邀拍摄了《意志的胜利》。影片由纳粹构思，第三帝国出资赞助，记录了纳粹巅峰时期的会议、集会和游行盛况。为配合拍摄，帝国提供无限制的经费，一百多人的摄制组，无数的聚光灯，十六名一流摄影师、三十台 摄影机、二十二辆配备司机的汽车和身着制服的机动警官，这庞大且豪华的摄制队伍加上里芬斯塔尔天才的创造力和美学理念，为影史奉上了一部最为完美也最受争议的杰作。《意志的胜利》被称为“最具权威性的宣传电影”，它荣获1935年威尼斯电影节和巴黎电影节最佳纪录片奖。"},{"instruction":"请为《麦昆》这部纪录片写一段简短且吸引人的故事概述，包括影片的主要背景及内容，要清晰、干脆，能够很好地说明电影的情节，但是不要透露过多内容。","output":"黑暗，骷髅，浪漫，天马行空，这是人们想到英国著名时装设计师亚历山大·麦昆时，脑海中瞬时浮现的词汇。这位曾享誉全球，同时也争议缠身的时尚坏小子，于 2010 年在母亲葬礼前夜自缢身亡，年仅 40 岁，留给世人无尽猜想和怀缅。在他身故 8 年后，备受瞩目的个人纪录片今春亮相纽约翠贝卡电影节，以特殊的录像带形式，划分开 Lee(麦昆原名，亲友对他的爱称)短暂一生的不同节点，让人窥见一代奇才丰富曲折的内心。从伦敦东区普通的工人家庭到巴黎、伦敦等地的顶级秀场，反叛惊艳的才华令他一时风头无量，成为重塑流行文化观念的时代旗手。而在光环和盛名之下，抑郁症的长期压迫与亲故相继离世，也让他在世界最热闹拥挤的中心，体味着过山车俯冲般高速坠落的孤独。"},{"instruction":"你能帮我写一段《最后的狮子》的内容简介吗，风格参考其他豆瓣纪录片的介绍。","output":"非洲大草原上，千百年来始终上演不变的残酷舞蹈。由于人类的捕猎与开发土地，狮子数量锐减，生存空间始终在缩小，母狮马蒂陶一家的领地便受到迁徙狮群的挑战。在争夺领地的过程中，马蒂陶失去了她的公狮，不得不带着三只小狮子一路逃开寻找新的领地。横跨河流的过程中，一只小狮子丧生，马蒂陶和剩下两个孩子成功渡河到了一片名为“杜巴”的小岛。修整生息之后，岛上又迎来同样被迫迁徙的野牛群，马蒂陶慢慢掌握猎杀野牛的技巧，也持续躲避其他狮群的追击，还要面对鬣狗的争食。“单身妈妈”马蒂陶和她的幼崽是否是地球上最后的狮子的缩影呢？曾经的百兽之王如今生存得这样艰难。"},{"instruction":"你能帮我写一段《老唐头》的内容简介吗，风格参考其他豆瓣纪录片的介绍。","output":"老唐头，1930年出生在黑龙江省，父亲唐士荣在伪满洲国期间，曾经搭救过东北抗日联军赵尚志的性命，因此在屯子里很有威望。老唐头家里兄弟五个，按家谱上说的“仁、义、礼、智、信”的长幼顺序，他行五，本名唐希信。他有着惊人的记忆力。脑袋里装着近八十年过目不忘的故事。导演用一个冬天拍摄老唐头井喷式叙述着的自己的传奇一生。这是部鲜活的小人物传记，它把正在进行的生活和老唐头的回忆交织在一起，时间跨度近八十年。它描述了中国社会里的小人物在宏大的历史变迁中既传奇又卑微的个人命运，同时也是上个世纪中国历史的折射。"},{"instruction":"帮我写出关于《家园》的内容简介，主要包括该片的主要背景及内容等等，不要过多剧透，目的是能吸引读者的观看兴趣。","output":"经过四十亿年的漫长演变，地球变成一个物种繁多、资源丰富、奇特美丽的蓝色星球。然而自人类出现以来，我们只用了二十万年的时间，便将地球的宝贵资源消耗殆尽。珍稀物种灭绝，原始资源奇缺，污染日益严重，人类以及地球的明天将何去何从？导演扬恩•亚瑟经过15年的筹备，历访50多个国家拍成此片。本片素材长达488小时，拍摄周期为21个月，共动用88,000名员工，从澳洲海底的大堡礁到非洲肯亚高原的乞力马扎罗山；从亚玛逊热带雨林到戈壁沙漠；从美国德萨斯州连绵不断的棉花田到中国上海、深圳的工业城镇。影片以上帝的俯瞰视角向世人展现地球的绝美以及日趋危急的现状。明天并不遥远，但我们该选择怎样的未来？"},{"instruction":"帮我写出关于《地球之盐》的内容简介，主要包括该片的主要背景及内容等等，不要过多剧透，目的是能吸引读者的观看兴趣。如果该片曾获任何殊荣，也请简要介绍。","output":"他的镜头是打开的心眼，在最细微处直视灵魂，看到巴西巨坑五万掏金者的集体面相，看到科威特油井冲天大火的真正英雄，看到非洲的死亡延续着生存。每次的拍摄方案都是经年的万里长征，是人神共舞，每次成果都引起巨大回响。合导的儿子伴着老爸远征，只见他用海象的视角，拍出但丁的地狱。再来到地球重病的现在，他重建了一座森林。云温达斯最心仪的传奇摄影师萨尔加多，就是大地之盐。获康城影展某种观点评审团特别奖，入围角逐奥斯卡最佳纪录片。"},{"instruction":"帮我写出关于《乐园影像》的内容简介，主要包括该片的主要背景及内容等等，不要过多剧透，目的是能吸引读者的观看兴趣。","output":"In the early fifties Ingmar Bergman got himself a cine-camera, a 9.5 mm Bell & Howell, which he often used both privately and in his work. \\"Bilder från lekstugan\\" (\\"Images from the Playground\\") embark on these films, giving a diverse representation of one of the greatest artists in cinema."},{"instruction":"请为以下纪录片写一段简短且吸引人的故事概述，包括影片的主要背景及内容，要清晰、干脆，能够很好地说明电影的情节，但是不要透露过多内容。《嘻哈帝国：金钱，权力，尊重》","output":"Jay-Z、50 Cent、吹牛老爹、Dr.Dre，这四位背景不同、理念各异的嘻哈歌手，从单纯探索嘻哈的文化形式，到逐步组建团队、建立属于自己的商业帝国——为大品牌代言、与大厂牌合作、开辟个人的商业品牌，并凭借这些金钱带来的商业影响力，挑起了自己的社会担当。金钱带来权力，而权力越大，责任也越大……4位嘻哈巨星，4种命运，谁会成为美国嘻哈界的第一位亿万富翁？讲述嘻哈巨星成长史，解密嘻哈帝国财富经。@DOCO热纪录"},{"instruction":"请为以下纪录片写一段简短且吸引人的故事概述，包括影片的主要背景及内容，要清晰、干脆，能够很好地说明电影的情节，但是不要透露过多内容，影评所获殊荣也需要一并介绍。《逃亡》","output":"阿富汗裔的Amin，已在丹麦落地生根，即将与同性伴侣成婚。面对伸手可及的幸福，内心却有难解的结，童年时的苦难记忆，长大后仍挥之不去。小时候迷恋尚格云顿，但生逢乱世，家乡平静生活被战火摧毁，他随家人逃到莫斯科，再千辛万苦偷渡到哥本哈根。以动画形式纪录真人真事，导演让好友Amin倾吐隐衷，回忆颠沛流离的日子，以及遇过的贪腐警察、冷血蛇头。最后逃避不了的，是一直压在心头的秘密。圣丹斯电影节世界纪录片评审团大奖。"},{"instruction":"我是一个为豆瓣电影页面写内容简介的工作人员，你能帮我写一段《女巫》的内容简介吗？像豆瓣上其他纪录片那样","output":"一部有关宗教巫术的准记录片，世界前50名纪录片第39位。简介：《女巫们》也叫《历代的巫术》，可以看作是一部有关宗教巫术的准记录片。1919 到1921间丹麦导演创作了这部瑞典与丹麦合拍的超越时代杰作，并在该片中扮演魔鬼一角。这部影片构思新奇、造型技巧高超、画面结构严谨，运用富于表现力的特写镜头和动作感强的蒙太奇均很恰当。但是由于宗教原因，这部电影当时被瑞典和其他欧洲国家列为禁片，直到1929年，经过严格删剪的版本才在美国出现。导演也因为当时Hollywood的纳贤口号而移居美国，但也并未得志，郁郁而终。这部作品的意义不仅在于题材的敏感和手法的前卫，在视觉成就方面，本片无疑更是电影史上的翘楚之一。"},{"instruction":"写一段关于《奥萨姆·本·拉登在哪里？》的内容简介，要求能把整部片子的内容、背景和所获殊荣等交代出来，并且内容简洁，能够吸引观众兴趣。","output":"摩根•斯普尔（Morgan Spurlock），一个平凡的美国导演，却绝对可以算是这个国家里最疯狂的家伙之一。在他的孩子即将出世之际，摩根却离开温馨的小家，拉着一队人马来到了远在千里之外的中东，其目标竟然是要找到连FBI和CIA都不知踪迹的奥萨姆•本•拉登！为了让孩子生活在一个安全自由的世界里，他的足迹遍布埃及、摩洛哥、巴勒斯坦、以色列、沙特、伊拉克，与各式各样的人们攀谈询问。对美国人来说谈虎色变如恶魔般的本•拉登，在很多阿拉伯人的眼里却是常人一个。在寻找的过程中，摩根似乎也渐渐触及到东西方文化分歧和隔阂的所在……本片荣获2008年墨尔本国际电影节最受欢迎纪录片奖。"},{"instruction":"我是一个为豆瓣电影页面写内容简介的工作人员，你能帮我写一段《了不起的巴斯特》的内容简介吗？像豆瓣上其他纪录片那样","output":"提到默片年代的喜剧泰斗，很多人记得差利，其实冷面笑匠巴士达基顿同属殿堂级高手，对后来者一样影响深远。奥逊威尔斯直言钟爱《将军号火车》 （1926）。《七个机会》（1925）被一大群新娘狂追不舍，还有连环闪避巨石的画面，至今仍令人叹为观止。以《最后一场电影》（1971）名留影史的波丹诺维奇，回顾基顿一生起落，从他小时候跟父母表演杂耍说起，再细数其辉煌岁月十部经典杰作，重温那些历久不衰的惊险搞笑绝技。"},{"instruction":"你能帮我写一段《地球》的内容简介吗，风格参考其他豆瓣纪录片的介绍。","output":"电视系列片\\"行星地球\\"(2006)的电影版本，拍摄了几个动物家庭的迁徙路线。一部由英国BBC和德国联合制作的关于地球、大自然的纪录片，用了将近3年的时间，通过对地球生命的神秘实录，通过表现大自然美丽景象与野生动物纯粹的生死之搏的真实纪录，再配合柏林爱乐乐团的美妙配乐，将地球的魅力在大银幕上毫无保留的完美呈现出来，旨在呼吁人们保护环境。由阿拉斯泰尔·福斯基尔（Alastair Forthergill）和他的团队穿越7大洲、62个国家、用45部摄像机耗费5年时间精心制作的纪录片，向我们展现了全球变暖时代动物的迁徙和生活的改变，大自然的宏伟壮观、生命的脆弱和坚强、变迁的无常。整部影片的场面和音乐从头至尾都让我们深深震撼……2007年10月法国上映。"},{"instruction":"请为《阿曼达·诺克斯》这部纪录片写一段简短且吸引人的故事概述，包括影片的主要背景及内容，要清晰、干脆，能够很好地说明电影的情节，但是不要透露过多内容。如果该片曾获任何殊荣，也请简要介绍。","output":"到底她是冷血谋杀室友的变态狂，还是不幸捲入无尽梦魇的清纯留学生？Netflix 原创纪录片《阿曼达·诺克斯》探索一桩恶名昭彰、名列世界各地头条新闻的凶杀桉，导演为罗德·布雷赫斯特 (Rod Blackhurst)（作品《独自》(Here Alone) 荣获翠贝卡电影节观众大奖）和布莱恩·麦金 (Brian McGinn)（作品《主厨的餐桌》(Chef’s Table) 荣获 IDA 奖），製作人为米特·海德 (Mette Heide)（作品《印度的女儿》(India’s Daughter) 荣获皮博迪奖）。"},{"instruction":"写一段关于《我的转世》的内容简介，要求能把整部片子的内容和背景交代出来，并且内容简洁，能够吸引观众兴趣。","output":"Tibetan Buddhist Master Choogyal Namkhai Norbu watches as his western-born son, Yeshi, who was recognized at birth as the reincarnation of a famous spiritual master, considers departing from tradition to embrace the modern world."},{"instruction":"我是一个为豆瓣电影页面写内容简介的工作人员，你能帮我写一段《海洋星球》的内容简介吗？像豆瓣上其他纪录片那样","output":"澳大利亚的鲨鱼湾，有机体创造了空气和大气层，是美丽的蓝色星球具备了生物生存的基本条件。大约40亿年前，迄今仍存在于鲨鱼湾的活化石细菌叠层石，作为地球生命的祖先横空出世。经过漫长的繁衍与进化，数以万计的物种从海洋走到陆地，飞上蓝天。我们跟随着摄制组的镜头，见证了原始生命的诞生，以及大自然对物种爆发的自控与调节。然而时至今日，多达70亿的人类统领地球，站在生物链金字塔的最顶端。我们贪得无厌地一次次伸出双手向大地、海洋索取，埋藏千百万年的矿藏被无情掘出，原本自由自在游弋海中的鱼类遭到过度捕捞。生活质量不断提高，地球的生存环境却逐步恶化，该说这是聪明还是愚昧……"},{"instruction":"写一段关于《10%英雄是怎样炼成的》的内容简介，要求能把整部片子的内容和背景交代出来，并且内容简洁，能够吸引观众兴趣。","output":"谁才是真正的“英雄”？是什么让人坚守道义，勇于挺身而出为正义而战？这部引人入胜的纪录片讲述了极少部分无论环境如何，总是能站在正义一边的人的故事。从旧金山到纽约，再到刚果、斯洛文尼亚、南非，最后回到以色列和巴勒斯坦，本片通过形形色色的人物和情景探索了英雄主义这一理念，有趣且富有洞察力。从普通英雄到自由斗士，灵长类到人类，行为科学家到遗传学家，甚至艾茵·兰德到雷尔利安，导演不遗余力，一路揭开了人性的本质真理。"},{"instruction":"写一段关于《在越南最后的日子》的内容简介，要求能把整部片子的内容和背景交代出来，并且内容简洁，能够吸引观众兴趣。","output":"上映。故事讲述了越南战争的最后几天，北越军队节节胜利南越军队则面临崩溃，美国方面的只能面对这样的道德困境——到底是服从白宫的命令只带美国公民撤离，还是冒着被指控叛国罪的风险尽可能多的保留南越盟友的故事。在越南战争的最后几天，北越军队节节胜利南越军队则面临崩溃，共产主义的胜利不可避免，美国方面的外交和军事人员接到指示准备撤退，然而他们也意识到，当他们离开后曾帮助并投靠他们的南越盟友将面临生命的威胁。此时他们只能面对这样的道德困境——到底是服从白宫的命令只带美国公民撤离，还是冒着被指控叛国罪的风险尽可能多的保留南越盟友。"},{"instruction":"请为以下纪录片写一段简短且吸引人的故事概述，包括影片的主要背景及内容，要清晰、干脆，能够很好地说明电影的情节，但是不要透露过多内容，影评所获殊荣也需要一并介绍。《山村犹有读书声》","output":"法国奥弗涅地区的中心平原，山村的生活恬淡宁静，时间在这里仿佛变得缓慢而悠长。在这个小村庄里，有一座似乎穿越了时空、如古时私塾般的学校。一个老师，一个班级，几名不同年龄的孩子。乔治（Georges Lopez），村中唯一的老师，20年中送走一批批学生。这所学校如同与世隔绝一般，静静走过春夏秋冬，乔治和孩子们读书、学习、玩耍，用平淡的言语带他们认知眼前的繁华世界……本片荣获2003年凯撒电影节最佳剪辑奖、2002年欧洲电影节最佳纪录片奖、2003年法国电影评论协会奖影评人奖、2004年美国影评人协会奖最佳纪录片奖、2002年路易德吕克奖。"},{"instruction":"帮我写出关于《哈维·米尔克的时代》的内容简介，主要包括该片的主要背景及内容等等，不要过多剧透，目的是能吸引读者的观看兴趣。","output":"一部关于曾被美国时代杂志选为20世纪代表人物之一的同性恋政治家Harvey Milk的记录片。Harvey Milk是首个以公开同性恋者身份者角逐成功为美国旧金山市重要官员，生前致力争取同性恋者的公民权益。他被暗杀前，很有希望当选为卡斯特罗(旧金山最著名的同性恋街区)的市长。70年代间，当他推动通过旧金山市首个同性恋者的公民权益条例之际，Harvey Milk与他的政冶盟友George Moscone于1978年11月28日被保守派前旧金山市前警察官Dan White刺杀而死，事件唤醒了当地同性恋者，使他们对争取自身权益作出了强烈的反省和回应。1985年奥斯卡最佳长记录片"},{"instruction":"帮我写出关于《地球公民》的内容简介，主要包括该片的主要背景及内容等等，不要过多剧透，目的是能吸引读者的观看兴趣。如果该片曾获任何殊荣，也请简要介绍。","output":"“我们优雅的享用我们的正餐，血腥的屠宰场被精心的隐藏起来。”——爱默生。英语单词Earthling，意指地球上一切居民。它不只是针对人类而言，更包括生存在这个星球上的所有生命。然而愚蠢的人类自认为是最完全的生命体，这他们所处的世界拥有绝对的支配权。在这股极端的物种主义思想影响下，每天有成千上万的生命惨遭杀害。当人们享受通过折磨、残害其他生命所带来的快乐之时，地球变成了令人不忍卒睹的血腥地狱……本片荣获2005年圣地亚哥电影节最佳纪录片、2005年波士顿国际电影节独立制片电影最佳内容奖、2005年艺术行动者电影节最佳纪录片奖。"},{"instruction":"帮我写出关于《兰茨贝吉斯先生》的内容简介，主要包括该片的主要背景及内容等等，不要过多剧透，目的是能吸引读者的观看兴趣。如果该片曾获任何殊荣，也请简要介绍。","output":"谢尔盖·洛兹尼察是一位东欧历史的出色记录人。他的记录既涵盖了最近的事件，如《中央广场》（2014）中的乌克兰叛乱，也涵盖了更早的事件，如《国家葬礼》（2019）中的斯大林葬礼。他在展现过去时总是保持警觉，巧妙地运用档案素材，使观众仿佛成为现场目击者。在这部讲述1989年到1991年间，波罗的海国家立陶宛脱离苏联的影片中也是如此。这一以大量歌唱进行和平抗议的时期被称为\\"歌唱革命\\"。作为独立运动的发起人之一，现年88岁的维陶塔斯·兰茨贝吉斯当时处于历史剧变的中心。借助大量关于示威活动、党代会和苏联军事干预的档案素材，他富于洞察力的思考得到补足。冗长的档案片段见证了在通往自由的道路上，兰茨贝里斯和他的同胞们所需要付出的耐心。这是一堂关于苏联解体的细致而引人入胜的历史课。本片获IDFA竞赛单元最佳影片奖、最佳剪辑奖。"},{"instruction":"你能帮我写一段《白钻石》的内容简介吗，风格参考其他豆瓣纪录片的介绍。","output":"德国导演沃纳•赫尔措格（Werner Herzog）即使不是唯一，但也可以列入世界上最富冒险精神导演行列了。他的影片往往充满了刺激和挑战，或在热带雨林和另一个疯子克劳斯•金斯基打造陆上行舟的奇景，或与各种危险动物近距离接触，为此付出生命也在所不惜。2004年的《白钻石》中，赫尔措格引领观众简要回顾飞机和氢气球的发展史。接着便带出本片另一个主角——研究氢气球的格雷姆•多灵顿博士（Graham Dorrington 饰），一个14岁时被火箭炸掉两根手指、同样富有冒险精神的男人。他们将乘坐多灵顿发明的氢气飞船圭亚那内陆的顶端丛林，以人类的柔弱之躯向自然发出挑战与膜拜……"},{"instruction":"请为以下纪录片写一段简短且吸引人的故事概述，包括影片的主要背景及内容，要清晰、干脆，能够很好地说明电影的情节，但是不要透露过多内容。《火山挚恋》","output":"卡蒂娅与莫里斯·克拉夫特有两大深爱——彼此和火山。二十年里，这对勇敢的法国火山学家夫妇游历全球，追随一次次火山爆发，记录自己的发现。最终，他们在1991年的一次火山爆发中失去了生命，留下的宝贵资料使我们对自然世界的理解更为充实。导演萨拉·多萨及制片团队从克拉夫特夫妇令人叹为观止的档案影像中提取素材，诗意地歌颂了这对无畏科学家的探险精神。影片跟随两位勇敢探险家的脚步，在热爱的驱动下深入未知之境，讲述了一个超越生命、关于创造与毁灭故事。"},{"instruction":"你能帮我写一段《待业青年》的内容简介吗，风格参考其他豆瓣纪录片的介绍。","output":"大学生小吉（吉硕 饰）有着不安份的内心，面临毕业的他做出一个惊人决定——退学。因为他厌倦了学校的种种不合常理的现象。在几年的大学生涯里，他对周围的人和事甚至对自己的人生都产生了怀疑，人究竟为什么活着？这个问题始终困扰着他。他感觉每个人都生活在一个早就被制定的牢笼里，人人都缺乏独立的人格和尊严，生活的轨迹是社会和父母早就规划好的，那么我们来到这个世界上到底是为什么。思虑良久，他决定要用一年时间探讨下一步的人生之路。他拿起了DV，走向浩淼的大千社会，去观察记录周围人们的生活状态，重新思考青春的含义......"},{"instruction":"请为以下纪录片写一段简短且吸引人的故事概述，包括影片的主要背景及内容，要清晰、干脆，能够很好地说明电影的情节，但是不要透露过多内容，影评所获殊荣也需要一并介绍。《三个忧郁的房间》","output":"岁月无声，天地不仁，战地小孩见的只是一张苦脸。芬兰电影悍将韩嘉莎露深入连记者也禁足的车俄战场，瞄准了俄罗斯孤岛军校、车臣首府破房子、战地临时孤儿院，三地小孩背负战争的仇与恨，灵魂体都受伤了。军校十岁小诗人的理想其实不是杀敌，而是做普希金；曾遭俄兵在车臣强暴、十二岁的阿斯朗不认自己是俄罗斯人。时而凌厉的黑白影像，时而挽歌般的长镜头，在一片薄雾宠罩下，仿似人类探索看不见的未来，以为美丽却只找著丑恶。塔可夫斯基与安斯罗普洛斯的灵光乍现，威尼斯影展连夺三奖，全年最佳纪录片之一。"},{"instruction":"写一段关于《前进，神军！》的内容简介，要求能把整部片子的内容、背景和所获殊荣等交代出来，并且内容简洁，能够吸引观众兴趣。","output":"奥崎谦三，二战期间曾为日军独立工兵队第36连队的士兵随部队驻扎在巴布亚新几内亚。战后，奥崎并未回归平静安详的生活，而是展开了另一条常人无法理解的斗争之路。他曾因杀人入狱10年，还在新年朝拜天皇的仪式上用弹弓射击天皇，此后更以极其激烈和持久的方式追讨天皇在二战中的罪行。与此同时，奥崎的足迹遍布日本各地，只为追查一个真相：在战争结束的第23天，36连队有两名士兵遭到枪决，而这背后隐藏着残酷血腥且触目惊心的事实……本片荣获1988年蓝丝带奖最佳导演奖、1988年电影旬报最佳影片第2名（读者票选第1名）、日本电影导演协会新人奖。奥崎谦三于1997年出狱，2005年6月16日去世。"},{"instruction":"写一段关于《跨越桥梁》的内容简介，要求能把整部片子的内容和背景交代出来，并且内容简洁，能够吸引观众兴趣。","output":"德国导演费斯·阿金继《勇往直前》后拍摄的一部音乐纪录片，关于土耳其伊斯坦布尔的音乐、文化、日常生活、东西方文化交融。影片一方面展现了伊思坦布尔音乐文化，通过德国音乐人Alexander hacke在ISTANBUL街头访问，让当地音乐艺术工作者阐述他们对土耳其文化传承与使命，并且逐一介绍ISTANBUL的摇滚乐、黑人音乐、街头音乐、民族音乐文化——充斥着传统与流行，西方与东方，高雅与平民的文化冲击，引人入胜。另一方面，影片描述的手法更像是城市传记，记录在一个千万人大城市中音乐是如何生存在人们之间的其伊斯坦布尔的音乐、文化、日常生活、东西方文化交融。"},{"instruction":"请为《安娜成长篇》这部纪录片写一段简短且吸引人的故事概述，包括影片的主要背景及内容，要清晰、干脆，能够很好地说明电影的情节，但是不要透露过多内容。","output":"看过奥斯卡最佳外语片《烈日灼身》的观众，很难忘记片中小女孩的可爱演出，她就是影片导演尼基塔．米亥科夫的小女儿娜迪亚．米亥科夫。娜迪亚有一个酷似她的姐姐安娜，在1980年时只有六岁，当时其父已为国际知名导演，但在俄国拍摄私人的家庭电影仍属违法。尼基塔以拍电影时剩下的零碎底片偷偷拍了这部纪录片女儿成长的电影，前后历经十二年。片中并插入大量新闻片，政治宣传片和尼基塔被禁演的影片片段，经导演自己以诗意的旁白组织成一部风格新颖的纪录片，表达了一个俄国导演对家园与国家的看法与感怀。"},{"instruction":"我是一个为豆瓣电影页面写内容简介的工作人员，你能帮我写一段《妮莉和讷亭》的内容简介吗？像豆瓣上其他纪录片那样。","output":"还原纳粹集中营中唯一中国女同性恋的纪录片《妮莉和讷亭》，获得第72届柏林电影节最佳泰迪熊纪录片奖。该片主角黄讷亭是在上流社会长大的混血名媛，是中国最早的女飞行员和空军上校，也是能力出众的外交官、身手矫健的冰球运动员和风姿绰约的巴黎演员，还曾是女权作家的公开情妇。在法国沦陷后她被抓入集中营成为一名难民，妮莉是她在集中营认识的女友，爱情让两人在无间地狱中幸存下来，并且共度余生。《妮莉和讷亭》用前半生的波澜壮阔和后半生的苍凉平凡，拼凑出一段充满魅力的传奇故事。"},{"instruction":"请为《路德维希二世的梦幻城堡》这部纪录片写一段简短且吸引人的故事概述，包括影片的主要背景及内容，要清晰、干脆，能够很好地说明电影的情节，但是不要透露过多内容。","output":"新天鵝堡，一座童話般的城堡，座落於德國巴伐利亞山，夢幻的氣氛、天鵝圖畫，加上圍繞城堡四周的湖泊，宛如人間仙境，是德國的象徵之一，也是迪士尼睡公主城堡的原型。這座城堡是巴伐利亞國王路德維希二世傾盡畢生精力所建造，《童話城堡》將帶觀眾進入他的建築與藝術世界，了解這位「童話國王」浪漫淒美的一生。年輕國王路德維希二世自小對城堡著迷，受到華格納歌劇的啟發，他想再造中世紀騎士英雄的奇幻世界，不惜耗費鉅資，顧用十多名雕刻家和石匠，花了整整17年將這個夢想變為現實。可是，路德維希二世在部分完工的新天鵝堡只住了短短172天，他對城堡的癡迷引起了官員的反對，譴責他荒廢國事，並迫使他退位，最後更被發現離奇陳屍於湖中，未能親眼看到城堡完工。"},{"instruction":"你能帮我写一段《佛罗伦萨与乌菲兹美术馆3D》的内容简介吗，风格参考其他豆瓣纪录片的介绍。","output":"《佛罗伦萨和乌菲兹美术馆》远不止是一部关于经典艺术的纪录片，而是一段以多维度、多媒体视听盛宴的方式，通过剖析当时最美最具代表性的艺术作品，深度探寻意大利文艺复兴的旅程。在世界电影史上，我们首次迎来了一部关于真正的露天美术馆——佛罗伦萨的艺术电影。3D技术为我们带来了前所未有的身临其境的视觉体验：艺术作品通过三维视觉效果得到增强，那无与伦比的美感跃然而出。影片中激励人心、情感充沛的解说来自文艺复兴时期的一位领军人物，我们的导游主持人，伟大的洛伦佐，由西蒙·米瑞尔斯饰演。在永恒的无涯之境，伴随着精心挑选的壮丽的背景音乐，洛伦佐带领我们游览“他的”佛罗伦萨——文艺复兴时期文明的摇篮。"},{"instruction":"请为以下纪录片写一段简短且吸引人的故事概述，包括影片的主要背景及内容，要清晰、干脆，能够很好地说明电影的情节，但是不要透露过多内容。《俄国人生七年1》","output":"Inspired by Michael Apted\'s \\"Up\\" series from Great Britain, Born in the USSR: 7 Up explores the lives of 20 young people from throughout the former Soviet Union as they discuss moral values, cultural attitudes, national identity and religious faith.  Despite their differences, they all have one thing in common. They were born in a country that no longer exists."},{"instruction":"请为以下纪录片写一段简短且吸引人的故事概述，包括影片的主要背景及内容，要清晰、干脆，能够很好地说明电影的情节，但是不要透露过多内容。《华氏9/11》","output":"一部记述伊拉克战争前后美国情势的纪录片。美国因何成为恐怖分子的袭击目标？为何乐于卷入战争？乔治布什的政策与9•11事件的爆发有何联系？而他和本•拉登之间关系怎样演变至宿敌？片中用真实的历史场景，从某个侧面提供了一种解读方式。除了关注美国国内，镜头也对准了伊拉克战场。厌倦了战争的美国士兵、被耻笑的伊拉克俘虏、饱受战乱之苦的当地人民，人人都在这场战争遭受着不同的痛苦和煎熬。美军家中的善良母亲，准备去前线服役的热血青年，都对布什的政策、对伊拉克战争，开始沉重的思考。"},{"instruction":"请为以下纪录片写一段简短且吸引人的故事概述，包括影片的主要背景及内容，要清晰、干脆，能够很好地说明电影的情节，但是不要透露过多内容。《时代精神2》","output":"影片从金融业和货币规则的形成入手，揭露了其存在与运行的本质，指出包括美联储、世界银行在内的金融机构吞噬财富、奴役人民的罪恶行径。并例举巴拿马、伊朗、伊拉克、厄瓜多尔、委内瑞拉发生的一系列政治事件，与以大财团为幕后指使的美国金融机构存在着密切联系。随后引申出当前广为关注的能源、民主等问题，而当今诸多棘手的问题的症结所在皆可追溯至现存的金融货币体制。部分学者据此提出“维纳斯计划”，旨在引导人类追求一个无货币、共同珍惜并合理利用地球现有资源的后乌托邦社会。而实现这一目标的前提，就是彻底打破现有的金融体制。人类的明天是天堂还是地狱？选择就在自己手中。"},{"instruction":"请为《冰峰168小时》这部纪录片写一段简短且吸引人的故事概述，包括影片的主要背景及内容，要清晰、干脆，能够很好地说明电影的情节，但是不要透露过多内容。","output":"乔·辛普森与西蒙·耶茨是一对登山好搭档，他们一起挑战了无数高峰，这一次是秘鲁安第斯山峰。在成功登顶后，下撤的途中，乔发生意外，跌下陡坡，摔断了右腿。西蒙用绳索紧紧拉住他，在暴风雪中下撤。然而在途中，乔再次不幸落入冰洞，两人难以沟通，紧靠一根绳索把彼此连在一起。他们随时都有坠崖身亡的可能，僵硬的两个人也没有足够的食物和水源渡过难关。西蒙手里的刀在绳索上迟迟不决，而他的眼泪已经难以抑制的流了下来。在绳索的另一端，乔又有怎样的期盼，他能绝境逢生么？"},{"instruction":"写一段关于《零日》的内容简介，要求能把整部片子的内容和背景交代出来，并且内容简洁，能够吸引观众兴趣。","output":"一个全新型态的网路超级病毒，突然遍布全世界的电脑，一开始无伤大雅不受重视，直到随着时间累积，许多基础建设的系统都一一被攻击掌控，比过往任何一种病毒复杂几十倍，甚至可能全面瘫痪人们的生活。随着深入调查，揭露这个超级病毒Stuxnet，背后竟是美国与伊朗战争行动的阴谋，伊朗核武危机无法以政治手段解决，美国便对伊朗的网路展开攻击。无法回头的网路攻击逐渐失控，人们生活中各式控制系统都备受威胁，包括发电、交通、通讯、ATM、医院都将不堪一击，网路安全问题全球都可能遭到入侵，下一次的世界大战危机似乎也一触即发。"},{"instruction":"请为《亨利·朗格卢瓦：电光魅影》这部纪录片写一段简短且吸引人的故事概述，包括影片的主要背景及内容，要清晰、干脆，能够很好地说明电影的情节，但是不要透露过多内容。","output":"一九三六年昂利朗瓦创办了法国电影收藏馆，千万的电影亦因而摆脱了被遗忘和遭毁灭的命运。他才华横溢的节目策划眼光，让很多新晋的导演得以让全球的人所认识，因而催生了一整代的新浪潮导演。一九六八年，他遭戴高乐政府剥夺了电影收藏馆的拥有权，大批电影工作者动员起来集体抗议，终于让他重新得回电影收藏馆的拥有权。幕后制作：《昂利朗瓦：电光魅影》是导演花了七年心血拍摄的纪录片，透过一些珍藏的数据和多位有头有面的法国电影人一起重构/解构朗瓦这位传奇人物。"},{"instruction":"帮我写出关于《征服14座高峰：凡事皆可能》的内容简介，主要包括该片的主要背景及内容等等，不要过多剧透，目的是能吸引读者的观看兴趣。","output":"《征服 14 座高峰：凡事皆可能》透过尼玛尔·普贾（“尼姆斯”）的视角，探索了尼泊尔与高海拔登山的不解之缘，尼玛尔·普贾是一位无所畏惧、热爱玩乐的尼泊尔登山者，他正在执行一项他称之为“可能性计划”的任务：在 7 个月内登顶世界上 14 座海拔 8000 米的山峰，而此前的最短纪录是 7 年。他与一群技术娴熟的夏尔巴人一起穿越了珠穆朗玛峰、乔戈里峰和其他标志性山峰，经历了极端天气、生死抉择，以及家中母亲病倒的变故。《征服 14 座高峰：凡事皆可能》是一个关于勇气、毅力和挑战人类耐力极限的惊险故事。托奎尔·琼斯担任编剧、导演和制片人。金国威和伊丽莎白·柴·瓦沙瑞莉共同担任监制。该片由 Noah Media Group 和 Little Monster Films 联合制作。"},{"instruction":"你能帮我写一段《千锤百炼》的内容简介吗，风格参考其他豆瓣纪录片的介绍。","output":"本片讲述了四川会理一个拳击教练和他的两个年轻徒弟的故事。齐漠祥是中国最早的职业拳击手，退役后一直在会理挑选适合拳击运动的孩子。拳击是他的信仰，为了拳击，他并不在意艰苦的条件和独身的生活。在他的精心调教下，门生何宗礼和缪云飞获得了一系列成绩，被选入省队，准备国家级比赛。齐漠祥虽然离开职业拳坛很久了，但他依然怀揣梦想，希望重新参加职业比赛，夺取金腰带称号。年近四十，齐漠祥开始努力恢复训练，准备参加在会理举办的WBC拳王争霸赛……"},{"instruction":"写一段关于《东京大学事件 45年后的真相》的内容简介，要求能把整部片子的内容和背景交代出来，并且内容简洁，能够吸引观众兴趣。","output":"１９６０年代後半、「政治の季節」と呼ばれた時代を象徴する「東大紛争」。今回、ＮＨＫは昭和史に残るこの大事件にまつわる第一級の資料を独自に入手した。４５年前の安田講堂陥落の直後、当時の大学執行部が紛争の顛末を極秘裏に語り合った座談会の６００頁におよぶ議事録である。東大紛争に関してはこれまで学生側の証言や資料は多く刊行されてきたが、紛争の収束に向けて大学側は何を考え、どう行動したかについては全くわかっていなかった。発見された資料からは、大学側が学生だけでなく、機動隊導入や入試実施の是非をめぐって国とも激しく対峙し、そして「敗北」していったことが初めて明らかになってきた。その後の日本の大学のあり方を決定づけたとも言われる「東大紛争」。これは、戦後史の空白を埋めるスクープドキュメントである。"},{"instruction":"写一段关于《三生三世 聂华苓》的内容简介，要求能把整部片子的内容和背景交代出来，并且内容简洁，能够吸引观众兴趣。","output":"人稱「世界文學組織之母」的聶華苓是20世紀華人文學界最重要的推手，白先勇、林懷民、蔣勳，以及諾貝爾文學獎得主莫言，香港作家李怡、董啟章、鍾玲、潘耀明都曾是她家客廳的座上客。現年八十七歲的聶華苓生於中國武漢，1949年與家人逃到台灣，後因編輯【自由中國】受白色恐怖牽連，之後赴美與丈夫 Paul Engle創辦影響力龐大的愛荷華大學「國際寫作計畫」。通過他們的「國際寫作計劃」，世界各地作家越過意識形態聚集一堂。1979年，大陸、台灣和香港的作家隔絕三十載，首次相見於愛荷華。聶華苓曾自喻為「一棵樹，根在大陸，幹在臺灣，枝葉在愛荷華。」香港導演陳安琪花三年時間、往來兩岸三地與美國，拍攝紀錄片《三生三世聶華苓》。聶華苓的一生，恍如一段三生三世的飄泊旅行，交織出了當代海外傑出華人作家的清晰身影與美麗，也刻劃了她和詩人伴侶保羅．安格爾至死不渝的堅定情感。"},{"instruction":"请为《珍》这部纪录片写一段简短且吸引人的故事概述，包括影片的主要背景及内容，要清晰、干脆，能够很好地说明电影的情节，但是不要透露过多内容。","output":"影片主角是在世界上拥有极高声誉的动物学家珍·古道尔，她二十多岁时前往非洲的原始森林，为了观察黑猩猩，在那里度过了三十八年的野外生涯，后来常年奔走于世界各地，呼吁人们保护野生动物、保护地球环境。 导演布莱特·摩根尤其擅长人物刻画，他从100多个小时从未公布过的珍·古道尔在野外考察和访谈的影像资料中选材剪辑，以第一人称视角，讲述了珍·古道尔年轻时在非洲研究黑猩猩的故事。伴随菲利普·格拉斯的迷人配乐，让观众感受到在那个仍由男性主导野外科研的年代，一个女人如何通过激情、奉献和毅力改变世界。影片还把人类的命运与动物交织在一起，大大强化了人与自然的关系。"},{"instruction":"你能帮我写一段《迪克·约翰逊的去世》的内容简介吗，风格参考其他豆瓣纪录片的介绍。","output":"终生从事纪录片制作的经历让屡获殊荣的电影制作人克斯汀·约翰逊相信真实的力量。但现在，她已经准备好使用书中所有逃避现实的电影制作技巧，用一种创造性和幻想的方式记录她 86 岁精神科医生父亲的死亡，同时希望电影可以帮助她扭转时间，笑对痛苦，让她的父亲永生。《迪克·约翰逊的去世》是一封 女儿写给父亲的情书，书中充满了黑色幽默和疯狂想象力，创造性地将事实与虚构元素融合在一起，以此探索电影如何为我们提供解决生活深层问题的工具。《迪克·约翰逊的去世》由克斯汀·约翰逊（《持摄像机的人》）拍摄、制作和执导，凯蒂·舍维尼和玛丽莲·内斯担任制片人，莫琳·A·瑞安担任联合制片人，梅根·埃里森担任监制。"},{"instruction":"写一段关于《改变世界的花园》的内容简介，要求能把整部片子的内容和背景交代出来，并且内容简洁，能够吸引观众兴趣。","output":"As the Royal Botanic Gardens in Kew prepare to celebrate their 250th anniversary, Dan Cruickshank unearths some of the surprising stories that shaped the famous gardens. His travels take him from the royal gardens to the corridors of power and the outposts of the Empire as he pieces together Kew\'s story, uncovering tales of bravery, high adventure, passion and drama."},{"instruction":"我是一个为豆瓣电影页面写内容简介的工作人员，你能帮我写一段《韦纳》的内容简介吗？像豆瓣上其他纪录片那样","output":"许多政治家都经历过政治生涯走下坡路的故事,但是很少有电影能够完全捕捉到像政客韦纳这种深刻且非常滑稽的一面。随着对安东尼·韦纳本人和他的家庭，以及他的纽约市长竞选团队的前所未有的采访，这部电影纪录了即将崩塌的政治事件。故事开始于前国会议员始料未及的重返政坛，但随着韦纳被迫承认新发色情短信的指控，故事又急转直下。媒体不停地挖掘和曝光他的一举一动,韦纳拼命想开拓进取,但是越来越大的压力和严重的24小时连续的新闻报道葬送了他的政治抱负。韦纳的这场政治闹剧和个人的悲剧，揭露了前国会议员的傲慢，同时也批判了媒体对其家人攻击的丑陋一面。在纽约市这个响亮而热闹的大背景下，这部影片以一种无比坚定的、幽默而感伤的方式揭示出日益多见的政治运动的本质。"},{"instruction":"写一段关于《纸牌人生》的内容简介，要求能把整部片子的内容和背景交代出来，并且内容简洁，能够吸引观众兴趣。","output":"62岁的理查德·特纳被誉为世界上最伟大的纸牌魔术家之一，但他同时也是一位看不见东西的盲人。从9岁时起，理查德·特纳因为重病逐渐失明，之后又因为抵触盲文学习而被高中开除，然而这都不妨碍他成为这个世界上最会玩牌的人之一。从19岁开始，理查德每天会练习14个小时的扑克，分析和思考每一个动作，直至变成下意识的习惯。本片从理查德的日常生活探究这位看不见的人，是如何在黑暗中挖掘纸牌魔术的宝藏，并创造奇迹的历程。一个看不见的人如何玩转一个最需要眼睛看的魔术？除了主人公的传奇经历，片中的各种魔术也足以令人兴奋。该片参加了2017年的美国SXSW电影节以及达拉斯国际电影节。"},{"instruction":"你能帮我写一段《再现康宁汉》的内容简介吗，风格参考其他豆瓣纪录片的介绍。","output":"默斯·康宁汉是20世纪最伟大的现代舞编舞家之一。他1953年成立了康宁汉舞团，用充满实验性的编舞，一次又一次颠覆了舞蹈的固定框架。他打破高雅艺术和流行文化的门槛，也突破了不同艺术门类的壁垒，常与流行歌手和其他艺术门类的艺术家一起创作，制作了许多令人叹为观止的舞蹈空间。2019年是康宁汉诞辰100周年，也是他逝世20周年。本片将康宁汉的经典舞蹈设计通过3D化呈现，给观众身临其境的体验，重现了那些不可重来的珍贵舞台瞬间，让艺术灵感的璀璨再现，并拓展观众对于舞蹈的想象力。"},{"instruction":"我是一个为豆瓣电影页面写内容简介的工作人员，你能帮我写一段《皮娜》的内容简介吗？像豆瓣上其他纪录片那样","output":"德国著名导演维姆·文德斯（Wim Wenders）在第一次观看皮娜·鲍什（Pina Bausch）出演《穆勒咖啡馆》时，便深深为这位“德国现代舞第一夫人”所吸引。他与皮娜迅速成为至交，并诞生了合作电影的想法。几经考虑，文德斯决定采用3D电影技术来展现皮娜充满激情与创意的 现代舞艺术，试图为观众开启一种全新而独特的视觉发现之旅。但是，2009年电影拍摄计划宣布后不久，皮娜·鲍什就因肺癌辞世，整个拍摄计划就此搁置。直到在与皮娜生前执掌的乌帕塔舞蹈剧场商谈后，文德斯才决定重新启动电影拍摄计划。本片将皮娜的几部舞蹈作品《穆勒咖啡馆》、《春之祭》、和《月圆》贯穿在学生和好友对她的追忆中，同时将镜头投射到充满工业景观的城市乌帕塔，立体化地诠释了皮娜独特奇妙的舞蹈美学，留下了对皮娜最美的赞歌。"},{"instruction":"你能帮我写一段《变态者电影指南》的内容简介吗，风格参考其他豆瓣纪录片的介绍。","output":"由英国女导演索菲亚·菲尼斯执导，由当今最为耀眼的国际学术明星之一斯拉沃热·齐泽克（斯拉沃热·齐泽克 Slavoj Zizek 饰）担当编剧、主持人的纪录片《变态者电影指南》，将为电影发烧友呈现一部殿堂级的饕餮盛宴。在长达150分钟的影片中，拥有超凡魅力的斯拉沃热·齐泽克妙语连珠，引用希区柯克、大卫·林奇、塔可夫斯基、沃卓斯基兄弟等著名导演拍摄的42部经典电影桥段，将精神分析、主体性、意识形态和大众文化熔于一炉，探秘电影背后的隐匿镜头语言，引导观众思辨自身与电影之间的联系。作为拉康理论最重要的继承人，斯拉沃热·齐泽克长期致力于沟通拉康精神分析理论与马克思主义哲学之间的关系，形成了极为独特的学术思想和政治立场，被一些学者称为黑格尔式的思想家。"},{"instruction":"请为以下纪录片写一段简短且吸引人的故事概述，包括影片的主要背景及内容，要清晰、干脆，能够很好地说明电影的情节，但是不要透露过多内容，影评所获殊荣也需要一并介绍。《狂飙梦想》","output":"影片《狂飙梦想》是一个成长的故事，讲述一个三个孩子梦想有一天参加纳斯卡赛车的故事。获奥斯卡奖提名的纪录片导演马歇尔•库瑞，将我们带入了三个孩子的生活。11岁的安纳贝斯，12岁的乔希和13岁的布兰登，他们正在为世界卡丁车联合会全国系列赛而竞争，人们普遍认为那是专业赛车的少年联盟。在时速高达70英里的飞驰中，这些年轻的车手们进行了整年的全国系列赛，众多顶级纳斯卡赛车驾驶员就来自这里。而同时，他们也在从童年到成年的艰辛旅途上跋涉着。获奖情况：翠贝卡电影节最佳纪录片纳什维尔电影节最佳纪录片印第安纳波利斯国际电影节最佳纪录片杰克逊维尔电影节最佳纪录片芝加哥国际电影节银雨果奖"},{"instruction":"你能帮我写一段《阿波罗11号》的内容简介吗，风格参考其他豆瓣纪录片的介绍。","output":"艾美獎紀錄片導演托德道格拉斯米勒，率領製作團隊與美國太空總署及國家檔案館緊密合作，蒐集阿波羅11號登月50年來所有紀錄片段。過程中竟首度發現了從未曝光的70mm珍貴片段，以及超過11,000小時、記錄了整個登月任務的對話錄音。團隊更將這些重見天日的寶貴影像，以高至8K解像度進行數碼化修復處理，將阿波羅11號登月之旅，以前所未有最高清的質素呈現眼前！本片不但讓觀眾有如親歷其境地與岩士唐一起登陸月球，更踏出了電影史上紀錄片製作的一大步！2019辛丹斯電影節：美國紀錄片評審團特別大獎（剪接）"},{"instruction":"你能帮我写一段《洗脑游戏》的内容简介吗，风格参考其他豆瓣纪录片的介绍。","output":"北韓,當今世上最神秘的國家,「謠言」似乎已是常態。自領導 人金正恩上台後,不時傳出處決高官,連親信都驚傳被換掉或人 間蒸發,讓有關核武、垮台、勞改營、饑荒、逃亡種種臆測甚囂 塵上。《雲之子最後的殖民地》西班牙哥雅獎最佳紀錄片導演 Alvaro Longoria決定撇開主流媒體的角度,透過與朝鮮委員會友 好的西班牙代表 Alejandro Cao de Benós 的協助,親身走進共 產主義的封鎖鐵幕國度,真正體驗自稱為最幸福國家的北韓不為 人知的一面,又請來朝鮮真正的專家包括人權、外交以及宣傳專家見證,揭開西方霸權主導下被抹黑的朝鮮,讓觀眾發現一個真 偽難辨的現實謊言‥世人只是政治宣傳的最終受害者。"},{"instruction":"写一段关于《坚忍号：沙克尔顿的传奇南极远征》的内容简介，要求能把整部片子的内容和背景交代出来，并且内容简洁，能够吸引观众兴趣。","output":"A retelling of Sir Ernest Shackleton \'s ill-fated expedition to Antarctica in 1914-1916, featuring new footage of the actual locations and interviews with surviving relatives of key expedition members, plus archived audio interviews with expedition members, and a generous helping of the footage and still photos shot on the expedition."},{"instruction":"我是一个为豆瓣电影页面写内容简介的工作人员，你能帮我写一段《达伦·布朗：就范》的内容简介吗？像豆瓣上其他纪录片那样","output":"该特别节目由来自英国的心理魔术师达伦·布朗（Derren Brown）倾力打造，旨在探索一个人在被挑衅的情况会不会走上极端最终夺人性命。节目中，在毫不知情的情况下，一位普通人被置于一个令人紧张不安的预先设定的情境之中。同他打交道的其实都是演员，而这位普通人最后将不得不被迫做出是否该将一位百万富翁从高处推下致死的决定。据悉，该特别节目将从心理角度解读人性服从和社会责任。面对权威，我们的本能其实是毫不妥协的服从。在极端情况下，一位有道德意识的普通人都会犯下最可怕的行径，而一切仅仅因为他们被别人告知怎么去做。"},{"instruction":"请为《梵高：画语人生》这部纪录片写一段简短且吸引人的故事概述，包括影片的主要背景及内容，要清晰、干脆，能够很好地说明电影的情节，但是不要透露过多内容。如果该片曾获任何殊荣，也请简要介绍。","output":"文森特·威廉·梵高，这位用明亮鲜活的色彩吸引了全世界目光的天才画家，却在美丽的法国瓦兹河畔结束了自己37岁的年轻生命。他传奇不朽的一生已多次被搬上电影银幕。此次，由导演Andrew Hutton执导的本部戏剧式纪录电影，将重现梵高绚烂而短暂的一生。本尼迪克特·康伯巴奇 Benedict Cumberbatch饰演这位天赋异禀且卓尔不群的疯狂大师，而其弟提奥则由杰米·帕克 Jamie Parker饰演。剧中的一言一语皆来自于梵高写给提奥及亲人的信件。本片以其独特的叙事方式和入木三分的描摹再现，赢得了2011年在班夫世界媒体节上的最佳艺术纪录片洛基大奖。"},{"instruction":"你能帮我写一段《狂野非洲》的内容简介吗，风格参考其他豆瓣纪录片的介绍。","output":"导演本·斯塔森和摄影师肖恩·麦克劳德·菲利普斯回到非洲南部，开始了一次全新的冒险之旅。被称作“狮语者”的动物行为学家凯文·理查德森与从小与大象一起长大的玛拉·道格拉斯·汉密尔顿带领观众以旅行的方式穿过了地球上景色最壮丽的地方：从纳米比亚风景如画的海岸沙丘的沙漠，路过堪称自然奇观的火山口，到达叹为观止的维多利亚瀑布和乞力马扎罗之巅。在这次旅程中，你能与狮子、猎豹、美洲豹、黑犀牛和大象们近距离的亲密接触。这是一辈子一次的旅行，所以让我们做好准备，一起进入真正的没有围墙保护的非洲原野。"},{"instruction":"我是一个为豆瓣电影页面写内容简介的工作人员，你能帮我写一段《惠特尼：可以做我自己吗》的内容简介吗？像豆瓣上其他纪录片那样","output":"这部纪录片展现了休斯顿流行巨星角色和个人生活之间的矛盾关系，提到了她对2.5亿美元巨款的挥霍。影片还展现了惠特尼真实而可爱的一面：她喜欢恶作剧，有惊人的喜剧天赋，善于模仿他人，她的笑声富有感染力，让人很难不爱上她。影片的上映遭到了惠特尼家人的抵制，他们还发呼吁人们不要观看这部电影。但布鲁姆菲尔德对此表示不解，他表示：“我并不想做什么事情来打扰他们的生活。我不会因此停止我所做的事情，因为我知道有更多的人想要听到这些故事。”"},{"instruction":"请为《贩卖疑惑的商人》这部纪录片写一段简短且吸引人的故事概述，包括影片的主要背景及内容，要清晰、干脆，能够很好地说明电影的情节，但是不要透露过多内容。","output":"在研究Naomi Oreske 和 Erik Conway饱受赞扬的书后，Robert Kenner (FOOD INC.)进行了一个有趣又缜密的调查：关于支持工业科学的异见者。从宣扬核武器的人，再到烟草制造商兜售伪科学，再到科学变暖的异见者－－这个今天最为棘手的科学和政治问题。Kenner揭露了靠工业致富的专业异见者们如何把一些被科学界认定的事实悄悄地神秘化。一系列令人吃惊的气候变暖让异见者们高兴地承认了他们扭曲的心理。Kenner甚至可以找出那些驱使他们的信念。尤其是那些非常保守的美国议员们决定去南极看看那些冰盖。当他被自己看到的所惊呆的时候，他毅然决然地站在了守旧派的另一边。"},{"instruction":"你能帮我写一段《镜头里的人生：肖像摄影大师安妮·莱博维茨》的内容简介吗，风格参考其他豆瓣纪录片的介绍。","output":"安妮•莱柏维兹（Annie Leibovitz），1949年出生于美国康涅狄格州。这个一身朴素的长发女子却是群星闪耀的名人圈里最为璀璨的一颗明珠。她先后供职《时尚》、《滚石》和《名利场》等杂志，曾与约翰•列侬、大野洋子、滚石乐队、黛咪•摩尔、乔治•克鲁尼、朱丽娅•罗伯茨、克莉斯汀•邓丝特等名人有过近距离接触。她的作品带有浓厚的个人印记，既承载了历史，又引起广泛的热议。关于这个风格多变摄影师的争论似乎从未停止，但她作品中所折射出来的魅力却无人可以否认。2009年，安妮了获得了纽约摄影中心无限奖（ICP Infinity Awards）终身成就奖。"},{"instruction":"帮我写出关于《吉高由里子 in 濑户内》的内容简介，主要包括该片的主要背景及内容等等，不要过多剧透，目的是能吸引读者的观看兴趣。","output":"３年に１度、瀬戸内の里海に知られざる絶景が現れる。瀬戸内国際芸術祭。島々を舞台にさまざまな現代アートが展開する美の祭典だ。これらのアートと風景が織りなす極上の美を俳優の吉高由里子が訪ねる。浜辺に現れた１９６の子どもの砂の像、森につるされた４００の風鈴の音色、古い集会所に作られた４００の建具のトンネル。暮らしや風土と一体化したアートが生み出す絶景は刻一刻とその姿を変え、いつしか里海に溶け込んでゆく。"},{"instruction":"请为《尤物：海蒂·拉玛传》这部纪录片写一段简短且吸引人的故事概述，包括影片的主要背景及内容，要清晰、干脆，能够很好地说明电影的情节，但是不要透露过多内容。","output":"她是《霸王妖姬》（1949）的美艳妖姬，演过无数人间尤物与风流皇后。当世人只注意她的样貌与身材，关心她的绯闻与私隐，认定美貌与智慧不可兼得，海蒂拉玛的故事肯定令人跌破无数眼镜。她与音乐家好友佐治安泰尔，在战时发明无线电跳频技术，为后世wifi和蓝牙通讯奠下基础。她要当发明家，但政府只想利用她的名气推销战争债券。苏珊莎拉顿参与监制，戴安古嘉客串读出书信，加上亲友忆述，以及意外发现的海蒂拉玛生前录音带，让人更接近这位艳星发明家的真实面目。"},{"instruction":"写一段关于《尼尔·帕萨恩》的内容简介，要求能把整部片子的内容和背景交代出来，并且内容简洁，能够吸引观众兴趣。","output":"In a Scottish town in 1974, factory workers refuse to carry out repairs on warplane engines in an act of solidarity against the violent military coup in Chile. Four years pass before the engines, left to rust in factory yard, mysteriously disappear in the middle of the night."},{"instruction":"写一段关于《国家地理：魔鬼圣经》的内容简介，要求能把整部片子的内容和背景交代出来，并且内容简洁，能够吸引观众兴趣。","output":"一群学者与科学家展开一场空前的探索，试图解开所谓「魔鬼圣经」之谜。数百年来，这份中古世纪的手稿充满了各种迷信与传说。据说有一个被诅咒的僧人与魔鬼签订契约，在一夜之间完成这本巨大著作。这数百年间，书中全页的撒旦画像始终令人恐惧而迷惑。如今十分难得地，结合了几位世界顶尖的文本专家，一同研究安全地锁放在瑞典国家图书馆内的古抄本。他们将藉由紫外线荧光影像、笔迹分析与抄本本身的重建，试图发掘魔鬼圣经的真相。"},{"instruction":"请为《长江》这部纪录片写一段简短且吸引人的故事概述，包括影片的主要背景及内容，要清晰、干脆，能够很好地说明电影的情节，但是不要透露过多内容。","output":"さだまさし製作、監督、音楽、主演による、全編長期中国ロケによって、悠久なる「長江」の流域の雄大なる自然と人々の生活を描いた、長編ドキュメンタリー紀行映画。製作総指揮: 佐田雅人 製作・監督・音楽・出演: さだまさし 総監修: 市川崑 脚本: 長野広生/菊池昭典 ナレーション: 宮口精二这部纪录片是佐田雅志先生1980年-1981年间在中国摄制完成的，1983年在我国热播的大型电视系列片《话说长江》其素材就取自该片摄制的大量胶片。佐田雅志自任本片监制、主演，并创作和演唱主题歌《生生流転》。但是这部出于对中国深切的爱而拍摄的影片却让佐田雅志先生背负了28亿日元（含利息共计35亿日元）的巨额债务。之后的30年间，佐田先生频繁开演唱会（平均两天就举办一场小型演唱会），在接近60岁的2010年才终于基本还清债务。"},{"instruction":"请为《珠峰队长》这部纪录片写一段简短且吸引人的故事概述，包括影片的主要背景及内容，要清晰、干脆，能够很好地说明电影的情节，但是不要透露过多内容。","output":"每天生活两点一线的白领、卖掉自家小店的店主、背负沉重KPI的销售、在成功与失败间挣扎的创业者……8个普通人，带着各自的故事与梦想，在民间专业高山向导、队长苏拉王平的带领下，踏上了憧憬已久的珠峰之旅，也许，也是一次死亡之旅。他们在尼泊尔的珠峰南坡集结出发，穿越裂缝深不见底的恐怖冰川，攀上高达千米的蓝色冰壁，爬过山体岩石断面的“黄带”，朝着世界之巅一步步靠近。这支起初被外国队伍“看扁”的中国民间登山队，面对“窗口期”极端的恶劣天气和可能发生的冲顶“大堵车”，能否成为2019年全球第一支登顶珠峰的团队？本片是中国首部沉浸式体验攀登珠峰全程的电影，也是华语电影史上“最高难度”的纪录片——创下在8470米以上最高海拔完成无人机起飞航拍的新纪录。观众将跟随镜头“空降”珠峰攀登现场，与这群不甘平凡的普通人一起，为心中的热爱疯狂一次。"},{"instruction":"请为《挖眼睛》这部纪录片写一段简短且吸引人的故事概述，包括影片的主要背景及内容，要清晰、干脆，能够很好地说明电影的情节，但是不要透露过多内容。","output":"二后生五十出头，是个唱二人台的江湖艺人。游走在内蒙古河套地区。二十四年前，他在一个村子卖唱时认识了三女子。三女子有男人，家境苦寒，男人让她跟上二后生卖唱养家。不料日久生情，二后生要带三女子远走高飞。男人知道后叫上自家的两个兄弟，把二后生诓到村里，挖掉了他的双眼。二后生死里逃生，保全性命。后来便把这段经历编成了二人台曲子，曲名叫《挖眼睛》。红及内蒙晋北一代。纪录片《挖眼睛》记录了二后生的日常生活，追述了那些不堪的往事。呈现了他以死延生的人生境遇。"},{"instruction":"请为以下纪录片写一段简短且吸引人的故事概述，包括影片的主要背景及内容，要清晰、干脆，能够很好地说明电影的情节，但是不要透露过多内容。《攀登梅鲁峰》","output":"位于印度北部的梅鲁山是所有登山者心目中的梦想，那么神圣，那么美好，也那么的遥不可及。由于此地过于恶劣的地貌和气候，从古至今，没有一支队伍能够成功登顶梅鲁山。这样一座传说中的巅峰吸引了登山者康拉德（康拉德·安科尔 Conrad Anker 饰）的注意，很快，他就组建了自己 的团队——由他的老搭档金国威和一位名叫瑞南（瑞南·阿兹特克 Renan Ozturk 饰）的美国人组成。在完成了万全的准备之后，三人开始了他们的登顶之旅。一路上，无数的艰难险阻在等待着他们，在这里，只要踏错一步，留给一行人的就只有失败和死亡。变化莫测的天气和极度短缺的资源都大大增加了这场攀登的难度。"},{"instruction":"帮我写出关于《B级片：西柏林的欲望与声音1979-1989》的内容简介，主要包括该片的主要背景及内容等等，不要过多剧透，目的是能吸引读者的观看兴趣。","output":"瘦削的碧丽霞在“危险酒吧”将客人们弄得醉醺醺；严肃的尼克· 凯夫在柏林家中的墙上集满了“德国哥特音乐”海报…… 在围墙和防火墙之间，在新式和旧式建筑之间，在马尼亚D（Mania D）和韦斯特班姆（Westbam）的音乐之中，来自英国曼彻斯特的音乐人、厂牌制作人和军事狂人马克· 里德为柏林的电子乐所着迷，于上世纪七十年代末来到这里。所幸的是，他所经历的一切都被影片记录了下来。由约尔格· A · 霍佩、克劳斯· 梅克和海科· 朗格联合制作的电影《B级片：西柏林的欲望与声音1979-1989》收录了详实的影像和声音资料，既是一部纪录片，也是对那个时代的礼赞。对于所有经历过这段时光的人来说，这都是一次时空穿越、令人窒息的昨日重现。而对于所有那些不知暗流何时开始萌动，或是以为那些辉煌都是1990年以后才开始的后来人，这部电影也一定能够开阔他们的视界。"},{"instruction":"我是一个为豆瓣电影页面写内容简介的工作人员，你能帮我写一段《眩晕》的内容简介吗？像豆瓣上其他纪录片那样","output":"本片记录了半管滑雪赛传奇人物同时也是童年好友的Shaun White与Kevin Pearce之间的史诗对决。十五年的跟踪拍摄展现着他们之间名副其实的竞争，以及期间有影响力的一些事件。 在Shaun与Kevin不断挑战更危险技巧的同时，二人在Vancouver冬奥会上分别成为了世界冠亚军。在Kevin从一次几乎致命的事故中慢慢恢复，Shaun获得了金牌，并把这项运动的标准再次提高到几乎无人可及的高度。现在Kevin唯一想做的就是重新回到滑雪板上，全然不顾医生的反对和家人的恐慌。Kevin的举动或许会结束他的竞技生涯甚至是生命。"},{"instruction":"帮我写出关于《间谍嘉宝》的内容简介，主要包括该片的主要背景及内容等等，不要过多剧透，目的是能吸引读者的观看兴趣。如果该片曾获任何殊荣，也请简要介绍。","output":"英国代号“嘉宝”，纳粹代号为“阿拉瑞克”的西班牙双料间谍璜·普吉·加西亚（Joan Pujol García）是历史上最神秘最成功的间谍之一。他一人分饰28角，凭空捏造出了一个完全不存在的世界谍网，用德国情报机构的资金支援了英国情报机构的发展和运营。在他的帮助下，盟军成功使纳粹将兵力重心放在了法国北部的加莱海峡地区，确保了1944年6月6日诺曼底登陆的成功。璜·普吉是唯一一位同时获得德国纳粹铁十字勋章和大英帝国勋章的人。二战结束后他神秘消失，据说死于非洲安哥拉。但这样一位杰出的谍中谍王，难道真的就从此消失了吗？本片根据对研究璜·普吉·加西亚经历的记者、历史学家、前间谍、心理学家和璜·普吉亲人的采访口述编纂而成，并运用了大量二战老电影和动画镜头，获西班牙戈雅奖最佳纪录片奖、高迪奖最佳纪录片和最佳剧本奖，以及西班牙影评人协会最佳纪录片奖。"},{"instruction":"你能帮我写一段《德国，一个夏天的童话》的内容简介吗，风格参考其他豆瓣纪录片的介绍。","output":"2006，只是个普通的数字，可对于德国，对于全世界的球迷而言，却是一段童话般的记忆。在这年夏天，第18届世界杯在德国上演。而这部纪录片就是记录了德国队从赛前准备到比赛的全过程。我们不仅能看到赛场上他们的英姿和激情，还能借助导演的镜头，了解到赛场外的故事，那些不为人知的小秘密。他们平日里的训练、各自的外号、赛前的理发、总理的问候、吃的食物、为比赛胜利的雀跃、为失利的沮丧……有欢笑有泪水，这是属于德国队的记忆，也是属于2006年全世界球迷对德国的记忆。本片是德国国家电视台播出的纪实性纪录片。该片导演之前的作品还包括了《伯尔尼的奇迹》等。"},{"instruction":"帮我写出关于《持摄像机的人》的内容简介，主要包括该片的主要背景及内容等等，不要过多剧透，目的是能吸引读者的观看兴趣。如果该片曾获任何殊荣，也请简要介绍。","output":"曾荣获第88届美国国家评论协会奖，并入围奥斯卡纪录片短名单、美国独立精神奖、哥谭独立电影奖等专业奖项足够说明这部《持摄像机的人》的超高口碑。基尔斯滕·约翰逊是著名摄影师，曾经参与迈克尔·摩尔的《华氏911》、劳拉·珀特阿斯的《第四公民》等名作。你会在片中看到布鲁克林拳击手的挣扎、阿尔及利亚接生护士在恶劣条件下工作、波斯尼亚阿拉伯农民返乡等等。影片中对于那些遭受过大屠杀、大灾难的地点进行再审视的画面，更是直逼内心。"},{"instruction":"写一段关于《康-蒂基》的内容简介，要求能把整部片子的内容、背景和所获殊荣等交代出来，并且内容简洁，能够吸引观众兴趣。","output":"影片曾获得1952年奥斯卡最佳纪录片，记录了人类航海史上的一次奇迹。挪威人类学家、探险家托尔·海尔达尔和五名伙伴坐上一艘以太阳神康·蒂基命名的用9根轻型原木制成的原始木筏，从秘鲁出海远航，横渡大西洋，进行洲际间航海探险，101天后成功抵达玻利维亚，创下了航海史上的奇迹。这次活动源于一个传说：在很久以前，他们的祖先太阳神――康·蒂基带领自己的部族，从大洋东岸乘坐木筏，追随太阳移动的方向，漂洋过海……第24届奥斯卡金像奖(1952)　 奥斯卡奖-最佳纪录长片　 Olle Nordemar第4届英国电影和电视艺术学院奖(1951)　 电影奖-最佳纪录片(提名)"},{"instruction":"你能帮我写一段《九零后》的内容简介吗，风格参考其他豆瓣纪录片的介绍。","output":"故土在战争中沦陷，大学被占领、被炸毁。一群十八九岁的青年学生，他们匆匆出发，徒步南迁，横穿湘黔滇，最终在昆明高原组建临时大学——由清华、北大、南开联合成立的西南联大。他们穿过一座城去听“史上最好的国文课”，听托赛里的《小夜曲》，也和先生们一起抱着书跑警报、加入飞虎队. .....对这些今已年过九旬的“九零后”老人而言，西南联大不是一段尘封的历史，而是依然鲜活如初的青春记忆。杨振宁、许渊冲、潘际銮、杨苡、王希季、马识途......16位平均年龄超过96岁的联大学子联袂“出演”，带你回到那个战火纷飞、群星闪耀的年代。"},{"instruction":"我是一个为豆瓣电影页面写内容简介的工作人员，你能帮我写一段《无薪时代—未来没有工作》的内容简介吗？像豆瓣上其他纪录片那样","output":"自从工业革命以来，每次技术革新产生的新岗位，都不会少于革新技术而淘汰的岗位，然而，这一趋势会继续下去吗？生命，首先在于生存，继而繁荣。我们永远不可能知道，我们还能在这颗星球度过多少岁月，因此我们的任务就是坚持不懈的努力生存，并且抗击可能存在的所有威胁。当下最大的威胁并不是疾病、恐怖主义、自然灾难，而是已经无法继续可持续发展的政经体系。法律、医学、会计、建筑、广告、工程、咨询、翻译，无论你学什么专业，你的学位和准备都将是徒劳无功。也许在未来，有工作的人才是贵族，赡养着全世界的无用之人。也许在未来，没有人需要赚钱糊口，你可以专心钻研任何你喜欢的课题。"},{"instruction":"请为《月球时代白日梦》这部纪录片写一段简短且吸引人的故事概述，包括影片的主要背景及内容，要清晰、干脆，能够很好地说明电影的情节，但是不要透露过多内容。","output":"有着“摇滚变色龙”之称的大卫·鲍伊，对于上世纪七十年代之后的全球流行音乐界、电影界、时尚界有着深远的影响力。本片是2016年大卫·鲍伊去世后，唯一一部得到鲍伊家族合作的关于鲍伊的纪录片。曾执导过《珍》等优秀纪录片的导演布莱特·摩根在拍摄前获得授权，查阅了包括鲍伊的画作、素描、录音、照片、影片、日记等总计超过500万件的档案，力图还原出鲍伊在音乐、绘画、表演等方面的多元艺术风采，并以鲍伊的采访录音作为旁白，阐述他独特的人生观。片中有大量从未公开的演唱会片段，经过修复后在IMAX大银幕的效果，足以让所有乐迷振臂欢呼。"},{"instruction":"请为以下纪录片写一段简短且吸引人的故事概述，包括影片的主要背景及内容，要清晰、干脆，能够很好地说明电影的情节，但是不要透露过多内容。《前任萨满》","output":"巴西纪录片《前任萨满》，导演是路易斯·波洛涅西。“在土著祷告的地方被烧毁，福音派教会的暴力登峰造极的时候，把这部电影选送到柏林意味着通过电影传播世界各地的森林与古老文明的精神，所以我很高兴。”导演如是说。这个纪录片讲述的是土著佩佩拉族的故事，苏瑞是一个印第安人，在他成为一名萨满信徒的森林里，他活到了20岁。与白人接触后，一位福音派牧师对他说说，萨满的行为和知识是属于魔鬼的，而后佩佩拉开始内部冲突。尽管他是一个福音派，并将自己定义为一名前萨满教徒，但他仍然以一名森林中长大的人的观点看待这个世界。这个真实的电影最让人感动的是，导演波洛涅西拍摄的所有细节的东西，都使我们旁观者变成了一个被遗忘的智慧的古老文化最后时刻的见证人，一代文明最后的叹息。"},{"instruction":"你能帮我写一段《逃避者》的内容简介吗，风格参考其他豆瓣纪录片的介绍。","output":"1992年，少年谭珊蒂和她的朋友索菲和茉莉拍摄了新加坡的第一部独立电影-一部名为“偷懒者”的公路电影-和他们神秘的美国导师乔治·卡多纳(Georges Cardona)一起拍摄。桑迪写了剧本，饰演主角，一个叫S的杀手。拍摄结束后，乔治和所有的镜头一起消失了！20年后，16毫米罐在新奥尔良被找到，桑迪-现在是洛杉矶的小说家-开始了一场跨越两大洲和许多媒体的新的个人奥德赛：16毫米、数码、Hi8、Super8、幻灯片、动画和手写信件。万花筒朋克摇滚鬼故事！"},{"instruction":"我是一个为豆瓣电影页面写内容简介的工作人员，你能帮我写一段《好死不如赖活着》的内容简介吗？像豆瓣上其他纪录片那样。","output":"本部纪录片直击“艾滋病”这个敏感而恐怖的话题，以跟踪拍摄被感染的马深义一家为整条线索，赤裸裸的向我们诉说着，这个家庭面对生死的生活原态和他们的心路。上世纪90年代，在河南省南部的一些乡村中，很多村民在卖血脱贫的鼓惑中，因为卖血感染了艾滋病。马深义一家就住在文楼村。一家五口，除了大女儿马宁宁以外，整个家庭都是艾滋病的受害者。纪录片从2001年的春末夏初开始，历经盛夏、深秋、严冬，一直到春节，讲述艾滋病带给整个家庭的这场灾难。本片荣获2003年圣丹斯电影节世界纪录片提名、2003年阿姆斯特丹纪录片电影节最高竞赛单元提名、2004年美国广播电视文化成就奖和2004年英国国家最佳纪录片奖。"},{"instruction":"帮我写出关于《梵蒂冈博物馆3D》的内容简介，主要包括该片的主要背景及内容等等，不要过多剧透，目的是能吸引读者的观看兴趣。","output":"电影《梵蒂冈博物馆3D》拍摄视角广且贴近观众，渲染力强。它叙述、分析并突出了以拉斐尔和米开朗基罗为主的雅典艺术学院的精美作品。他们的杰作装饰了西斯廷教堂，包括《创造亚当》和巨作《最后的审判》，以及拉斐尔、达芬奇、乔托、卡拉瓦乔的作品。除此之外，还有梵高、沙加尔、达利和丰塔纳等更接近我们时代的艺术家的作品。这独一无二、振奋人心的旅程是在梵蒂冈博物馆馆长安东尼奥·帕卢奇教授的权威指导下进行的。在这部独家纪录片中，艺术作为崇高的手段，将艺术家和信仰紧密相连，或许也在各个信仰间建立了紧密联系。从基督教信仰的乔托到犹太教信仰的夏格尔，再到乖张的萨尔瓦多达利和端庄的拉斐尔，影片涵盖了每一个历史时期的杰出大师作品。"},{"instruction":"帮我写出关于《自然法则：吸引定律》的内容简介，主要包括该片的主要背景及内容等等，不要过多剧透，目的是能吸引读者的观看兴趣。","output":"所谓吸引定律，又称吸引法则，是指世间万物皆由能量或者振动频率组成，相同的振动频率相互吸引，并引起共鸣。人类的意识也是能量的一种，正面的思想会促成积极的结果，反之负面的能量则会吸引不好的结果。在很久以前，大多数的人类并不知晓这个定律，它作为一个秘密被历史上的伟人、名人以及出色的民族所持有。为何1%的巴比伦人掌握了世界96%的财富？为何比尔•盖茨会成为当今的首富？吸引定律的研究人员认为，一切皆因这个定律而起。财富、健康、家庭、事业、爱情，那些求之不得的东西，尝试转变一下思维，或者便有不错的结果。一切的一切，信不信由你。"},{"instruction":"帮我写出关于《B夫人》的内容简介，主要包括该片的主要背景及内容等等，不要过多剧透，目的是能吸引读者的观看兴趣。如果该片曾获任何殊荣，也请简要介绍。","output":"裴姐十年前从朝鲜偷渡到中国打工，却被蛇头卖到山东农村，成为庄稼人老陈的妻子。老陈一家敦实善良，裴姐渐渐放弃了逃跑的念头，但还是日夜牵挂两个仍在朝鲜的儿子。为了把他们偷渡到韩国，裴姐也成了一名蛇头，并在几年后踏上危险重重的赴韩之路，终于和远方的孩子团聚。然而，首尔的新生活 远非她所料，韩国情报局竟然指控她为朝鲜特务……本片入选2016年戛纳电影节独立电影传播协会单元(ACID)和韩国全州电影节主竞赛单元，荣获第38届莫斯科电影节、第12届苏黎士电影节最佳纪录片奖。"},{"instruction":"你能帮我写一段《英格丽·褒曼口述实录》的内容简介吗，风格参考其他豆瓣纪录片的介绍。","output":"Through never-before-seen private footage, notes, letters, diaries and interviews with her children and former colleagues, INGRID BERGMAN – IN HER OWN WORDS presents a personal portrait and captivating look behind the scenes of the remarkable life of a young Swedish girl who became one of the most beloved and celebrated actresses of American cinema."},{"instruction":"帮我写出关于《人体奥妙之细胞的暗战》的内容简介，主要包括该片的主要背景及内容等等，不要过多剧透，目的是能吸引读者的观看兴趣。","output":"这是一个关于人类细胞与腺病毒争夺我们DNA控制权并持续了数亿年的战争故事。取材于对细胞的最新发现，纪录片将我们带入人类细胞绚丽的内部世界。 在细胞可视化的世界级专家，分子生物学家和好莱坞电脑三维动画设计师的帮助下，观众将在最新发现的，宛如外星世界的细胞内部体验一次科学的电影旅程。Production Companies:Wide-Eyed Entertainment DistributorsBritish Broadcasting Corporation (BBC) (2012) (UK) (TV)Special Effects:Intelligent Creatures (visual effects)"},{"instruction":"你能帮我写一段《给我危险》的内容简介吗，风格参考其他豆瓣纪录片的介绍。","output":"傀儡乐队(The Stooges)起源于反文化运动时期的密歇根州安娜堡市，他们的摇滚乐强大又极具侵略性，如一枚炸弹般投向了20世纪60年代末的音乐界。他们用融合了摇滚、蓝调、R&B和自由爵士的音乐对观众狂轰乱炸，为接下来几十年中朋克和另类摇滚乐的出现埋下了“因”。吉姆·贾木许的新片《给我危险》记载了傀儡乐队——历史上最伟大的摇滚乐团之一的故事。《给我危险》呈现了傀儡乐队出现时的大环境，包括音乐、文化、政治、历史等方面。影片还讲述了他们所经历的冒险与不幸，记录了他们的灵感来源以及最初商业挑战背后的初衷，当然还有他们对后世产生的长远影响。"},{"instruction":"我是一个为豆瓣电影页面写内容简介的工作人员，你能帮我写一段《明天》的内容简介吗？像豆瓣上其他纪录片那样","output":"《希魔撞正殺人狂》女主角美蘭妮羅倫今次不做地下戰士，轉做地球鬥士拯救世界。懷胎十月期間知道地球即將缺水缺油缺食物，人類可能於本世紀內滅絕，她便聯同其他有兒有女的電影人，走訪全球各地，探索各種可行並進行中的環保好橋，食物、能源、交通、政制、金融、教育、廢物處理等全方位追蹤。不是這邊喊完絕望真相，那邊回家狂開電器的過氣政客，美蘭妮找到的環保絕橋，你的電視新聞不會報道，擔保多數你都未聽過。等得十年，等不到百年，自己地球自己救。凱撒獎最佳紀錄片。"},{"instruction":"帮我写出关于《三船敏郎：最后的武士》的内容简介，主要包括该片的主要背景及内容等等，不要过多剧透，目的是能吸引读者的观看兴趣。","output":"三船敏郎， 日本最偉大的演員之一， 曾參與近一百七十部電影演出，包括《蜘蛛巢城》、《七武士》、《羅生門》等。他與黑澤明共同締造了日本電影的黃金年代，更走紅國際，影響《荒野大飆客》、甚至是《星際大戰》黑武士的誕生。他叱吒影壇半世紀，被亞蘭德倫視為神一般的存在。本片以他和黑澤明的合作關係為主軸，耙梳介紹了日本電影的黃金年代，以及劍鬥片的歷史。影片融合大量的經典影片及珍貴照片，穿插訪問役所廣司、香川京子、馬丁史柯西斯、史蒂芬史匹柏等人，資深演員如八千草薰、野上照代、中島貞夫，以及被三船殺了上百次的武術演員紛紛現身說法，追憶這位明星不同時期的風采，甚至試圖還原當年他與黑澤明拆夥的真相。曾演出武士電影的基努李維亦為本片獻聲，致敬意味濃厚。"},{"instruction":"为《杰出公民》写一篇以“杀死那个萨拉斯人”为题的豆瓣影评","output":"## 杀死那个萨拉斯人《杰出公民》是一部一黑到底的电影，所有角色无一幸免，通通在导演的镜头下，成为被讽刺的对象。片中，没有人可以站在光明处俯视黑暗，相反，大家都站在灰色地带，表演着人性中的弱点。看这样一部电影，会不会很压抑？一点也不会。因为影片始终以一种自嘲的姿态在自我解构，而自嘲的本质是“我知道自己的德性，但无力改变”，这样反倒诚实出了一种可爱，让人不忍心苛责。影片讲述了一个诺贝尔文学奖获得者，荣归故里，却在故乡遭遇了种种尴尬，最后还险些丧命。看的过程中，我就一直在想，如果莫言回到老家高密东北乡，会不会经历同样的窘境？想来多少还是会的。那是一种必然要面对的由落差形成的鸿沟。当你从诗和远方抽身出来，回到穷乡僻壤，却发现自己早已成了异乡人。就像莫言在书中写的那样，“认识自己故乡的办法是离开它。”离开，让你拥有了一种跳脱出来的视角，并从一个更广阔的世界里，找到了故乡的坐标。原来，它不过是一个你恰好出生的地方，仅此而已。回乡的艰难之处，从来都不是身体上的，而是心理上的。就像影片中的主人公丹尼尔，时隔四十年后，他重新回到故乡——一座名叫萨拉斯的阿根廷小镇。在这四十年间，丹尼尔住在巴塞罗那，写着故乡的人和事，被众人敬仰；也是这四十年，故乡萨拉斯却像被时间封住了一样，并没有太多的变化。落满灰尘的道路，还是原来的样子；午后的人们，依旧坐在门前发呆；小摊位上，照例卖着过时的衣帽和玩具；斑驳的墙壁上，满是油漆的涂鸦…“一切都没有变”，有时，真不知该感到欣慰还是悲伤。为了欢迎丹尼尔的到来，萨拉斯小镇动用了他们能够想到的“最高规格”。镇长亲自迎接，消防队员开道，选美小姐陪同，丹尼尔站上消防车，穿过小镇，接受众人的审视。在能够容纳50人的礼堂里，挤了上百人，屏幕上播放着PPT风格的短片，回顾了丹尼尔的生平，彩带、掌声、金闪闪的奖牌，一切桥段都像是村里的表彰大会……虽然眼前的一切，都被“故乡”二字粉饰得一片祥和，但却依然无法掩盖背后的文化落差与时空错位的尴尬。这根本是两个世界的人因为“故乡”的一次短暂的相遇。萨拉斯的“最高规格”，其实连另一个世界的底线，都够不上。不管怎样，丹尼尔还是忍不住落泪了，他举起“杰出公民”的奖牌说：“某种意义上，这比诺贝尔奖更加重要。”为了这次回乡，叛逆不羁的他，卸下了所有的防备。曾经拒绝的行为，在这里都变得可以接受：可以拥抱、可以拍照、可以接受采访、可以出席无聊的活动……他坚持走路，不用车接车送，因为走在故乡的土地上，让他觉得踏实。可是，慢慢我们会看到，丹尼尔对故乡的忍让，换来的却是故乡对他变本加厉地“敲诈”：在电视台接受采访时，主持人问着无关痛痒的问题，对丹尼尔的回答也毫不关心，最后我们知道，这次采访纯粹是为饮料做广告。一个小胖哥找到了丹尼尔，固执地以为自己的父亲就是小说中的原型，并以此要挟丹尼尔到家里做客。一位父亲带着瘫痪的儿子来找丹尼尔，让他为自己的儿子买下一台价格不菲的电动轮椅，还认为理所当然。一个迷妹来到丹尼尔的酒店，自愿献身，实际是为了让他带自己逃离小镇，去大城市生活。镇长的热情款待，不过是利用丹尼尔的知名度为自己的政治生涯背书，在他眼里，艺术不过是随时可以为政治牺牲的筹码。……如此种种，小镇上的每个人都在用自己的眼睛，盯着丹尼尔身后的光环上可以惠及自己的部分。这一切从一开始就与文学无关，与艺术无关。就像是接丹尼尔回乡的那个胖司机，汽车爆胎，被困荒野，丹尼尔为难地拿自己写的书来生火，而胖司机却可以毫不犹豫地撕下书页，当作卫生纸。比起生存来，文学对这里的人民没有任何意义，虽然这些文字里记录的，是他们的生存。影片通过两个段落来凸显了两个世界之间的无法沟通。第一个段落。丹尼尔在萨拉斯的三天里，做了三次讲座。第一次，人满为患，大家抱着看熊猫一样的心情，要来听听这个名人会带来什么新世界的资讯；到了第二次，人已经少了一半，艺术家协会的会长冲进来，散发印着丹尼尔小说片段的传单：“大家看看，这个人就是通过诋毁自己的故乡，来讨好整个欧洲”；到了第三次，整个讲座现场只剩下了5人。而在会场外，散落着辱骂丹尼尔的传单，刚刚为丹尼尔立起的雕像上，也被红油漆画了一个大大的叉。第二个段落。小镇举办了一次绘画比赛，邀请丹尼尔做评委。而在颁奖的现场，丹尼尔却发现自己选出的画作已被替换成了三个关系户的作品。他感到非常气愤，抢过镇长的话筒，慷慨陈词：“在非洲的一些原始部落根本没有‘自由’这个词，因为他们本身就是自由的。而在这里，‘文化’天天被政府挂在嘴上，恰恰说明这里是文化的沙漠。”结果怎么样呢？丹尼尔得到的只是“叛徒、走狗”的辱骂和纷纷飞来的臭鸡蛋。这和影片开始时，丹尼尔在诺贝尔颁奖典礼上的讲话，形成了巧妙的互文关系。面对着瑞典皇室、评委和台下满满的观众，一向桀骜的丹尼尔说道：“我感到非常遗憾，身为一名艺术家而接受这样的册封。它说明了我的作品符合评审和国王的口味，却与艺术本身无关。不过我还是心存感激，感激他们宣告了我创作生涯的终结。”同样是面对公众，同样是不合时宜的言论。区别在于，在一个更文明的社会，即使大家听不懂甚至极力反对，也都会献上礼貌或虚伪的掌声；而在萨拉斯，丹尼尔却狼狈地如丧家犬一般，只得从后门惶惶而逃。“我们之间唯一的共同点，就是我们出生在同一个地方。”这句话是丹尼尔说给那个固执地把父亲当做小说原型的胖子的，而现在，终于可以说给萨拉斯的所有人了。将丹尼尔从高高在上的神坛拖入万劫不复的深渊，这个名叫萨拉斯的小镇只用了3天的时间。好戏还在后面。丹尼尔遇见了初恋情人艾琳，此时她已嫁给了自己儿时的好友安东尼奥。就在安东尼奥故意在丹尼尔面前狂吻艾琳，以完成内心卑微的炫耀与报复时，丹尼尔发现，他之前睡过的迷妹，竟是安东尼奥与艾琳的女儿。终于，故事不可避免地走向了结局。还记得刚到萨拉斯时，天色正好，丹尼尔站在消防车上穿过小镇，接受众人敬仰的注视；而此刻，快要离开时，他站上了安东尼奥的车再次穿过小镇，道路两旁站着固执的胖子、艺术家协会的会长、的镇长……人还是一样的人，只是眼神中已充满了敌意。丹尼尔站在车上，穿过交警守护的街道，如游街一般接受着众人的审判。车子驶到荒野，丹尼尔向黑暗的更深处跑去，背后是安东尼奥和迷妹的男友举着猎枪，代表整座小镇向这个叛徒施以最终的刑罚。镜头中，绿色的夜视镜里，红色的准星在丹尼尔的身边游移。一枪、两枪、三枪……“砰！”丹尼尔应声倒地，在夹杂着荒草和泥土味道的空气里，他嗅到了坟墓的气息。如果影片到这里结束，怎么能算一黑到底？在影片的最后，新书发布会的现场，丹尼尔带着自己的新书出现在媒体面前，那本新书名叫《杰出公民》，记录的正是他在故乡的遭遇。此时的丹尼尔，一扫重游故乡时的颓废，显得神采奕奕。面对记者关于“小说是真实还是虚构”的提问，丹尼尔扯开上衣，露出一道伤疤，反问记者：“看看这道伤疤，它可能是手术造成的，也可能是骑自行车摔倒造成的，或者是枪伤，你觉得呢？这世界上没有真相，所谓真相，只是一种用来左右他人的诠释而已。”那一刻，这个受害者的动机，突然变得值得怀疑：或许，他的回乡，只是为了找回丢失了5年的灵感，而对故乡进行的最后一次消费；又或许，他根本没有回过故乡，这一切，都是他满怀着优越感与虚荣心的臆想。正如他自己说的：“创作，有三样东西必不可少：纸、笔，还有虚荣心。”最终，在媒体闪光灯的轰炸下，丹尼尔坐在文明的世界，享受着创作带来的所有荣光，露出了志得意满的笑容。注意，他此刻的笑容和诺贝尔颁奖礼上的笑容，是一样的，而且两处的配乐也是一样的，曲调激昂，如同站上了人生的巅峰。或许，这所有的一切，都只是一个自命清高的知识分子的作秀，而沉默的故乡和庄严的领奖台，都是他博得掌声的秀场。穷乡僻壤出刁民，这或许没错；可是，谁能保证，在诗意的远方，就不会出现优越感爆棚的装逼犯呢？这个开放性的结局，如同一记耳光，扇在了所有人的脸上。我至今仍不能清楚地说出，那是一种什么样的滋味。我只是不断想起影片中的一个画面：一只死去的火烈鸟，躺倒在池塘中，如同一块正在融化的玫瑰香皂。没人知道，这只喜好群居的鸟，怎么会孤零零地客死他乡。或许，它被故乡的同类，残忍地放逐了；或许，它只是佯装死去，然后摇身一变，过上了原来的同类所无法理解的另一种生活。"},{"instruction":"我喜欢《孩子王》这部电影，请帮我写一篇影评。","output":"## 山火煎木，爆烈有声无论是《夏洛特烦恼》里的穿越幻想，还是《老师好》、《一个都不能少》里的大病初愈，亦或是《麻辣鲜师》《大师兄》中的暴烈有声，甚至是与之最有渊源的《驴得水》中的明指暗喻——在看这部片子之前，我都以为，《孩子王》会和我以往接触过的校园片中的叙事空间与叙事详略没多大不同，无非就是讲一讲老师和学生们的情感纠葛啦，老师帮学生解决解决青春期的心理问题啦，老师和学生们站在一起对抗外敌发光发亮啦巴拉巴拉。然而，让我没有想到的是，这是一个如此真实质朴的电影。于是乎，我才反应过来：原来学校不是为了打架堕胎的，是为了上课的。原来青春除了激情，还有读书呢。遥远的画幅，喑哑的色语，诡谲的歌吼，无尽反复的谣，夜里的火光，老杆的眼睛——这些就是阴森恐怖的一个世代，就是以黑色双眼寻求光明的一代人。或许不止。大量的课堂内容的拍摄与描绘，打破了我对“校园”片子的固有印象。尽管教室的组成只有百十斤的破茅草与几根圆木，但看在孩子们的面子上，在这里我还是要称呼这部片子为“校园片”。1之前看了许多的校园剧，当然，准确来说是：青春校园剧。这些影片的重点实际上是青春，校园只是一个作为空间环境的背景墙罢了，影片制作团队更多的是把目光放在了形形色色的老师们帮助形形色色的孩子们解决形形色色的青春期问题的部分上——总之，是形形的，是色色的。然而，我作为一个当年用功读书的好学生，现在自诩不错的人民教师，总感觉这些青春校园影片哪里不对劲。我想了好几秒钟方才醒悟，老师们在学校里最多的时间是在备课与上课啊，学生们在学校里最多的时间是在上课与写作业啊——而这些千篇一律、不停重复的机械活动，才恰恰是校园生活中占比最为重要的部分——而不是泡妞、打架、撕逼——即便有一些有趣的事情，在我的生活记忆中，其中的一大半也出现在课堂上，尤其是语文课上，可能是我最喜欢语文课吧。那为什么现在的编剧们没有在这最为重要的环节中找到足以描绘的创作空间与创作灵感呢？可能他们没有当过老师或者学生？或者他们当时的学生时代就是拿着砍刀叼着烟一路砍过来的？也或者他们都是受害者，被什么东西局限了自己的思维？就像本片中那些被给到特写的木头一样，非得等一把火来烧一烧，才能发点儿光亮出来吧。上课有什么好说的？上课在这里还是被讲的挺有意思的。知青老杆不放牛了，知青老杆来当语文老师了。老师老杆不照书上面教了，老师老杆被学生王福质疑了，老师老杆被学生接受了，老师老杆和学生王福打赌了，老师老杆送学生王福字典了，老杆因为不按照主旋律去教学生阶级斗争课文而被上面批评了，抵制了，遣返了。于是乎，老杆下课了。没有生生恋，也没有师生恋，没有争风吃醋，没有课下械斗，没有背后心酸，有的就是那间破草房，那樽破树桩，那些看得懂又看不太懂的课文，那些记得住又偶尔会错的生字，还有那时蓝时绿的黑板，那时灰时红的青天，那时而发愣时而傻笑的憨憨老师老杆。就凭这些给教室、给课堂的镜头，这部片子就注定不能与其他的影片平起平坐了，更毋论是胶片上被划下的一道道凝重的伤疤。顾氏兄弟所获得的奖项早已足够为他们正名，至于陈凯歌老大爷，当时求仁，而无人以之为仁，不拍《无极》，他又能去哪里呢？相信艺术史会给他一个公正的定位的。男人可能是一种热爱争斗、热衷权术、在心底里保留有对政治高度兴趣的一种灵长生命体，《教父》也因为讲述这个概念而成了一些女性眼中无法理解的、让人仰止的伟大电影，在这里我也不多说题外话了。说回男人，那么，男人，尤其是被《史记》与《资治通鉴》从小熏到大的中国男人们，看什么东西都善于发掘其中的政治味道。当一部片子，加上“文革”、“知青”、“生产队”、“思想统一”等敏感词汇的时候，那这就不单纯是一部电影了，而外挂了一种政治批判宣言性质的小插件。2“从前有座山，山里有座庙，庙里有个老和尚讲故事，讲的什么呢？”遥远的画幅，喑哑的色语，诡谲的歌吼，无尽反复的谣，夜里的火光，老杆的眼睛——这些就是阴森恐怖的一个世代，就是以黑色双眼寻求光明的一代人。这个奇异的歌谣，念起来的话，就会如同中国政治一样，成为一个无法脱离的死循环。不管你我认不认可，三山五岳间的政权更迭总是在轮回与重复。一个朝代，多则两三百年，少则几十年，就由统一、中兴、富强有为，再到问题频出、面临崩溃瓦解。政治是这样的，那么，在政治主导下的其他，也是这样的，只不过有的相对延迟或滞后，有的相对稳定或活泼而已。太多的时代，我没有或者经历过，或者是书本，或者是他人之口，我的头脑告诉我，这些信息较为可靠，我也就信了。但是越近的历史，越为真切——尤其是我活过的历史，历历在目，史史入心。让我压抑与讶异的地方就在这里了——原来，那个时候学语文，是这样；陈凯歌拍摄此片的时候，学语文，也是这样；我小的时候，那是911发生的时候，我学语文，也是这样；现在，我来教孩子们，教案上面规定的讲法，也还是这样。老杆说了些读书人的话，背着行李滚蛋了，我不按照教案讲的话，估计我也要转行了。不信你看，文学院里，这样的事，正在发生。老杆这次来教书，是带着刀来的。明晃晃的刀刃摆在桌子上，引得女老师侧目。黑子问，要杀人啊？老杆不是要杀人，而是要剜心，给枯萎腐朽的抄书式教育动个手术。但最后老杆走了，他之前也为自己埋下了伏笔——闹是没有好下场的，即便如此，他还是大闹了一番。留在老树根上的话也不知道王福会不会遵循。但至少这把山火，是烧过的，这把刀，是出过鞘的。在授课的这个过程中，老杆说了很多话，写作文抄报纸的机械重复、学课文的固定套路、同一领导下的一丘之貉、在当时已然是伤痕烙印，现在看来，几乎又是旧伤口的借尸还魂。女班长的机械记忆，王福的斗争下的自我保护，来娣老师梦碎的尖嘶，这样的伤口，这样的被反复撕裂，然后再负起伤痕，请问，还要再持续多少代人？没人能给出回答，不论是通行证上的卑鄙道貌，还是墓碑上的荒葛罥涂。这就是属于燕赵之南苍梧之北的永世轮回。3“大伙儿闷得慌，打我一顿解解闷儿，挺好。”文革时有人闷得发慌，老师于是就挨了揍。现在隔离太久，嘴巴不能絮叨，也有人闷了，有的老师也要挨揍了。古之师，圣以尊严，待以先达；今之师，疲之以大会小会，挑之以甲等乙等，束之以长规短矩，待之若绳墨械具。如是，何以为师？然而，罪不在芸芸草芥，祸不起云远庭边。言多乎？不多矣。牛爱咸，有尿就听话。老杆如是表述道。现在的年轻人也越来越有尿了。牛爱咸尿，人亦爱财，牧牛者遗之以溺，则牛虽生性倔强，也变得听话起来；而有很多时候，吃肉的人还没有放牛的人聪明——或者说是诚恳。老杆说，生活就是活着，活，就得吃就得喝，所以左边三点水，右边舌头。可是舌头不只是吃饭的，还是为了说话的。王福的父亲——那一代人，他们哑了，他们无法说话，王福读书，为了帮他们说话，老杆教书，其意义就在于此——教下一个时代的孩子们，怎么去用自己的情感发声。而不是抄。老杆让孩子们写作文，告诉他们不要抄报纸，要自己写，总会有写得多、写得好的一天。但依照现在的情况来看，我想，老杆实在是个乐观主义者了。会抽烟的老杆蹲在地上，头也不回，拒绝了吴干事的假模假样。深夜中谒见老杆的那头驴，它扔下的磨独自沉留在荒芜的原野，老杆上去又下来，回头看时，四面八方都是一桩一桩惊悚的木头人，只有那只眼睛穿过破帽透视开来——黑色的它在黑夜中寻找着光明。"},{"instruction":"为《贝克斯》写一篇以“就凭这两场激情戏，这剧要火”为题的豆瓣影评，约1100字。","output":"## 就凭这两场激情戏，这剧要火最近还有一部冷门佳片，迫不及待地想推荐给大家——《贝克斯》Becks这是一部音乐电影，里面穿插的歌都很好听，豆瓣评分6.3分。女主角Becks是一个搞音乐的姬佬，和女朋友在纽约音乐圈打拼。女友因为一个偶然的机遇飞往洛杉矶，小别之后竟然当场被Becks抓到出轨。分手后的Becks心灰意冷，从纽约回到从小长大的小镇疗伤度日。Becks的妈妈曾经是个修女，思想很保守，对于Becks的性取向她大概花了小半辈子才理解过来吧。小镇的日子过得很慢，让人觉得惬意，但好像又缺少了点什么。百无聊赖的Becks去高中同学开的酒吧玩，同学提议她在酒吧驻唱赚点小费。唱歌可是Becks的拿手好戏，没过几天就拥有了一大波粉丝，其中包括Elyse。Elyse家境富裕，贵族学校毕业，住大大的house，标准的白富美了。Elyse和闺蜜们觉得Becks很有趣，对她的姬佬身份也充满了好奇。她们担心Becks找不到同类，特意安排了一场“超级委婉的姬佬配对”，一个爷T。很明显，两人都不是对方的菜，于是爷T带着Becks去拉拉酒吧High。风流又会撩的Becks很快勾搭上了一个小姐姐。我们的女主Becks就是这样一个会唱会撩的音乐女青年，单纯的白富美Elyse注定羊入虎口。在酒吧看Becks弹唱，尽管丈夫就在身边，那一瞬间她的眼里却只有Becks。她向Becks学习吉他，在音乐的流淌中越陷越深。这部电影看似讲的是一个很文艺的爱情故事，但完全不妨碍它拍出了两场姬情四射的激情戏。第一场是在一次成功的同台表演后，Becks激动地亲吻了Elyse，Elyse情不自禁回应。隔着屏幕都能感受到两人压抑已久的激烈的情感和欲望。其实应该有开船吧，现在的年轻人呀，好会玩。第二场在Becks的家里，这场简直惊心动魄。Becks提议玩点新鲜的，却被推门而入的老妈撞见。这就尴尬了。希望大家切记锁好门，有效避免此类事件的发生。老妈对Becks的人妻行径很生气，母女俩的矛盾迅速升级，Becks决定回纽约。Becks哭着问Elyse，你愿意跟我走吗？Elyse以吻回应，答应了她。第二天清晨，Becks按照约定，开车来接Elyse。透过车窗，她看到Elyse拥抱送别去上班的丈夫。那一刻，她觉得自己不能破坏Elyse稳定安逸的生活。Becks一边流泪一边启动车子，开往纽约的方向。身后清晨的小镇，Elyse独自坐在门口，身边放着打包好的行李，等着Becks来接她。意识到Becks不会来了，Elyse流下了眼泪。那个唱歌好听放荡不羁的的音乐女青年，和单纯乖巧的小镇姑娘终究不是一路人啊。— END —"},{"instruction":"我喜欢《真人快打传奇：天下之战》这部电影，请帮我写一篇豆瓣今日观影分享。","output":"## 刘康上位拯救全宇宙——《真人快打传奇：天下之战》今天聊聊电影《真人快打传奇：天下之战》。片名Mortal Kombat Legends: Battle of the Realms (2021)，别名真人快打传奇：域界之战。华纳这部限制级动画电影《真人快打传奇：天下之战》剧情紧接着上一部《真人快打传奇：蝎子的复仇》（Mortal Kombat Legends: Scorpions Revenge ，2020）。蝎子在解决个人问题之后，退居二线，这次由刘康挑起大梁，解决邪恶反派独一者（the One Being）。我看了这么多真人快打的动漫和真人电影，绝大部分作品的主角都是该游戏公司Midway的亲儿子蝎子。做主角无可厚非，这就是亲儿子的待遇，但粉丝们也希望能够看到更多非蝎子担任主角的作品。这次《真人快打传奇：天下之战》就安排上了，由另一位人气角色刘康担任C位，拯救了多个宇宙，挽救无数生灵。独一者作为终极Boss来头可不小，按照设定，他是真人快打世界里所有宇宙的祖先，所有宇宙指的是包括地界（Earthrealm）、内界（Netherrealm）、外域（Outworld）、秩序界（Orderrealm）、混沌界（Chaosrealm）、伊甸园（Edenia）和所有其他较小宇宙的全体。根据古老传说，在最初的时间里，只有一位独一者和若干长老神。独一者以长老神为食，长老神们则联合起来最终击败了独一者。为了削弱独一者的力量，长老神将独一者一分为六，分别存放到了不同宇宙。传说只要有人能够凑齐独一者的六块碎片，就能获得独一者的终极力量。《真人快打传奇：天下之战》一开始还是围绕雷电大人和邵康（Shao Kahn）争夺地球展开。雷电大人和邵康找到长老神裁决，相约举办最后一次真人快打决斗，胜者统治所有宇宙。雷电大人认为这样可以一劳永逸地解决邵康入侵。为了增加地球一方的胜算，雷电大人主动舍弃自己的神性，以普通战士身份参加决斗。玩过《真人快打》的玩家都知道，雷电大人的主要战斗动作都是围绕放电展开。舍弃神性大概就意味着无法放出闪电，就像战斗中只能靠简单拳脚，这让雷电实力大减。《真人快打传奇：天下之战》主要以《真人快打X》为设计基础。比如约翰·凯奇（Johnny Cage）的服饰就是以十代造型为基础。约翰·凯奇的人设也延续了话痨好色自大等特征。他的招牌动作就是猴子偷桃，他在全片中的战斗时间没多长，但一上场就被人锤爆了蛋蛋。类似的还有空老，他的招牌动作是把人撕成左右两半，他在片中也这样被别人撕成了两半。吐槽达人约翰·凯奇，猜猜这句话cue的谁？花开两朵，各表一枝。就在雷电大人率队对阵邵康之时，蝎子、绝对零度又杠上了。上一部电影中蝎子找绝对零度完成复仇。这一部电影中，绝对零度的弟弟继承了哥哥衣钵，开始找蝎子报仇。他的亲密队友被改装成了三体人（Triborg），实力大增却也性情大变。蝎子体内有解开独一者最后一块碎片的关键钥匙，蝎子也意识到放出独一者将后患无穷。于是蝎子开始联合绝对零度，试图共同阻止独一者。斯诺克（Shinnok）则悄咪咪地完成了独一者的六块碎片收集，至此剧情并入主线。雷电大人这边的战斗十分惨烈，影片中以露骨的镜头表现各位角色的终结技。这里的露骨可不是形容词，而是实实在在的露出了骨头。真人快打决斗战况惨烈，双方死伤无数，失去神力的雷电大人也不再无敌。古有武松独臂擒方腊，今有刘康独臂战邵康。双方战到最后一人，刘康成为地球方最后的希望。刘康亲眼目睹师兄空老（Kung Lao）、雷电大人惨死，被激发出无限潜力，体内真龙再也无法掩饰，一跃成为全片最靓的仔。刘康成为真人快打决斗的最终胜利者，也成了阻止独一者的关键。一场大战将全片推向最高潮。如果后续作品延续本片剧情设定，不知道刘康是否可以就此上位，通过神性觉醒，成为地球方的领袖呢。失去主角地位的蝎子，在支线剧情中，戏份依旧吃重。而且他的标志性台词必不可少，总有机会来一梭子。刘康负责全片carry，蝎子带着绝对零度负责打辅助。两位主角联手，自然能够将独一者拿下。说几条影片花絮。1.基塔纳（Kitana）的配音女演员原本采用《真人快打X》中的配音演员格雷·格里芬（Grey Griffin）。但格雷·格里芬由于怀着第二个孩子而退出，配音演员换成了凯伦·斯特拉斯曼（Karen Strassman）。2.配音演员马修·杨金（Matthew Yang King）在《真人快打11》中为刘康和风神（Fujin）配音，也在本片中为空老配音。如果你看过《真人快打传奇：蝎子的复仇》一定会对片中凌厉的动作、满屏的血浆印象深刻，片中对各个角色终结技也有较为忠实地还原。可以说影片获得好评无数。不过这部续作却没有完全继承前作的血腥优点，而是将重心转移到更大层面的叙事，对角色动作和终结技表现有较大弱化。引入漫画中的设定独一者，本片信息量较大，关注点不在动作和终结技也引起了部分观众的抗议。虚晃一枪唤出独一者，刘康上位拯救全宇宙。"},{"instruction":"我喜欢《忍之国》这部电影，请帮我写一篇影评。","output":"## 忍者之国没有人万万没想到，《忍之国》首先是一部粉丝电影。印象中，上影节时《忍之国》和《昼颜》一样一票难求，你永远无法想象迷妹们的花痴心理有多狂热。然而《昼颜》电影版之所以火爆是因为剧版在先，而《忍之国》或许要归功于大野智的超级人气。作为日本人气组合“岚”的队长兼主唱，大野智在音乐领域成绩颇为显著，所在的“岚”组合唱片总销量超3000万张，音乐DVD销量位居日本历代第一，创下日本公信榜歌手部门销售额年度冠军获得次数最多的纪录。其他四名成员樱井翔、相叶雅纪、二宫和也、松本润也多为国内观众所熟知。唱而优则演，2008年首次正式主演日剧《魔王》，大野智就拿了个年度日剧大赏最佳男主角，中田秀夫说他“拥有天生演技才能”，说白了就是老天爷赏饭吃。被迷妹包围的大野智，也有诸如菅田将晖、小栗旬这样的明星迷弟。再加上国内人气女优石原里美，《忍之国》大概就是一个男女粉丝通吃的局。而在《俺物语》、《变态假面》中总给人感觉粗线条又夹杂怪趣味的铃木亮平，《哭声》中细思极恐的日本大叔国村隼，一股脑装进了一个名为“时代剧”的匣子，搅拌出了混沌、跨越、怪诞、奇趣的不一画风。《忍之国》其次才是中村义洋的作品。年年都有中村义洋的电影，精力充沛的中村义洋倒是很玩得开，喜剧、悬疑、惊悚、恐怖、犯罪等类型全都玩一遍，去年《残秽，不可以住的房间》恐怖阴影还未散去，今年《忍之国》就燃起了战国硝烟。《忍之国》改编自和田龙的小说《忍者之国》，讲述了日本战国时期伊贺忍者抵抗织田信长入侵的故事。乍一看，这个故事仿佛充满了热血、激昂和民族情绪。强弱悬殊，差距明显，明明历史命运早已注定，偏偏要进行殊死一战，弱者反抗强权，底层揭竿而起，伊贺的忍者不好惹。如果继续先入为主下去，《忍之国》会有恢弘悲壮的战争戏，会有慷慨激昂的英雄主义，或许还会有惊心动魄的最后一分钟营救。但事实上，中村义洋在前半段就用中二的画风打住了这么严肃的构想，似乎预示着，这一切不过只是一出闹剧。《忍之国》的忍者完全打破了我们对忍者的常规想象，神秘、冷酷、多变、灵动，一袭黑衣裹挟，只露出死神一般的眼睛，捏一个咒语，就化为一道烟雾遁去。到了《忍之国》，则变成了杂耍、乱斗、嬉闹、丑态。他们身处一个国家，却互相残杀，每天进行着毫无意义的决斗，这些决斗一点都不酷。在那一场与织田信雄的战争中，中村义洋巧妙地用长镜头扫过了忍者们各显神通的场景，他们有的施放暗器，有的翻着跟头，有的荡着绳索，享受着杂耍表演的快感。战争分明就是一个舞台，让小丑们粉墨登场，时而有秒杀敌人的骄傲，瞬间又怂得四处乱窜。不得不说，用中二风拍战争戏看得倒是欢乐多多，趣味十足。有趣，好玩，颠覆，这是《忍之国》给人的初始印象。然而影片很快就推翻了这种印象，《忍之国》表面呈现出的是娱乐性和观赏性，内里传达的却是批判性和残酷性，这也是影片真正值得讨论的地方，否则仅仅只是满足粉丝的心理需求就没什么意义了。在我看来，《忍之国》真正要表现的是“人”，是何为人？何为真正的人？前者是生物学意义上的人，后者则是精神、思想、灵魂真正集于一体的人。显然，忍者之国没有人。这也是铃木亮平饰演的下山平兵卫叛逃的原因，弟弟的死让他看清了周围忍者的丑陋面貌：父亲对儿子的死毫不关心，长老们为控制群众不择手段，下忍们只有对金钱无尽的欲望。他们算得上真正的人吗？虎狼之族，不过是一群嗜血的野兽，毫无人性，更无道德可言。他们会因为没有工钱纷纷逃难，又会因为巨额奖金加入战斗，他们会因为短暂的利益与其他人结为伙伴，又会在利益消失后倒戈相向。没有立场，钱就是立场，他们永远站在钱的那一边，不死不休。非人！下山平兵卫愤怒的骂道，但他骂不醒已经死掉的灵魂。他的觉醒，是作为人的觉醒，因此即使是死，也死得有人的尊严。生而为人，为人而死。而那些麻木、冷漠、自私、狭隘、狡黠、贪婪、无信的忍者们，他们体内流淌着非人之血，生命如草芥，他人即地狱。中村义洋由浅入深地黑了一把非人的忍者，顺带着，用一个短短几秒的叠加镜头将忍者与现代人关联起来，恍惚间他们就是过去之人的转世。全靠欲望维持的短暂集体秩序，终将在统一大潮中土崩瓦解，然而忍者之国已灭，非人之血不息。如果说影片用伊贺忍者代表“非人”，那么大野智饰演的无门则代表了“人”，而无门真正成为“人”是经历了一个由血铺就的过程，这个过程由启蒙、领悟、觉醒三个阶段构成。在影片中，无门是伊贺第一忍者，几乎是无敌和无解的主角光环，但他与英雄一点都不沾边。他也无心当出头的英雄，他是懒散的、无谓的、混沌的最平庸的普通人，他也同其他忍者一样，为钱而战，不同的是，他为钱的更深一层的目的是为了他的妻子——石原里美饰演的阿国。而阿国居然是无门从他国拐来的，他只有达到妻子要求的巨额要求才能与她结婚。无门对阿国言听计从，他的生活动力完全来自阿国的敦促和教导。如果延伸一下解读的话，这一时期的无门分明就是婴儿的状态，混沌、无知、尚未成型，没有自我认知，而阿国则扮演的是母亲的角色，开导和引领着无门迈出去，充满母性的光辉。伊势公主的血成了浇筑无门为人的第一滴血，因为她把无门当作“人”来对待。她相信他能替她报父仇，然而当时的无门只是为了“小茄子”（宝藏）顺口答应，根本没有要真的履行承诺。伊势公主自尽后，无门第一次感到一丝茫然和不知所措，他的脸上写满了迷惑和不解，“你懂了吗？”他开始对自我身份感到怀疑和动摇，这已经是成为人的第一步了。然后是下山平兵卫，在那场“川”字对决中，下山平兵卫说出了自己的愤怒，也坚守着自己的底线。有趣的是，开头无门与下山平兵卫的弟弟也有一场决斗，只是如今神情不再那么轻松。下山平兵卫死了，生而为人而死，他教会了无门作为人的尊严和勇气。这一次，无门放了织田信雄。终于到了最后一步，阿国死了。她的死成为了无门彻底觉醒的钥匙，她教会了无门，人是有爱的。也由此为无门命名，这也是为什么阿国最后问无门，“你的真实名字是什么？”名字作为人的重要标识，而此前无门一直是“无名”状态。终于，无门离开了这个非人的世界，他望着那一群愚昧的忍者，轻轻吐出四个字，“尔等，非人。”最后只留下孤独的背影。就像是一场无门的成人仪式，只不过用了三个阶段。当然，像很多电影一样，再黑暗、绝望、无奈的结局总会留有一线阳光，小老鼠跟着无门生活，他代表了希望和新生，他是“人”的延续。"},{"instruction":"能帮我写一篇《袭击》的影评吗？","output":"当然可以！以下是一篇关于《袭击》的影评：## 反腐反到“一国首相”，印度真是啥都敢拍！近几年，印度电影的“尺度”越来越大。不仅敢于聚焦社会敏感问题，更是不断地揭露印度背后的黑暗。《我的个神啊》直接向印度民众最信仰的宗教开炮；《厕所英雄》、《护垫侠》毫不手软地向世人展现落后愚昧的现实；《印度的女儿》撕开“强奸之都”的遮羞布，一度遭到封杀。他们每一次发声、每一次挣扎，都能让底层民众在黑暗中看到一些光亮。这一次，他们又大胆地把目光对准了腐败的官场。袭击Raid一般来说，八面玲珑的人最适合在官场的打拼。耿直又富有正义感的人固然受人敬佩，但若学不会变通，也会被同僚厌弃。阿麦·帕特耐克就是这样一名税务官。他推崇法律，喜欢按规矩办事。在他内心有一套自己的价值标准和处事方法。洁身自好的他哪怕去参加聚会，也要自带酒水。油盐不进的性格让阿麦在官场变成了一个“怪咖”，7年间被调任49次。1981年，阿麦被调往印度北方邦的首府勒克瑙市。在这里，官商勾结是公开的秘密，偷税漏税更是商人心照不宣的日常操作。俗话说的好，新官上任三把火，阿麦卯足劲儿准备大干一场。不过大家对这个空降而来的“外来客”却并不友善。一天，阿麦收到一通匿名举报电话，经过多方调查，他将矛头对向了勒克瑙市最有权势的人瓦许·辛格。辛格的头衔有许多，不仅是房东、承包商、商人，还担任过三届国会议员，并得到51个主要立法院议员的支持。在勒克瑙市，官商两界辛格可谓是只手遮天。影片根据真实事件改编，片中的阿麦就如同唐朝的狄仁杰，宋朝的包拯、明朝的海瑞，贫贱不移、威武不屈，一身正气。面对强权，阿麦无所畏惧，他秘密向上级领导递交申请，准备突袭辛格的家，查抄赃款。印度考底利耶的《政事论》上这样写道——收入是行政管理的支柱。对国家来说，国库比军队更重要，因为能用于改善人民的生活。税收是国家公共财政最主要的收入来源和形式，赋税收不上来，国家就没有钱。若一个国家连收入来源都没有，还怎么带领民众过上好日子？然而在金钱面前，有许多人都低下了自己骄傲的头颅。志玲姐姐曾登上台湾艺人补税榜，补税金额高达千万新台币。刘晓庆因偷税漏税甚至还惹上了牢狱之灾。范冰冰所需补缴的税款、滞纳金以及罚款加在一起，超过8亿。明星由于片酬畸高、收入来源多样，由此衍生出的避税、逃税等渠道简直是五花八门。尽管为了规范税收秩序，国家加强了惩戒力度，但上有政策下有对策。在诱人的利益面前，免不了会有人继续钻法律的漏洞。影片中的辛格手段十分隐蔽，作为一名混迹官场、商场多年的老油条，他怎么可能轻易将自己的把柄送之与人。阿麦带人将辛格的家里翻了个底朝天，却毫无所获。正在一筹莫展之际，阿麦突然发现辛格家里的布局有些奇怪。这随便一摸，便摸出了大蹊跷。墙壁里台阶里甚至连天花板上都藏满了金条。上一次在影视剧里见到这么多钱还是在《人民的名义》中，为了点钞用坏了12台点钞机，数钱数到手抽筋。而这次，没有足够量的砝码，为了称黄金竟然还学起了“曹冲称象”。反贪反腐的影视作品，一般都深受小老百姓的喜欢。对于鲜少跟高官显贵打交道的平头百姓来说，能够亲眼目睹作恶多端的大官们落马是一件非常爽快的事情。但是对于这些执法者来说，为了这一刻他们付出了千万倍的辛苦。在《人民的名义》中，刚正不阿、牛气冲天的陈海直接被设计撞成植物人。《金钱帝国》中，初出茅庐的廉政专员韩志邦被毒打到面目全非。而在这部影片中，为了阻止阿麦继续搜查，他们将毒手伸向了阿麦的妻子。若压力和威胁只来自“敌方”，这些正义的勇士还有信心联合民众和同僚同仇敌忾。可怕的是，自己的每一步行动都被内鬼通风报信。辛格的面子工程做的极佳，他将偷税漏税和收贿的黑钱拿出一小部分收买人心。阿麦还没到辛格的家门口，己方的队伍就已经有人开始胆怯退出。当阿麦开始进行“抄家”时，更是不断地接到来自四面八方领导的压力。甚至连首相都亲自下场为辛格求情。最后，辛格直接使出杀手锏，蛊惑民众、激起民愤。任凭阿麦苦口婆心地解释也无人相信他。毕竟，对于这些民众来说，他们不关心偷不偷税、行不行贿，只要能让自己能得到切实的好处，他们就支持谁。每一个敢于跟恶势力对抗的正义之士都会遇到这样的困境和阻挠。正义之路仿佛永远都布满荆棘和挑战。而几千年的历史也告诉我们，治理腐败是一件非常困难的事儿。不管实行什么样的政治制度，都不可能真正杜绝腐败。任何时代，若只靠几个清廉的“勇士”将一个国家所有的贪腐消灭，简直就是天方夜谭。这些“恶瘤”就像杂草一样，只要根基没有被拔出，就会一直春风吹又生…百足之虫死而不僵还不是最可怕的，恐怖的是这个环境会不断地改变原本善良正直的人的心理。就像一个大染缸，不管是什么颜色，只要掉进来就总会被同化。但这不是我们逃避借口，总有如阿麦、侯鸿亮这样的勇士在为这个社会努力着。哪怕知道这是一场无休无止的战争，哪怕他们一直处在上风。下次，再努力一点点，一定能将他们一网打尽！"},{"instruction":"我喜欢《红军与白军》这部电影，请帮我写一篇影评。","output":"## 从舞蹈角度读解《红军与白军》--转 丁老师在昨天下午的课上，我请丁老师对匈牙利的导演扬拙的影片《红军与白军》，从芭蕾舞的角度来进行分析，因为这个导演原来是一名芭蕾舞演员，他的影片在60年代受到全世界的赞扬，说他的调度，他的摄影机运动具有芭蕾舞的风格，在中国的影评中从来没有出现过芭蕾舞的调度，芭蕾舞的镜头运动等概念，因为这些综合论的影评家除了认汉字以外，其他什么都不懂，装懂，不仅仅是马脚，连马肚子，马屁股都露出来了，什么素描般的美术风格油画式的的镜头，如果镜头都是油画式的那么这部影片的美术风格，那么这部影片的风格又怎么会是素描般的呢，这可真是瞎掰。 我把这部影片的最后一个段落拿出来请丁老师分析，下面是牧心的记录： 整个段落就像芭蕾舞的调度，为了壮观好看， 在背景上是三排静止不动的白军，白军的后面是一条从左到右的河，露出天边，第一排也是从左到右占满了整个画面，后面一排稍短一些，远处的那条线上还站着一排，有些散，他们都是静止的，接着我们看见前景上的一排红军唱着歌入画，这就跟芭蕾舞里主角出场的处理一样，舞台上的人全是静止的，只有主角是运动的，调度的突出重点是主角。从芭蕾舞的角度来看，如果背景上的敌人不站成一排的话就不好看了，前景上的运动与背景上的不动，使人忘不了后面的背景的陪衬，而前景上的人物与背景上的几排人物形成一种“坡型”的关系，让观众感觉前景的那排红军正在一点一点的向“圈子里面缩”，这种透视和人物层次感形成了一种悲壮的美，这是典型的芭蕾舞的调度：前景的人物一直向纵深推进，这样观众的注意力就全都集中在那个主角身上，而背景和那条河的布局对前景的那排红军形成了一个包围的形式。这前景上边唱着歌边向远景走去，与后面背景上的那几排站立着不动的人物，还有天边那一条线上人物相成了一种“自投罗网”的关系，前景上的一排人物与背景上的一排人物形成一种“吞噬与被吞噬”的关系，这是典型的芭蕾舞的出场方式。 另外，前景的这排红军的行为体现了一种民族性格。这支红军面对着人数超过他们多少倍的敌人，结果是可以预料的，全军覆没是不可避免的，但是，他们并没有抵抗，他们的思想不是临死也要拼掉你几个，他们的思想是以大无畏的精神迎着死亡走去，民族性格出来了。可能另一个民族的观众会看不懂，因为现实生活不是这样的，打仗哪有这样打的？可是这是艺术表现，这种处理体现了他们的民族性格，每一个民族都有自己独特的民族文化。这里有一个民族性格问题，就像蒙古族人的走路方式：昂首挺胸，环顾四周，因为他们的生活环境就是大草原，大大咧咧，粗犷美。维吾尔族，羌族，藏族，回族……各个民族的性格都不一样,文化不一样,环境不一样,研究一个民族要从他们生存的环境来研究,环境要有依据。"},{"instruction":"为《失业生》写一篇以“我已半生归来，你依旧少年”为题的豆瓣影评，约1700字。","output":"## 我已半生归来，你依旧少年《失业生》在1981年于香港上映，谁也没想到36年到的今天，它卷土重来在国内大范围重新放映，不仅没有被嫌“老”，反而勾起了许多人的美好回忆。这部电影很有意思的地方是，几位主演的昵称或英文名和本人的名字一致，例如陈百强和钟保罗在戏中的英文名也是他们本人的英文名Danny和Paul，张国荣则是“荣少(爷)”、“阿荣”，连出场不多的艳丽少妇Mabel，演员的本名就是邝美宝。所以看电影的过程中有种错觉，好像不是演员在表演，而是他们的青春被录影了而已。没错，青春是这部电影的关键词，电影把男孩子们在学校、课外及刚毕业的日常生活表现得恰如其分。例如，小伙子们明明在操场上练球，却借机溜到邻校看同龄的女学生上体育课，还大胆地混入其中，被老师发现及质问后马上灰溜溜逃跑，开始的异常兴奋和离开时的惊惶失措形成鲜明对比，令人忍俊不禁，但不会责怪他们 ----- 好奇大胆但不知后果是年轻人的常态。还有缘于男性天性中争强好胜而“办”了一场的红白(老鼠)大赛，两派人赛前在同学间宣传收赌注、其中一方使坏下药、比赛中听到老师来了就赶紧散伙，而打架、会考、考试后的篝火晚会等一幕幕，让人联想到自己的寒窗岁月。电影从开头至此一直营造着真实自然、无忧无虑的少年生活，轻松愉快的节奏让人无比愉悦。紧接着画风就变了。象牙塔里的诗意时光不知不觉间从指缝中溜走，毕业后孩子们面临着人生的重要抉择 ----- 选专业、读大学或就业。《失业生》特意选择了贫富、两个截然不同的阶层的子弟展开其初出茅庐的故事。阿荣子承母业在大酒店看厕所，继而成了侍应生。当他贫穷的生活现状暴露在Danny眼皮底下时，自尊心受到了伤害，他愤恨地和Danny决裂。Danny热爱音乐，想到意大利进修，但遭到父亲反对；另一边却是他那懂事的弟弟Paul投父亲所好，主动报考了加拿大某大学的工商管理专业，正中父亲的下怀，儿子搂着父亲在沙发上撒娇说要买衣服、靴子、西装甚至车子，父亲全部一口答应，其乐融融，倒是一旁的母亲提醒他们：“Danny怎么办？”这是许多年轻人踏入社会后的必修课 ----- 投靠大众化就吃得开，小众者注定备受冷落。出身草根的阿荣每天守候在酒店厕所，为了打赏违心地向西装革履的进出者低眉俯首、献上谄媚的笑。Danny的音乐梦想得不到家人的支持，一气之下决定靠自己，打起零工，后来到了唱片公司打杂。在这段苦闷的光阴里，Danny认识了头戴太阳花的少女，二人认识并恋爱，在夕阳的余晖中他为她戴上太阳花花冠，一个拉小提琴，一个翩翩起舞，二人仿佛落入凡间的天使般美好纯净。和观众一样，导演对一对璧人也是偏爱有加，还安排他们到野外的小溪间放生金鱼，一起在打工之余挽手在大街上边走边唱，只要在一起，无论怎样都开心！最终，Danny的天赋被发掘，金子发出了原来的光芒。他在个人演唱会上穿着毕业时没随大家一起烧掉的校服，因为他觉得读书的时候很美好。并鼓励年轻人要努力追求属于自己的人生。话毕，Danny害羞地低下头，太阳花少女在旁边含情凝视他的侧面，笑靥如花，这一凝视就此定格并结束全片，让人产生时间也定格，他们青春永驻的错觉。作为旧电影，故事的BUG比较明显，例如江湖大佬怎么说被捕就被捕了，Danny的成名之路靠的是运气，陈百强的演技明显比较呆板生硬，还好他唱歌时的光彩弥补了演技不足。《失业生》在当年上映时也许只是部不过不失的青春片，到了如今却成了青春片的正确打开方式，加上无论颜值、气质、演技还是唱功都完爆时下的小鲜肉的张国荣和陈百强，观众除了赞叹还是赞叹。年轻有多么美好，他们就把这份美好表现到极致，真可谓：陌上人如玉，公子世无双。看完电影，无不唏嘘。集中了“中环三太子”的该片把离世的三人最美好的时光记录下来，现在看电影的人，当年没赶上它的首映，却没想到时光荏苒，在我们长大和渐渐老去的今日重温他们盛年的风采，在赞叹科技发达的同时，引发对他们和青春的缅怀。陈百强的悠扬歌声，哥哥的绝世美颜，不仅仅被记录在唱片和胶片里，还活在我们的心里，永远年轻，永远生动！正如海报语所言：仿若你从未离开。PS:特别鸣谢豆瓣中的一篇影评《终于看到你，比我还年轻的样子》，正是它给了我灵感想到这个标题。"},{"instruction":"为《绿皮书》写一篇以“喧嚣与孤独，构成人生的全部迷局”为题的豆瓣影评","output":"## 喧嚣与孤独，构成人生的全部迷局《绿皮书》一列维-斯特劳斯在《忧郁的热带》写道：「有些属于过去的小细节，现在却突耸如山峰，而我自己生命里整层整层的过去却消逝无迹。一些看起来毫不相关的事件，发生于不同的地方，来源于不同的时期，都互相接触交错，突然结晶成某种纪念物。」《绿皮书》在《绿皮书》的最后，当我看到Don把Tony捡来的石头放在自己书房，我想起了列维-斯特劳斯这段细腻的描述。石头是两个月驱车南行的纪念物，在Don眼中，它璀璨、不朽。纪念物本身并不构成意义，它的全部意义都在于人的赋予。人们借由它沟通过去与现在，提醒自己某些行将消逝的生命经验。旅途的时间和记忆碎在身体的骨骼里，成为自身拖带着的世界。决定我们成为某一类人的，往往不是皮囊，而是皮囊下的世界，由我们见过、爱过的一切组成。二《绿皮书》在《触不可及》等故事的构架里，白人是贵族与精英的形象，黑人则处于穷苦落魄的社会边缘。而《绿皮书》的主角形象则被倒置。它根据真实事件改编，想探讨的主题是严肃的，可故事并不沉重。Don是非裔美国人，血缘上的黑人，精神上的白人。他是一个音乐天才，刚会走路，母亲就教他弹钢琴，后来去列宁格勒音乐学院学习，成为那儿的第一个黑人学生。他接受的是古典音乐的训练。但之后，鉴于人们无法忍受一个黑人在舞台上演奏古典音乐，唱片公司着力把他往「有色艺人」方向发展。天才的光辉难以淹灭，他多次受邀去白宫演奏。《绿皮书》Tony是意裔美国人，虽然生着白人皮囊，却并非白人社会的既得利益者。失业后，他可以为了50美金赌注连吃26根热狗，否则就交不起房租。他大大咧咧，满嘴跑火车，保持不了片刻的安静。他身体里藏着一个黑人灵魂，热爱黑人的音乐，喜欢听Chubby Checker，Lil’ Richard，Sam Cooke和Aretha Frank等人的歌曲。Tony在朋友的推荐下成为Don巡演的司机。巡演之路远非Tony所预想的那么简单。在二十世纪六十年代的美国，种族歧视正处于最激烈之时，白人至上主义甚嚣尘上。民权运动方兴未艾，抗议示威如火如荼进行，马尔科姆·X和马丁·路德·金成为了黑人的民族英雄。一九六二年，黑人邮政员雨果·格林编写了一本叫「绿皮书」的小册子，专门为黑人设计旅行指南，里面标注了各城市中允许黑人进入的旅店、餐馆。Tony就带着这本「绿皮书」出发。《绿皮书》Tony并不喜欢Don，因为Don高高在上，吹毛求疵，总在用精英主义的立场教训他。他的诸多嗜好，譬如玩纸牌、抽烟等，无一不被Don鄙夷。但他佩服Don，在匹兹堡听到钢琴演奏后，他给妻子写信时这么形容道：「Don弹起来不像黑人，像李伯拉斯，只不过更好。当我从后视镜里看他的时候，我肯定他脑子里一直在想着什么事情。天才就是这样。但是我觉得那么聪明好像也没什么意思。」即便Don已经成为首屈一指的音乐家，与之来往的也是美国的上层阶级，黑人皮囊却让他得不到白人社会的完全认同，肤色成了原罪，越往南种族歧视越严重。在罗利，Don只被允许用树林里的厕所。在路易维尔，他在酒吧喝酒时被三个白人男子挟持，好不容易才从险境脱身。在梅肯的西装店，他不被允许试穿西装。Don因自己的同性恋身份给Tony带来的麻烦而道歉。Tony安慰他说：「我知道这是个复杂的世界。」他虽然莽撞冲动，但自有其细腻温情的一面。《绿皮书》Tony认为自己的世界比Don的更「黑」，两人为此发生过争执。Tony所说的「黑」其实是指社会阶级层面，越底层者越「黑」。底层的现实相差无几，他就混迹在其中，住在街上，每天为谋生计拼命赚钱，像绝大多数黑人一样。而在他眼中，Don坐在王位，满世界给富人演奏，是最受上流社会尊重的那类人。但Don告诉Tony，富人付钱让他演奏，是因为这让他们感觉自己有文化。一旦从舞台上走下来，对他们来说他只是一个普通的黑鬼。他不被自己的同胞所接受，他说：「如果我既不够白，也不够黑，也不够男人，那告诉我，我是谁？」Tony愣在原处。悲悯早就深植在人类的精神之中。雨淅淅沥沥，两个生命就这样彼此获得了谅解。《绿皮书》最后一天的行程在伯明翰。这里曾有过Don的痛楚回忆，六年前在市政礼堂演出时，Don因为演奏了白人的音乐，从舞台上被赶下来。这次演出，Don虽然是主角，但因为是黑人不被允许在餐厅用餐。此时的Tony，不再计较拿不拿得到尾款，他带Don愤然离去。他们在底层的贫苦黑人常去的橙鸟餐厅里，度过了整个巡演里最快乐的一个夜晚。善良与美，有时候长在最卑微的土壤里。三《绿皮书》这个世界的有趣，并不在于用你熟悉的眼界去打量一切，而在于放下那个属于自己的世界。唯有如此，所见所闻才不会仅仅只是在加深偏见。每个人都在放弃一部分我执后，才见识到了更广袤的世界。在橙鸟餐厅，虽然舞台摆的不是施坦威钢琴，使用这架钢琴的通常也是那类会在钢琴上放一杯威士忌的潦倒音乐人，Don还是欣然前去演奏，和爵士乐队的即兴配合。对Don来说，身上精致的世界束缚着他，使他的情感变得拘谨与压抑。底层世界的痛苦和欢愉，倒是给了他一种酒神式的快乐，让自我在情感的宣泄中得以解放。结束后，他说：「这才是真正的演出。」Tony原本的世界是粗粝的，不修边幅也不循规蹈矩。可是他内心并不偏狭，他接纳了Don的建议，努力改正自己的语调，变音，用词，并学着用Don那种更加文学化的腔调来写信。Tony曾问Don的助手，为什么Don要选择往南巡演，助手告诉他：「因为天才并不够，唯有勇气，才能改变人心。」那一刻，Tony的认知受到巨大的冲击，所谓尊严地活着，就在于饱含信念地去行动。《绿皮书》Don和Tony，一个孤独，一个喧嚣，就像黑塞小说中的纳尔齐斯与歌尔德蒙。两个全然不同世界就这样发生了碰撞：一个禁欲式的孤绝天才遇到一个世俗的享乐主义者。一个在人群里注重理性和道德的宁静，一个则是现代社会里的伊壁鸠鲁主义信徒，追求放纵、热烈与感性的愉悦。可是，喧嚣与孤独的并不总是天生的死敌，它们在对峙与妥协中，构成人生的全部迷局。人的一生，不过是在两者之间踯躅徘徊，既要俗世的快乐，也要保持精神的清醒与自洽。生活就是一场喧嚣与孤独的角斗，谁也不可能全身而退，不同的是，有的人死去的喧嚣部分多一些，有的人死去的孤独部分多一些，侥幸活下来的那部分就是所谓的自我。「要永远地创造自我。」福柯如是说道。这大概是现代人某种永恒的宿命。"},{"instruction":"我喜欢《丧钟：骑士与龙 大电影》这部电影，请帮我写一篇影评。","output":"## 一家人携手上阵——《丧钟：骑士与龙大电影》今天聊聊美国电影《丧钟：骑士与龙大电影》。片名Deathstroke: Knights & Dragons: The Movie (2020)。本片根据《丧钟：骑士与龙》动画剧集改编而来，由CW台出品，比原来的剧集拓展了一部分内容。这种整合方式类似《雌狐》（Vixen ）和《自由战士：射线》（Freedom Fighters: The Ray ）。丧钟（Deathstroke）是DC旗下的著名反英雄雇佣兵，独眼大叔、体能强悍、武艺精通、超强自愈能力，都是他的标志。这次《丧钟：骑士与龙》讲述的故事关乎丧钟家庭，别看丧钟五大三粗残酷无情，他也有自己的原则，对待家人更是掏心掏肺。片中延续了丧钟的一些设定，他本名斯莱德·约瑟夫·威尔逊（Slade Joseph Wilson），简称斯莱德·威尔逊（Slade Wilson），年轻时自愿参与军方实验，被注射了实验药物大难不死，体能大幅提升，获得了超强自愈能力。斯莱德·威尔逊戴上面具成为雇佣兵“丧钟”，拿钱办事，杀人放火，不过他也坚持自己的正义原则，并不是什么钱都赚。丧钟是漫威死侍的原型，超强的自愈能力、精通各种武器和全身制服套装，甚至丧钟还表示自己有一个兄弟就叫韦德·拉法基（Wade LaFarge）。丧钟比死侍人气差一点，大概就差在话痨加喜剧元素了。《丧钟：骑士与龙》延续了丧钟的大部分设定，包括前妻艾德琳·威尔逊（Adeline Wilson），儿子约瑟夫·威尔逊（Joseph Wilson），情人莉莉·沃思（Lillian Worth）和私生女罗斯·威尔逊（Rose Wilson）。不过这里没有提及他瞎眼原因，也不知道是被前妻艾德琳·威尔逊射瞎的，还是被朝鲜军队打瞎的，还是被绿箭弄瞎的。也没有提及那个绯闻兄弟韦德·拉法基（Wade LaFarge）和大儿子格兰特·威尔逊（Grant Wilson）一个名叫“蜂巢”（H.IV.E.）的恐怖组织看上了丧钟的强大能力，想将其招入麾下。丧钟看不上蜂巢这群土老帽，死活不肯加入。蜂巢头子叫“豺狼”，豺狼决定绑架丧钟的儿子约瑟夫·威尔逊（Joseph Wilson）逼迫丧钟就范。结果丧钟杀上门去，直接捣毁了蜂巢老巢。丧钟将将要救下儿子时，约瑟夫被敌人割喉，丧钟悲痛万分。后来约瑟夫大难不死，却失去了说话能力。丧钟妻子气丧钟偷偷当雇佣兵，更气丧钟把一家人置于危险，要求丧钟离开这个家。丧钟离开家10年后，发现蜂巢势力卷土重来，约瑟夫也被蜂巢洗脑，成了对方的打手。原来约瑟夫继承了丧钟的部分超能力，拥有了十分强悍的心灵控制能力。丧钟再一次杀向蜂巢，不同的是这次他联合了亲友，不再孤军奋战。你觉得这个总统造型像谁？丧钟在别人的漫画中，基本都是打酱油的反派角色，战斗力忽高忽低。强悍的时候可以把蝙蝠侠打得鼻青脸肿，弱的时候被少年泰坦一群孩子刷得团团转。在个人漫画中，丧钟则是唯一的主角，他得以保留强悍的战斗力，也能坚持自己的道德底线。《丧钟：骑士与龙》聚焦家庭，成功塑造了丧钟的反英雄形象，成功脱离了以往的反派形象。以往他都是拿钱办事，认钱不认人，处处和超级英雄们作对，这次他为了自己的家人而战，好好给大家上了一堂家庭伦理课。单人剧丧钟正名，一家人携手上阵。"},{"instruction":"请为《护理师》写一篇以“垃圾人教你做人——《护理师》”为题目的影评","output":"## 垃圾人教你做人——《护理师》今天聊聊电影《护理师》。片名El practicante / The Paramedic (2020)。盛产悬疑电影的西班牙又一次带来了悬疑电影新作。这部《护理师》由Netflix出品，2020年9月上线，讲述一位护理师安吉尔遭遇车祸后下身瘫痪，从此开始“身残志坚”全新生活的故事。按照西班牙悬疑惊悚电影的一贯特性，《护理师》当然不会是讲述残障人士努力自救、热爱生活的正能量故事，而是一个充满惊悚色彩和危险气息的都市怪谈。安吉尔原本是跟随救护车出外勤的护理师，跟着车子到处跑，负责救治那些遭遇危险或生命垂危的病人。他在从事护理师职业的时候就有小偷小摸的习惯，喜欢趁机偷走病人身上的财物，转手找个当铺换钱。可见他的人品并不怎么样。经常坐车，遭遇车祸的风险也随之增大，再加上救护车总是不走寻常道，遭遇车祸似乎并不是意外之事。安吉尔并没有想过自己会遭遇车祸，更没有想过自己会因此瘫痪。他正值壮年，原本身体倍棒，现在却成了不能自理，到处需要别人帮忙的残废人士，巨大落差让他原本就不好的脾气变得更加暴躁。安吉尔有一个交往多年的女友凡妮。凡妮是一名在读宠物医生，平时勤工俭学，眼看着快毕业就要工作了，生活渐渐稳定下来。凡妮肤白貌美大长腿，你会感到惊诧，连安吉尔这种人都能找到这么漂亮的女友。没想到安吉尔出了车祸，凡妮需要一边完成学业，还要一边照顾男友。凡妮的压力可想而知，不仅如此凡妮还要照顾安吉尔的情绪，生活十分不易。安吉尔却并没有能够体谅女友难处，而是全想着自己的不快。一般人在经历不幸时会经历“否认、愤怒、挣扎、沮丧、接受”五个阶段，而他就像在前三个阶段走不出来一样。动不动就找茬，试图刷存在感，胡乱发脾气，凡妮脾气再好也难以忍受。偶尔安吉尔也会产生自暴自弃和沮丧，但很快就又回到愤怒状态，甚至不忘和自己的女调理师调情。反正就是不能安心接受瘫痪。人不能太闲，闲下来就会搞幺蛾子。安吉尔整天待在家里每个鸟事，鸟又没事。于是他开始监视女友的一举一动，并乐此不疲。监视行为被凡妮发现后，凡妮十分生气和害怕，静悄悄地离开了安吉尔。安吉尔就这样变成孤家寡人。安吉尔并没有放弃，一次偶然机会他又遇到了凡妮。于是安吉尔想到一个邪恶计划，绑架囚禁了凡妮，要让凡妮感受自己的痛苦，要让凡妮全方位地和自己产生共情。一场匪夷所思的变态囚禁就这样开始了。按照影片设定，《护理师》的故事发生在2020年1月，在影片中还提了一句“新冠病毒”。而在片中却感受不到任何防护措施，纯粹是做了个背景板。很可能这个是让西方人自嗨的一个点。病毒来了也拦不住坏家伙害人的心。悬疑电影一定会有悬念和反转。《护理师》的悬念就是观众并不能猜到安吉尔的下一步行为，即便影片通过一些细节，给出了安吉尔后续行为暗示，但观众们还是很难从正常人角度去想象安吉尔。看多了西班牙悬疑电影，本片的反转倒是显得有些薄弱。最后的反转算不上精彩，只能算是中规中矩。影片告诉大家一个道理：一定要远离垃圾人。尤其是准备结婚的对象，一旦发现对方有暴露垃圾人本质的苗头，就要当机立断地离开，能走多远就走多远。如果收到垃圾人的伤害，想要打击报复是正常想法，但也要注意代价。如果杀敌一千，自损八百，把自己的时间、健康都搭进去，那就得不偿失了。我不好你也别好，垃圾人教你做人。"},{"instruction":"请为《残酷的梦》写一篇影评","output":"## It\'s you and me.金黄的麦田、青红交错的枫林，一部景色唯美的加拿大电影。故事的女孩凯西和男孩乔纳斯就在这里邂逅了。单亲家庭的凯西随警察父亲暂时移居到此地，乔纳斯是她在这里的第一个朋友。可是，当凯西上门想找乔纳斯一起去镇上购物时，他的母亲却是一副拒人千里之外的神态。好在我们的乔纳斯最终还是偷偷地骑着单车追了上来。凯西的父亲对女儿和乔纳斯的亲密来往也甚为不满，可是父亲用手指在女儿嘴唇上做这样的动作，并强迫凯西反反复复说那句应该说了很多年的“It\'s you and me.”，怎么看都像是变态啊。凯西略微反抗便遭毒打，乔纳斯忍不住上前阻止，似乎也是无济于事。然而有一天，乔纳斯无意间撞见凯西的父亲有些怪异的举动。这纸包的是什么呢？是钱，是毒品？乔纳斯躲进凯西父亲的车里来到了一个偏癖的地方，随后亲眼目睹凯西父亲枪杀了几个人，并抢走了满满一包裹的金钱。极度恐惧之下，趁凯西父亲停车加油之际，乔纳斯抢走包裹，并带着凯西一同开始了逃亡生涯。凯西和乔纳斯把一部分钱埋在了枫林后，在汽车旅馆，他们获得了片刻的喘息。作为警察，凯西父亲的追踪调查能力还是非常NB的。没多久，凯西和乔纳斯就被逮住了。凯西父亲和他的警察同事原本就计划好一起平分赃款的，结果被乔纳斯从中破坏，现在他们便要乔纳斯带他们去剩余赃款的埋藏地。原来画面的暖色调变得异常阴冷，青红交错的枫林只剩下枯枝，气氛也逐渐变得诡异。警察同事在半路抢走全部现金跑路了，凯西父亲只得独自携他俩去找寻剩余的赃款。然而事与愿违，凯西父亲最终未能夺回赃款，却死在了自己亲生女儿的枪下，而那句“It\'s you and me.”也仅仅成为了他人茶余饭后的笑话。这部电影可以纳入未成年人犯罪类型，剧情没有太大意外，开头对凯西和乔纳斯家庭情况作简单铺垫，基本就交代了这两位问题少年的未来走向——即便有一万种选择，仿佛在当事人面前只有一条死路。凯西遇见乔纳斯究竟是幸运的还是不幸的，其实电影里已经从很多角度给出了答案。1、凯西父亲的家暴，从道德标准上是不应该的。但是这毕竟是别人家的家庭问题，乔纳斯作为外人，而且还是未成年人不应该闯到人家家里去评判成年人的行为。片中通过警察以及乔纳斯父亲的话表达了这个意思。2、凯西本来没有必要跟乔纳斯逃亡，是因为乔纳斯偷了凯西父亲的赃款为了保护乔纳斯免遭她父亲的追杀而作的选择，甚至怕暴露行踪把认识乔纳斯之前唯一的伙伴——爱犬Blaze转赠他人。片中通过凯西自己的话表达了这个意思。3、凯西小时候曾劝母亲跟她一起出走，可惜母亲选择委曲求全，最后母亲在一次父亲醉酒驾驶途中车祸丧命。之后凯西只得跟父亲相依为命。而父亲也一直用“It\'s you and me.”的话进行精神控制。直到遇到乔纳斯，凯西的叛逆再度被激活。4、乔纳斯平时就是开着收割机收割麦子，有一个患有精神疾病的母亲和一个“放羊娃”性格的父亲。所以乔纳斯会逐渐离经叛道走向极端，看到凯西被他父亲施暴更是激发了他的个人英雄主义的想法。片中，凯西父亲和警察同事确实也不是什么好人，可是如果没有这两个问题少年，或者说凯西和乔纳斯没有相遇，凯西父亲也不至于会落得被自己女儿枪杀的下场。本片取名《Mean Dreams》，Dreams是复数，至少包含了凯西的和乔纳斯的，更广泛一些的话，还有凯西父亲的、乔纳斯父亲的……都不是日常中应该发生的好事，不禁给人感觉，不好的事物也会存在蝴蝶效应般演变得越来越糟糕……"},{"instruction":"为《圣诞顽童历险记》写一篇以“一部非常疯狂的“小鬼当家””为题的豆瓣影评","output":"## 一部非常疯狂的“小鬼当家”这是一部完全原创且极富想象力，疯狂、十分Cult的融合了《虎胆龙威》、《查理和他的巧克力工厂》、《第一滴血》等影片元素，集动作、惊悚、家庭剧于一身，且多年来坊间一直有争议是“小鬼当家”灵感来源的圣诞恐怖片！历时近21个小时基于2160p蓝光原盘压制，和半个月的原创翻译，海嘯字幕組为大家带来了BluRay 1080p & 2160p中字熟肉！这部影片的观影过程是愉悦的且充满让你会心一笑的闪光点！作为传统之一，很多人选择在圣诞节观看一部圣诞背景的恐怖片，如果“黑色圣诞节”或“小精灵”这类影片你都已经看过了，那么《圣诞顽童历险记》一定是你今年的最佳选择！片名“36.15 code Père Noël”直译的话应该是“代号36.15圣诞老人”，讲述了富商朱莉的独生子9岁的托马斯，深信这个世界是有圣诞老人的，而其母亲朱莉因开除了一名走投无路的圣诞老人扮演者，引起后者的报复心。于是聪明且独立的托马斯要在圣诞夜，一边智斗疯掉的圣诞老人，一边还要保护自己体弱多病的爷爷，这既是少年勇斗恶人的过程，也是“梦碎”的旅程，现实终归不是童话般完美。说这是一个法国版的“小鬼当家”有些冤屈，影片其实比“小鬼当家”早一年上映，且具有后者不具备的批判性。一边是固执的相信世界上是有圣诞老人的被“宠溺”的孩子，另一边是被社会抛弃到走投无路最终逼疯的穷圣诞老人，影片除了给主角小托马斯所有八十年代经典电影的光环之外（你也很难在现在看到一个主角是“兰博”装扮了），对反派有着十分与众不同的塑造，他被描绘成一个内心深处被整个世界抛弃的人，即使是报复性作恶，一个杀手的角色也有人性的复杂与矛盾，使得这个角色在影片中处处流露出悲惨的痕迹，看似这是一部“小鬼当家”，其实要复杂深刻得多。 而在如此深刻且讽刺的内核外，是毫不输给美国电影工业的动作片元素与可圈可点的“游戏时间”，从主角家的豪宅布景到细微的每一个陷阱的设置都很用心。演员的表演更是十分优秀， 很可惜恶圣诞老人的扮演者帕特里克·弗勒尔斯海姆已经离世，他在影片中贡献了令人动情的表演，毋庸置疑该片的灵魂既是这个被社会抛弃的圣诞老人。归根结底，如果你是“小鬼当家”系列的忠实粉丝，那么这部影片可能并不那么对你胃口，因为他没有那么轻松幽默，或纯净的世界观和好莱坞式电影的价值观，但是他有着对人性的思考和内核中完全与剧情反向的批判。如果电影是一个美丽的梦，那这部电影是半梦半醒的。也很可惜导演雷内·曼佐拍完该作就没有再产出佳作，该片足矣证明他是一个有商业价值且优秀的导演。"},{"instruction":"请为《冰川时代：巴克·怀尔德的冒险之旅》写一篇影评","output":"## 强行衍生胡乱造——《冰川时代：巴克·怀尔德的冒险之旅》今天聊聊美国电影《冰川时代：巴克·怀尔德的冒险之旅》。片名The Ice Age Adventures of Buck Wild (2022)，别名冰川时代：巴克大冒险 / 冰川时代：巴克的冒险 / 冰河世纪：阿北大冒险(港) / 冰原历险记：巴克大冒险(台)。本片在第一部《冰河世纪》（Ice Age ,2002）上映20周年之际发行，是《冰川时代》系列动画电影的续集，也是第一部基于蓝天工作室（Blue Sky Studios）专营权的迪斯尼+动画电影。故事讲述黄鼠狼巴克·怀尔德（Buck Wild）的冒险故事，和巴克一起冒险的还有负鼠兄弟克拉什（Crash）和埃迪（Eddie）。遥想当年蓝天工作室凭借一部《冰河世纪》横空出世，接连推出了五部《冰河世纪》电影，整个系列为蓝天工作室赢得良好声誉。蓝天工作室被迪士尼收购后，即刻遭到解散。随后迪士尼将蓝天的衍生素材毫不客气地进行外包。外包效果如何？大家可以通过这部《冰川时代：巴克·怀尔德的冒险之旅》一探究竟。简单地说，这部电影就是在迪士尼+平台上凑数的，打着《冰川世纪》的旗号，让观众觉得订阅迪士尼+能有点价值。不过随着蓝天工作室在2021年初关闭，这部电影由巴德尔娱乐公司（Bardel Entertainment）接手制作。这个系列的老观众可以在本片中发现，几乎所有老演员都没有回归，唯一大牌的只有西蒙·佩格（Simon Pegg）回归并担任巴克（Buck）的配音演员。而本片也是《冰河世纪》系列中第一部不出现史克拉特（Scrat）的电影。在本片中，核心配音演员纷纷退出，猛犸象、剑齿虎、树懒和剑齿松鼠等都不是故事主角，游走于故事边缘。于是剩下克拉什和埃迪开始它们喋喋不休的旅程。其实从故事叙述来看，整个故事更像是克拉什和埃迪的冒险，巴克在其中只是起到工具人的作用。不过考虑到巴克的配音演员名气更大，所以这部影片就行了巴克的冒险。早在《冰川时代3》（Ice Age: Dawn of the Dinosaurs ，2009）中，单眼黄鼠狼巴克·维尔德的加入给这个系列带来了全新气息，诙谐幽默印第安纳琼斯式角色让这个系列焕发新生机。两只小负鼠克拉什和埃迪为了寻求独立，跌跌撞撞地回到了《冰河时代》中的地下恐龙世界。巴克正在这里联手泽伊（Zee），一起对抗一只聪明又邪恶的大脑袋恐龙奥森（Orson）。本片的制作水准比较粗糙，完全看不出《冰河世纪》当初精雕细琢的样子，取而代之的是粗糙简单的建模、漫不经心的CG纹理，时不时出现的伪劣照明，不仅没有阴影，更别提光线追踪，整个场景看起来都怪怪的，甚至有的角色的皮毛渲染地不对，整部影片看起来就像三十年前的动画水准。单靠黄鼠狼和负鼠，显然撑不起一个故事。在没有了猛犸象一干人后，故事显得十分单薄，在缺少了史克拉特后，整部电影更像是缺少了灵魂。史克拉特虽然不说话，但能在无声中给观众传递无数快乐。影片中并没有能够塑造一个完整勇敢的巴克，仅仅是脸谱化的利用这个角色设定，制作了一部明显低于平均水准的动画续集。我很难想象谁会喜欢这部电影。老粉丝会对这个故事中的变化感到失望，更别提铁杆粉丝了，而新接触这个系列的新观众则会觉得这部电影很无聊。唯一可能喜欢的观众应该是年幼的孩子们，他们会对影片中大量华而不实的色彩和偶尔出现的视觉冲击感到兴趣。除此之外，影片沉浸在一种懒散的节奏中。电影勉强凑到八十几分钟就匆匆打出结束字幕，因为实在是没什么可演的。我们有理由怀疑，这部影片上线迪士尼+的目的就是凑数的……《冰川时代：巴克·怀尔德的冒险之旅》也在试图传递一种价值观，那就是强者不应当支配弱者，每人都有独立的权力，新家庭可以建立在爱的基础上，而不是依靠血缘诞生。此外影片还直面孩子的成长独立问题，还有一个能力强悍的残疾角色，整体来说这个价值观比较正面积极，适合年幼孩子观看。强行衍生胡乱造，廉价续集来充数。"},{"instruction":"我喜欢《奸雄末路》这部电影，请帮我写一篇影评，需要在开头引用些语录","output":"## 奸雄末路，血肉传奇马丁•斯科塞斯曾经说过：“如果你不喜欢塞缪尔•富勒的电影，那就等于你不喜欢电影。”作为美国知名的独立导演、黑色导演以及B级片导演，富勒的作品都有极强的可看性，故事精彩、节奏紧凑、以及那些极富个人魅力的角色，同时，紧张氛围的营造也是富勒的拿手好戏，这一切都会将看他电影的人吸引至沉迷。同时，他一生专注于反战及反种族主义等题材，这也让他的作品在好看的同时还有很强的思想深度。本片是由塞缪尔•富勒于1950年执导的黑白电影，根据19世纪美国著名的骗子詹姆斯•安德森•利夫斯的故事改编。电影开始，美国亚利桑那州的一群官员正在讨论相关事宜。他们身着晚礼服，白头鹤发，小口啜饮白兰地酒，大口抽着雪茄烟。其中有一位表情僵直的中年男子，他的出现仿佛是荧屏上突兀的画外音，此人名字叫做哈德利。当解说员哈德利向我们逐层阐述利夫斯的秘密之后，导演富勒引领观众们从1912年穿梭至久远前的1872年。由于美国政府承认西班牙殖民者的土地所有权，好多无知的人都得到了土地，圣达菲的土地官利夫斯为了私吞亚利桑那州的整片领土，而伪造了西班牙政府赠地的相关文件，自行编写了历史：他创造了一个叫米格尔•德•帕拉塔的人，并既定为亚利桑那的第一位男爵。凭着其卓越的伪装技能，利夫斯来到西班牙的一所修道院里，谎称小女孩索菲亚是米格尔•德•帕拉塔男爵的唯一后人，并成功说服其养父佩皮拖•阿瓦内茨接受事实。几人回到利夫斯在圣达菲的家，请来拉斯维加斯学院毕业的诺玛当家教，从各种形态礼仪、看图识字，对女男爵索菲亚•德•帕拉塔进行“形象改造”。刚开始接受启蒙的索菲亚敏而好学，利夫斯也没忘记给她灌输高贵公主追求幸福的向往。还教她亚里斯多德语录：“高贵不在于你拥有什么，而在于你值得拥有什么。”同时，利夫斯跑到大山深处制造“摩崖石刻”，大书特书。钻进图书馆伪造帕拉塔家族历史，伪造了索菲亚•德•帕拉塔的出身记录，伪造了帕拉塔夫妇的坟葬…待美洲大陆的历史印记做好，又乘船前往西班牙，找到存放国王文件档案的修道院，韬光养晦三四年，潜心练习古文写作。然后假装不经意地留一张在领导桌子上，让人家觉得他是个人才，招为古书抄写注释员。这样，他便成功地篡改了皇帝“手谕”，达到了“国王费迪南德六世赐予土地”有据可查的目的。十年之后，此时利夫斯回到美国，利夫斯已经成年。利夫斯对阿瓦内茨说准备和索菲亚结婚，阿瓦内茨以为他疯了，然而索菲亚还真的嫁给了他。这场婚姻的促成，并不是因为利夫斯爱索菲亚，而是因为他试图继承领土的计划。显而易见，索菲亚爱上了这位年轻的绅士，而利夫斯一心只是为了即将到来的土地和财富。利夫斯有一句“女人我见过不少。但一见到你，我就觉得恐惧”。除了索菲亚，他至少对三个以上女人说过同样的话。所有花哨的聪慧，通过哈德利的叙述得以体现，都在利夫斯良好而严谨的执行中保持。利夫斯的故事并不仅仅是一个传奇大骗子的勃勃野心，导演富勒在叙述的时候给我们展示了更多详尽的血与肉。内政部官员格里夫说，“他是一名真正热爱亚利桑那的人”，利夫斯花费数年准备着这场骗局。电影46分钟左右，索菲亚“男爵”和他的妻子带着“文件”出现在菲尼克斯，要求通过法律手段向政府索要属于自己的土地，面对确凿证据，地方官员手足无措。一切陷入混乱之中。温柔和善的“女男爵”吓坏了，提出“不要土地，只要恩爱稳定的生活”，屡屡给自己爱夫的权利追求浇冷水。但利夫斯非常沉稳，接下来的时间里，他开始了各种证据的收集。我们的老朋友哈德利，来自美国内务部的年轻侦查员，打算揭穿利夫斯的诡计。那么他成功了吗？圣达菲的小官员利夫斯，最终成为了19世纪80年代最富有的人之一吗？他是否成功经营了这场骗局并且在亚利桑那州子嗣满堂流芳百世？无论如何，索菲亚对已经表明 “骗子”身份的利夫斯，依旧表露出至死不渝的爱，并最终感动了后者，使他在“爱妻”和“继续欺骗下去”中，作出正确选择。在类型上《奸雄末路》可以归作历史剧，同时还包含爱情元素和西部元素。电影的英文名为The Baron of Arizona（亚利桑那男爵），引进中国后变成了《奸雄末路》。“奸雄”给人什么感觉？阴险毒辣心狠狡诈。“末路”什么意思？四面楚歌身陷绝境。电影看罢，观众对其中被称为“奸雄”的男主人公利夫斯，倒有几分敬仰和感慕，似乎还是名曰《亚利桑那男爵》客观公道。《钢盔》，《击毙杰西•詹姆斯》和《亚利桑那男爵》是“蚀”系列所收的富勒的三部片子，本片是其中最好的一部。不同于另两部的严肃和深刻，拘谨和工整，显不出多少力量，它却充满着浪漫气息。一贯擅长黑色电影和战争电影的富勒，并不是很擅长或是很喜欢描写爱情，他的作品里也很少见爱情段落，即使有常是黑色电影中的相互利用。而在《奸雄末路》中却是难得的浪漫爱情故事。“你给我第二块糖的时候我就爱上你了” ，“原来我在寻找的是一个爱我真实面目的女人”。结尾部分角色性格的转变也以一个极感人的情节完成。利夫斯的骗局是整部电影的主要内容。这个阴谋吊足了观众的眼球，不知不觉中对事件的发展抱有持续的兴趣。文森特将利夫斯塑造成一个复杂而迷人的角色，时刻虏获观众的好奇心，以及对其艰辛工作的深表同情。传奇人物利夫斯的设局过程也是本片的一大看点。都说大盗窃国，利夫斯也用他的巧思吧美国政府玩的团团转，甚至计划花几千万美金从他手里买回亚利桑那州。利夫斯的成功不单依靠布局，更多依靠他对他人内心的掌握，懂得利用别人的一些心理弱点。尽管如此，电影也存在着一定瑕疵，由于它采用闪回的结构，在前四十分钟显得有些凌乱，包括一些黑色电影的演绎手法，以及哈德利既是侦查员又是愤怒的解说员，顾此失彼的局限表演让电影些许失分。当然，暂将这些避而不谈，文森特•普莱斯的表演还是让人值得一看，并且与他在其余电影里的扮相有很大不同，更为娇俏讨喜。精明聪慧伪装，一切都是对自我卑微和立世孤独的负隅顽抗。精心的骗局设计、艰难的布局历程，感人的内心转化，精彩的演出技巧，所有的桥段都映射出人物各个方面的性格特征，血与骨，欲与肉的纵横交错，真相扑朔迷离，又在最终昭告天下。这是一个平面的影像世界，也是个纵深的人性世界。骗子利夫斯是个比较立体的形象，没有局限于善恶的表达，而赋予了更多人性的闪光点，当然，最后还有动容的爱情。"},{"instruction":"请为《南极之恋》写一篇以“相忘于江湖，不如相濡以沫”为题目的影评，字数约1100字。","output":"## 相忘于江湖，不如相濡以沫偷得浮生半日闲，在软件上看了一部电影。庄子曾说，泉涸，鱼相与处于陆，相呴以湿，相濡以沫，不如相忘于江湖。与其誉尧而非桀也，不如两忘而化其道 。这样说，是也不是。我曾在一个公众号上看到，说，很多不可能发生的爱情，在零度以下就可以产生。像杨过小龙女，一动一静性格相反，在年纪在辈分上全然不符，却在古墓里产生了爱情。像张翠山殷素素，一正一邪，在道义上势不两立，却在冰火岛那里发生了爱情，不顾一切的在一起。零度以下，是冷。冷的最好处就是可以相依取暖。就像磁石，紧紧的粘在一起。故事发生在南极。飞机坠毁在那里。不到五分钟，就只剩下男女主两人——富春和如意。而且，整部电影几乎都是男女主两人。（具体情节请百度）南极不知道冷不冷，我也没有去过。不过，从满天飞雪，雪崩狂风，可以窥探出一二。如意在富春回不来的时候，用易拉罐盖子划腕自杀，到富春回来的时候也没有死成。我觉得很奇怪，后来再看弹幕，原来是说天冷，伤口都被冻住了。我才深深感到那里很冷。泉水干了，为了保住生命，两条鱼吐沫互相润湿。他们在茫茫的南极之中，找到了一个废旧的小屋，那里有过期的罐头和一些柴油。此时的南极处在极昼之中，70天之后，便会到极夜。两人需要在极夜来临之前找到科学站，才能获救。否则就是死路一条。一个是爱财的商人，一个是高冷的科学家。两个人，分工合作，受伤的如意看守阵地，富春去探索寻找出路。富春一系列的堪称九死一生探险之路真的很惊心动魄，看着他在冰窟里挣扎……等等真的觉得人的意志力很强大，强大到可以不屈服于自然。当然有点偏题，所以就不一一赘述。假如我们生活在这样的一种与世隔绝的环境里，只有两个人。在怎么都走不出去的荒野丛林里。在一望无际的雪原冰川里。在无边无际的干旱沙漠里。在漂泊无依永远无法停靠岸边的小船上。……只有两个人，（我觉得还是两个人比较好，假如只有一个人，那就是鲁滨逊。两个人搭配总比鲁滨逊和星期五好一点，最起码不会孤单。）一个人真的很孤单，一个人从图书馆回来，深夜十点的时候，总会幻想有一些奇奇怪怪的东西。一个人去陌生人的城市，心总是会揪着放不下来，害怕遇上坏人。所以，当你处在一种危险甚至有些绝望的环境里，另一个人就是你的精神支柱。富春在出发寻找出路时，总会说等着我。“等着我”代表什么？代表他求生的欲望，代表这里有一个他要坚强活下去的依据。他在被狂风被雪崩带到深渊里他会一点一点爬上来，被夹在坚硬的冰块中，他咬牙一点一点挪动。他在冰上掉进冰水里，还顽强的游上来，一步一步的“回家”，即使全身都被冻僵了。他在得了雪盲症，摸索着回家的路，大声嘶喊着“如意”，靠着声音领他回家。……如意亦如是。两天之后，富春还没有回来，她也绝望了，割腕自杀。在一个只有两个人空间里，外物会促使他们向一起靠近，再靠近。"},{"instruction":"请为《灰烬与钻石》写一篇以“不变的辰星”为题目的影评来介绍这部电影","output":"## 不变的辰星那么你就如一把燃烧的火把那些烧落下的一把把灰烬落在你身边火焰，你不知道到底火焰带来的是自由还是死亡耗尽你所有最珍贵的东西只残留下了灰烬和喧嚣随即陷入空旷或者，是那些灰烬掌握着像星星一般的钻石的辉煌那颗永恒不变的辰星为了波兰1945年5月8日，德军无条件投降，波兰解放了。但斗争和死亡并没有结束， 这两样似乎始终和生存如影随形。那些大人物——苏联镀金（抑或避难，区别大吗？）回来的高级共产党员，即将荣升波兰卫生部长的市长先生——他们的言说总离不开“为了波兰”。是的，曾经为了波兰，马切克在抵抗组织的战友牺牲殆尽。过去，德国人统治时期，他们为了波兰不惜流血牺牲，他们只是想过上安稳日子。现在，大人物用“为了波兰”为除掉异己背书。战争是结束了，但斗争没有结束，死亡没有结束。那些无辜死去的小人物，不再是因为争取自由倒在纳粹枪口下；而是因为大人物的权力斗争，他们还要继续相互杀戮。那些宣称掌握真理和必须为真理斗争的大人物，他们从来不是真心为了波兰。体制的工具安杰伊和马切克的最大区别是：前者已经嵌入体制，成为体制运行的工具；后者散漫的行事风格和俏皮的语言动作证明他还有人之为人的生动灵魂，他还懂得去爱。嵌入体制的安杰伊只是执行上级命令的工具，他深知除了做好工具，似乎只有监狱的大门是对他敞开的。这种威胁让他放弃思考。市长秘书则完全是个蠢货，他想的只是在体制内晋升发财，却不明白体制对他的利用是以剥夺人性为代价。如果市长代表的是资本主义体制，高级共产党员施祖卡和他的秘书则是代表着来自苏俄的体制。在这两派人物身上展示出的差别，通过细微的生活细节放大。施祖卡更能体现出对虚妄信仰的虔诚和偏执，这种虔诚和偏执让他的嵌入体制更像是天然生长——施祖卡应该相信，他的出生和死亡，都是因为体制的需要，在这种需要中才能体现自己存在的意义。那个醉鬼，市长的朋友，他看出了矛盾的结局：波兰完了。是的，波兰解放了，波兰完了。他说的完了是指内在矛盾的无法调和，基于两种意识形态的强烈冲突。马切克的命运、爱情曾经的抵抗组织成员，为了自由，燃烧自己成为火把。波兰解放了，可火把却熄灭不掉。他的命运开始于点燃的那一刻，一直燃烧，直至化为一堆灰烬，像曾经掉落他旁边的战友的灰烬。这就是他的命运。火把照亮自由，或者被别人用来烧死异己。但不管怎样，他终归要死亡，化为灰烬。区别在于，这堆灰烬闪耀的钻石般的光芒，可以像辰星一样恒久。克里斯蒂娜，马切克爱着她，但他有着恒久的命运——如钻石般的光芒，像辰星一样的恒久——如何让她也嵌入这种恒久呢？在时间的长河中，从某个点开始，他们相遇、相爱、死亡，整个过程虽然发生在短短的一夜，但是，这一夜嵌入了时间的长河。在时间的恒久中，嵌入的这段感情是完满的，任由时间无限延伸，这段完满不再发生任何变化。时间对它的毫无效果，是为不朽的永恒。死亡死亡是每个人的最终归宿。无辜的水泥厂工人，刚从德国的劳役中解脱就面临死亡，他们是值得同情的。但对于生者，那些生存在死亡恐惧下的工人们，他们理解不了施祖卡的“斗争刚刚开始”的忠告，他们只知道，死亡这件事，无法向死者的家属传达。施祖卡之死更多承载的是一种现实考量的愤怒和诅咒。显然他是苏联傀儡，波兰对苏联的愤怒来自电影之外的现实历史，但影像呈现上没有表达一点。施祖卡之死的逻辑在于：情感与工具性的冲突，是他死亡的内在因素。他是深深嵌入体制的工具，作为工具的施祖卡是不能带有情感的。他对儿子迫不及待的相认，隐含他身上有深深的亲情。正是这种矛盾，是他必死的逻辑。他的死亡不啻为诅咒：没有人性的工具，是没有资格体验情感带来的幸福的。马切克的死正如火把的烧尽，只剩灰烬。但灰烬闪耀着钻石般的光芒，如辰星一样恒久。本文开头引用的电影里墓碑上刻的诗，正是马切克的人生写照：那么你就如一把燃烧的火把那些烧落下的一把把灰烬落在你身边火焰，你不知道到底火焰带来的是自由还是死亡耗尽你所有最珍贵的东西只残留下了灰烬和喧嚣随即陷入空旷或者，是那些灰烬掌握着像星星一般的钻石的辉煌那颗永恒不变的辰星"},{"instruction":"从内心刨析的角度请为《我心深处》写一篇1900字的影评","output":"## 伍迪·艾伦：我心深处有一个黑洞伯格曼逐渐形成了一种讨论人类内心的风格，他在诸多导演中形单影只地在灵魂战场中展开了充分的探索。在男女演员为自己的痛苦挣扎之时，他泰然地把摄影机长时间对准他们的脸孔。出色的演员们居于大特写镜头中，尽管教科书并不认为这是种好的电影表现手法。对伯格曼而言，脸孔意味着一切。特写镜头，更多的特写镜头，大特写镜头。他创造了梦境和幻想，巧妙地将它们与现实融合在一起，让人类的内心感受逐渐曝露。——伍迪·艾伦论伯格曼伍迪·艾伦在谈英格玛·伯格曼时，有一个疑惑：他到底是天才，还是一个疯子？这个疑惑如同一个黑洞一样，存在伍迪·艾伦内心深处多年。《安妮·霍尔》在1978年奥斯卡颁奖典礼上大放异彩之后，拒绝领取最佳导演桂冠的伍迪·艾伦，紧锣密鼓地推出新片《我心深处》，表达了自己的失落。那么年轻，便登上了好莱坞的巅峰，不同于他人的沉醉和自负，烦躁和抑郁占据了伍迪·艾伦的内心，接下来他要面对自己，剖析自己，解放自己：我到底是谁？探析这个问题最佳入口是：分析自己从哪里来。每个人都来自原生家庭，生于斯，长于斯，家庭奠定了一个人基本的人格。而探讨家庭问题最细致最深刻的导演无疑属瑞典导演英格玛·伯格曼为神，无人可及，无论是伍迪·艾伦，还是李安，都想从中学得一二。于是有了伍迪·艾伦这部仿佛被英格玛·伯格曼附体的《我心深处》。尽管故事发生在美国长岛，影片却弥散着浓厚的北欧氛围：影像风格庄严、情节推进缓慢、人物压抑阴郁。受契诃夫小说《三姐妹》和英格曼·伯格曼《呼喊与细语》启发，伍迪·艾伦在《我心深处》讲述了三个姐妹面对父母离婚的内心挣扎。纽约长岛，大企业家亚瑟和同样事业有成的妻子伊芙居住在一所偏僻的海边别墅里。夫妻两人已经分居多年，丈夫忍受不了患有抑郁症的妻子经常发作惊恐症，逃离了阴郁的家庭，结识了一位俗气但乐观开朗的新人，并打算与伊芙离婚。而伊芙还沉浸在自己的幻想中，期望丈夫回到自己身边，延续自己不变的爱情。她变得傲慢、偏执、多疑、敏感、易怒，一次又一次发作的歇斯底里将深爱的亲人越推越远。大女儿蕾娜达是一位小有名气的诗人，与一位成就不如自己，常常写不出来东西的男作家生活在一起。感到失败和无能的丈夫，常常与雷娜达发生激烈争吵。他嫉妒着妻子的才华，憎恨自己的黯淡。这让天性浪漫的她烦躁，这段婚姻岌岌可危。二女儿乔伊喜爱文学，嫁给了一位事业有成的导演，牺牲自我的梦想经营着自己的家庭。三个女儿中，只有乔伊照顾着病态的母亲，陪伴着神经兮兮的母亲，听她唠叨不休。她羡慕大姐的独立与潇洒，内心深处希望自己也能成为大姐那样的作家，却深陷世俗生活泥沼无法自拔。绝望的窒息感，让这个聪明伶俐的女人变成怨妇，抱怨身边的一切。小女儿芙琳渴望成为一名演员，过上四处为家、风光无限的明星生活，借以逃离倍感压抑的家庭。而她在好莱坞娱乐圈混的并不成功，除了沾染了风流浪荡的习气，一无所得。灰心的她回到家中，放荡的天性促使她挑逗起自己的大姐夫。因为亚瑟决定与伊芙最终摊牌，他们将三个女儿召回家中，并带回了新认识的情人，介绍给三个女儿。三个女儿对这位她们认为低俗的女人表现出蔑视的态度，并站在母亲的身边试图挽回疯狂的父亲。而她们的父亲却态度坚决，他认为自己活了一辈子，已经尽了一个丈夫、父亲的责任，剩下的人生时光，他希望能够轻松快乐地度过，而只有这个俗气的女人能够带给他快乐。希望破灭的伊芙企图放煤气自杀，被救回之后，又和二女儿乔伊进行了毁灭性的争吵。乔伊说她受够了一个像她这样自私、冷漠、专横的母亲，她的心中没有爱，只有自己无处发泄的憎恨。一直自觉高高在上的伊芙，脆弱的内心被彻底摧毁，在黎明时分，一个人走向波涛汹涌的大海深处。伊芙意识到她的存在不再具有意义。在她亲手构建的只有阴郁别无欢乐的家庭中，她是一个多余的人。她的压抑、敏感、嫉妒、卑微、轻狂、傲慢、冷漠，像病毒一样感染了家中的每个人。在这个病态的家庭里，爱无处安放。乔伊追着拯救母亲，被大海卷入其中。最终，是那个她鄙视的俗气女人，用人工呼吸拯救了她的性命。有人说，人生不可揭穿。真是一个大智慧。活着，疯癫点，俗气点，大红大绿点，自得其乐点，没什么不好，起码不会因为自己的神经衰弱伤害最亲的人。这个濒临深渊的家庭，是一座封闭的孤岛，每个人都被不可篡改的基因复制成彼此，没有异类打破之前，唯一的生还机会是：跳海逃离，搜寻阳光，回归，救赎。乔伊终于开始提笔写作，过去的她已经死了，新的她是被俗气的真实所拯救的，所以她决定重生。这漫长的一生，你想过要干什么吗？"},{"instruction":"看了养鬼吃人8：地狱世界，有点失望，能帮我写一篇影评吗？","output":"当然可以！以下是一篇关于《养鬼吃人8：地狱世界》的影评：## 角色平庸难引共鸣——《养鬼吃人8：地狱世界》今天聊聊美国电影《养鬼吃人8：地狱世界》。片名Hellraiser: Hellworld (2005)，别名猛鬼追魂8。《养鬼吃人7：死魂灵》和《养鬼吃人8：地狱世界》（Hellraiser: Hellworld ，2005）都是2002年10月至12月同时拍摄的。和《养鬼吃人7》临时修改剧本硬蹭养鬼吃人世界观不一样，《养鬼吃人8》是1996年《养鬼吃人4》（Hellraiser: Bloodline）以来第一部原创剧本。这个故事根据乔尔·索伊森的短篇小说《黑暗无法呼吸》（Dark Can\'t Breathe）改编。第8部《养鬼吃人》猛一看和这个系列关系并不大，《养鬼吃人》在本片反倒是成了背景板，原系列里的各种元素在这里变成了网络游戏《地狱世界》里的设定，针头人修道士也变成了吓唬人的都市传说。影片从年轻男子亚当的葬礼开始，亚当是一个年轻人，他长期沉迷于网络游戏《地狱世界》后自杀。随后五名喜欢玩《地狱世界》的年轻人接到游戏主题聚会邀请，于是兴致勃勃地来到富豪马库斯的豪宅轰趴。他们不知道，等待他们的却是一场鸿门宴，聚会组织者早就想对他们下手了。在校园砍杀片开始流行后，传统的老派恐怖电影也在试图跟上观众口味变化。大家也可以看得出，本片采用了类似《惊声尖叫》的基调，围绕着《养鬼吃人》元素的网络游戏展开，甚至都不和前作共处一个宇宙中。而且也由于是背靠背拍摄的缘故，导演里克·博塔（Rick Bota）为了节约开支，在本片中有许多阴暗的场景，仔细看会发现是和《养鬼吃人7》里的场景一样的。尽管影片一开始看起来似乎偏离了《养鬼吃人》世界观，但随着剧情发展，针头人修道士们不断出现，便渐渐把故事拉回到《养鬼吃人》的世界中了。可惜的是，《魔兽世界》在全球范围的大火还有《黑客帝国》关于真实虚幻的讨论都没有能给本片带来启发。《地狱世界》也只是一个电影里名义上的网络游戏，没有发挥出应有的作用。本片以网络游戏为基础，这样就可以使用几张不断闪烁的电脑画面去替代更加费钱的“地狱世界”了。而在利用完网络游戏这个点子之后，影片便和游戏再无联系，剩下就是BDSM哥特式的轰趴。如果把本片中针头人修道士干活的场景删除掉，单纯地就讲述一名极端父亲的悲愤报复，那么本片会是一部不错的青春砍杀电影。强行加入《养鬼吃人》的世界后，原本就很老套的剧情更加变得猪八戒照镜子里外不是人。《养鬼吃人8》又要照顾现代网络游戏，又要顾及传统地狱环节，结果就是故事情节过于松散，难以引起观众的情感共鸣。想不到吧，这部电影里有大超亨利·卡维尔（Henry Cavill）。他在片中扮演了一名重要配角麦克（Mike），这个角色和他本人一样，都是《魔兽世界》狂热粉丝。当然，也不要觉得有大超，演员们的表现就有多好。电影中的人物角色形象单调、平庸，乏善可陈。观众几乎无法从这些人物身上找到任何有趣、引人入胜的玩意儿。这些角色遭遇死亡时，戏里戏外的人往往都是反应冷漠，因为角色间并没有建立起可靠的情感联系。如果你想要补全整个系列，或者来看大超的话，那就可以看一看《养鬼吃人8》。本片也在不经意间创下了单个产品植入广告的记录：全片出现了92次诺基亚3310。拉扯游戏剧情松散，角色平庸难引共鸣。"},{"instruction":"请为《茉莉牌局》写一篇以“人物的个性为电影加分”为题目的影评，字数约1300字。","output":"## 人物的个性为电影加分如果用一个词概括《茉莉牌局》的话，这个词一定是野生，没有别的词语比它更合适了。为什么用这个词？茉莉性格上的顽强让她配得上这个词语，或者说，像是为她量身打造的。还是得先说一说这部电影，对于这部电影，我要说是，颗粒感。请品味一下这个词，小炮不是在夸奖它。看这部电影，让小炮有吃六味地黄丸的感觉，一颗颗数，就怕吃多了，一次只能吃8颗，吃多了，死不死人不知道，但肯定对身体不好。看片之前，对它的期待值过高，但是冗长的旁白暴露出了导演在拍摄上没有天分，电影是什么？是艺术，是画面，一直靠旁白推动，算什么回事？剧情很重要，理一下剧情。茉莉和父亲意见不合之后，她独立谋生，开设牌局发家致富，中间波折不断，最后被拘捕，碰到了辩护律师的慷慨相助，穷困潦倒之后，买不起热狗，用价值800美元的香奈儿手套换一条围巾，最后又和父亲和解，在法庭上，她免于拘留，只需要做200个小时的社工还有一部分罚款。就是这么个事儿，今天的重点不是在这里，而是在茉莉身上。朋友们，之前说过，茉莉是野生的。这个词语，有力量，像荒原上长出的小草，也像沙漠上的植被，甚至是冈仁波齐上的阳光。茉莉小时候，是一位滑雪运动员，体育是残酷的，人们只记得住第一名。茉莉训练受伤，无缘赛场。她在外面，是可以被谈论的，一旦到了家里，不是那样的，她的两个弟弟都在某一方面取得了成功，有一位是滑雪冠军。在这样的环境之下，她和父亲产生了罅隙，她也不想听爸爸的话，最后的结局是什么？需要自己应付生活。所以，她组了牌局，中间被很多人使绊子，摔倒一次，她还要再来一次，在这个过程中，见识到了很多人，赌徒一旦想要扳本，最后会非常狼狈，哈伦是活生生的例子。茉莉身上的那种野生的力量很有魅力，招男人喜欢。法庭上，律师为茉莉辩护，之前，他们有过一场讨论。律师要求茉莉将参与牌局的人供出来，换取自己的自由。被茉莉拒绝了，她宁愿牺牲到自由，而要保护自己的名声。他不是在维护参与牌局的人，而是在保护自己的名字，活得非常有尊严。一位女人有尊严，一定招人喜欢，一定会有人敬佩，真的非常了不起。到了这里，可以划个等号。野生=尊严。茉莉和爸爸吵架，爸爸告诉茉莉，要好好说话，不然，你就自己去挣钱。茉莉为了尊严，自己去挣钱，帮助人组牌局。失去了牌局后，为了尊严，她撬走了老板的客户，自己组牌局。自己的牌局被人挖掉后，又开始找最大的牌局，坐拥几百万美金。最后，被控告后，也在维护自己的尊严，不失去自己的名声。这样的女人没法不爱，但，女人在顽强的时候，也是脆弱的，如果茉莉有机会，她一定想做爸爸的掌上明珠，从世界的荆棘中艰难跋涉，取得的荣耀、金钱、地位，比得上和父亲涣然冰释后的一个拥抱吗？比不了！茉莉和父亲和解了，毫不夸张的说，如果没和解，茉莉在被枪指着醉的那一刻死了，那么，结局将变成《三块广告牌》，只不过母亲的角色会变成父亲。关于两代人对抗的作品太多了，杜拉斯的《情人》中有，老舍也写过《月牙儿》。妈妈让自己的女儿去当妓女，维持她们两个人的生活。两代人的对抗是什么样的？鲜血淋漓！如果处理不好家庭的关系，对于一个男人来说，是失败。小炮想表达的是什么？非常简单。有尊严的女性是美的，她们的美与生俱来却从不主动释放，她们自由又大胆，温柔又脆弱。好好爱她们，这一点很重要！"},{"instruction":"我喜欢《妄想学生会 剧场版》这部电影，请帮我写一篇影评，并在多个角度给出打分。","output":"## 影评，妄想学生会 剧场版史上最无节操学生会再次回归，继TV版，OVA，OAD后，《妄想学生会》系列终于推出了时长1小时的剧场版，干货丰满，段子连篇，笑料充足！剧场版动漫《劇場版 生徒会役員共》（b站在线看）作品类型：搞笑动漫影片监督：金泽洪充故事概述：樱才学园学生会的搞笑日常上映日期：2017年10月2日在中国上映不多赘述，快速进入搞笑剧场版点评。I，众望所归自从2010年《妄想学生会》系列横空出世以来，7年间，陆陆续续推出了TV版1+2季，OVA，OAD若干部。作品以其精妙的暗示性言语（荤段子），俗而不腻的台词表现力，笼络了不少铁杆漫迷。这次剧场版再临，让漫迷觉得非常舒心。II，泡面番集结令有别于通常意义上的剧场版，一部影片讲述一个故事的模式。这部作品虽然美其名曰”大电影“，但实际上却是实实在在的”泡面番合集“，Otaku们可以在这1个小时内，观看十几段短小精干、笑料百出的无节操段子，值了！III，一如既往原作：氏家ト全监督：金泽洪充主役声优：浅沼晋太郎、日笠阳子、佐藤聡美、矢作纱友里、斋藤千和...一如既往的原班人马，让本作特有的搞笑风味很好的延续了下去，当然这不仅仅是简单的”怀旧情结”，更是这个组合所产生的“化学反应”，吸引了一波又一波的漫迷蜂拥而至。IV，笑口常开搞笑的方式有好多种，有恶俗的，有高雅的；有一本正经瞎扯的，也有胡说八道放炮的；无论是哪一类，只要有足够的笑料提供给观众，只要有笑点，就会有受众群。本作的搞笑点在哪？“荤段子”、“擦边球”！当然这些笑点不是众人熟知的恶俗套路式段子，而是新颖别致、又足以让人痴痴傻笑的内涵段子！V，最后彩蛋影片最后，监督预留了近2分钟的彩蛋。樱花树下，会长天草筱红着脸向副会长津田说出了心中的悄悄话。这段画面既暖心，又让人浮想联翩，搭配上舒缓的弦乐与钢琴伴奏，营造出了难以形容的唯美意境，令人难忘。坚守阵地，坐等神作第三季！爆笑登场！监督★★★★☆（铸就了此系列的火爆人气，值得点赞）声优★★★★★（一如既往的出色发挥）剧情★★★☆☆（某几个段子与以前的TV版或是OVA有些类似，略显审美疲劳）视效★★★☆☆（正常水准，无功无过）音效★★★☆☆（OP明显偷懒了，差评！彩蛋中的BGM加一分）推荐度★★★★☆（国庆期间，必看动漫之一）"},{"instruction":"请为《女特工》写一篇以“叛逆特工为自己而战——《女特工》”为题目的影评","output":"## 叛逆特工为自己而战——《女特工》叛逆特工为自己而战——《女特工》今天聊聊电影《女特工》。片名The Operative / Die Agentin (2019)，别名双面特务(台)。《女特工》根据以色列畅销小说《英语教师》改编，讲述一名名叫瑞秋Rachel的女特工故事。瑞秋被以色列情报组织摩萨德招募成为女特工后，被安排前往伊朗德黑兰。瑞秋的个人条件十分符合特工标准，父母双亡孑然一身，没有亲密朋友，没有感情羁绊，简直是从事间谍的不二人选。瑞秋本身也很讨厌原生家庭，迫切渴望远走高飞离开原家庭。瑞秋以英语教师作为身份掩护，从事各项间谍任务。面对摩萨德伸出的橄榄枝，瑞秋很爽快地就答应了。并且瑞秋用自己的天赋和实力，证明自己有成为优秀特工的潜质。就这样，瑞秋打怪升级般的一步步接到各项艰巨任务。如果观众对近代史有印象的话，应该还会记得西方国家刺杀伊朗核物理学家等事件。在这类大事件中，瑞秋都有所参与，并且起到了非常重要的作用。观众们应该记得瑞秋的叛逆出身。瑞秋加入摩萨德的根本原因是因为她的叛逆，而不是对间谍行业或者对这个情报机关有多么忠诚的感情。一旦这个组织让瑞秋产生类似原生家庭的厌恶，瑞秋自然会想办法逃离。很不幸或者很幸运的是，摩萨德这种情报组织根本没有把特工当做人来看待，而是把特工当作可抛弃资产使用。在执行任务时，摩萨德一次次伤害瑞秋的感情，瑞秋逐渐对这个组织产生了厌倦情绪。同时，在执行任务的时候，瑞秋和目标人物法哈德Farhad产生了感情。她主动选择中止任务，挽救爱人。原本特工应该是木有感情的冷血动物，有了感情后自然不能胜任任务。偏偏从小就叛逆的瑞秋并不是科班出身，顶多算是半路出家，自然没有放弃对生活的激情，产生感情也就在情理之中。就这样，对组织的厌恶情绪加上对目标人物的感情升温，瑞秋选择和摩萨德决裂……《女特工》最成功的一点就是，角色造型很符合从事特工职业的间谍们。多年来，观众们被《007》《霹雳娇娃》等系列谍战电影灌输了一个并不正确的概念，似乎那些从事间谍职业的人都是英俊潇洒美艳无双的人儿，恨不得走在路上回头率能达到200%。其实这种观念是大错特错的，外貌条件出众的人反而不能成为特工，只有相貌平平的人才能大隐隐于市，成为隐秘战线的风雨人物。长得太好看的人容易吸人们的目光，根本没时间去搞情报嘛。我认为翻译成《女特工》失去了原有韵味，还是翻译成《双面特务》更加符合实际情况。瑞秋原本是间谍组织的中坚力量，在一系列事件催化后，她将选择不为摩萨德效力，为了自己而战。选择做有感情的人还是做没有感情的机器，瑞秋做出了属于自己的选择。恰到好处的留白会产生美感，绘画摄影包括拍摄电影，都是如此。但又有一个过犹不及的概念，留白留的太多，就会产生空白。把所有东西留给观众自行发掘，那还看个什么劲儿呢。《女特工》在瑞秋和摩萨德决裂后，戛然而止。片尾一众摩萨德杀手准备对瑞秋下手，瑞秋将自己消失在茫茫人群后，字幕出现。仿佛故事才开了一个头就结束了，并不过瘾。叛逆特工为自己而战，暖场完毕后戛然而止。"},{"instruction":"为《人狼》写一篇以“什么高颜值新片我一秒也舍不得快进”为题的豆瓣影评，约2300字。","output":"## 什么高颜值新片我一秒也舍不得快进很久没看到这样吸引人的电影了。打斗场面激烈，枪战戏份刺激。更重要的，演员颜值赛高。完美应了标题，一秒也舍不得快进。《人狼》改编自1999年日本的同名动画电影，冲浦启之执导，押井守编剧，豆瓣评分高达8.6，被一众粉丝称为绝对的赛博朋克风近未来神作。叙事背景宏大，以政治批判为绝对核心，作品风格讽刺又黑暗。在被韩国改编成真人电影后，背景也从日本移植到了朝鲜半岛。虽然同样夹杂着政治因素，但与原作相比显然已经在影片重心上发生了变化。原作更重里子，以内核的沉重闻名；影版则更看重面子，以场面的美学吸睛。所以，本片的优点十分明显，摄影、画面、镜头、打斗场面，堪称教科书级别。同样的，缺点也一目了然，故事重点驳杂，叙事不清，结局烂尾。但纵使如此，它也绝对称得上值得一看。从感性角度来说，这份“值得一看”里，或许还有三成的功劳要归功于演员。男主姜栋元，女主韩孝周。另，郑雨盛做配角。这样的卡司，可谓将影片的视觉观赏度直接拔高了一个层级。当在黑暗的屋子里，点燃烛火的那一刹那，伴随着光亮而出现在镜头里的，是第9届Binggrae小姐的微笑。心都化了的同时，不得不感叹上帝造人时确是对某些人有着偏心。也难怪导演在采访时曾说过类似这样一句话：“这部电影你们就当是来看演员的吧”。影片的开头，用大概5分钟的旁白时间讲述了一下故事背景。“朝韩欲统一，美、日、俄等周边强国为阻止统一后的韩国跃升为亚洲强国，开始了全方位施压。”（思密达可真是高瞻远瞩呢，嘻嘻）在各国的重压之下，韩国群众民不聊生。因此，为了群众的幸福生活，反政府，反统一的党派人士一茬接一茬地冒出。而为了镇压这些党派，政府组织了一批杀人如麻的特警队伍——人狼。他们为杀戮而生，躲在刀枪不入的盔甲里，抹去自己的长相，连人性也隐藏黑暗之中。人狼的设定虽遵循了日漫一贯的中二气质，但在真人电影中，看着他们拿起重型武器对着手无缚鸡之力的女学生们扫射的画面，的确还是让人有点头皮发麻。人狼就是这样一个群体——他们没有人性，只懂得听从命令。一开篇，导演就向观众展现了影片的戏剧冲突点。人狼，到底是人还是狼？接下来的两个小时里，90%的篇幅都在述说人狼们狼性的一面。激斗，血腥，杀戮。黑暗中显现人狼红眼的那一刻，也便是迎接死亡的时刻。在一次未成年儿童被党派人士教唆搬运炸弹，被人狼发现后当场拉开引线自爆之后，人民对于人狼的忍耐终于到达了极致。为平民愤，公安部决定拿当事人狼开刀，并顺带瓦解这个组织。没错，当事的人狼就是我们的男主。为了归还自爆儿童的遗物给她的家人，男主认识了孩子的姐姐，即女主。男主的身份是人狼，女主的身份仅仅是孩子的姐姐吗？当然不。为了制造更复杂的矛盾冲突，女主的身份即是党派人士，又是公安部的卧底。至此，影片的架构完成。大局上，公安部与特警队（人狼）对立。表现到细节上，便是代表着公安部的干部带人剿灭代表着人狼的男主。至于女主则是担当着一个线索的作用，将整个影片串起来。身为公安部卧底，又同时与男主交好的她，可以随时掌控节奏，即故事的转折或延续都由她来完成。影片的两场戏尤为突出，也正是这两场戏，完美诠释了人狼的狼性。第一场，是在高塔之上，男主以一己之力对抗被女主领入的公安部设下的埋伏。冷静，果断，手段凌厉，不留后患。绑着消防水带和女主跳下高楼的瞬间，更是将大胆与冒险发挥到了极致。第二场，穿上人狼制式装备于地下水道中和全副武装的公安部再次战斗。火箭炮，红外线仪，炸弹，标枪，探测仪······穿上人狼装备后的男主，化身地狱农夫，人命在他眼里如韭菜一般，割了一茬又一茬。残忍，狠辣，死则生，生则死。此，便为人狼的狼性。正如我之前所提，全片90%的篇幅都在向观众展示这一特警队的战争机器群体。剩下10%呢？人性。影片的落点也最终放在了人狼的人性之上。结局时，男主的上司让他开枪打死女主，因为女主的党派人士。可男主也不知是为什么，或许是因为爱情，或许是因为人性的觉醒，总之他放走了女主。违抗命令的他，当上司来找他算账时，他是这样向上司吐露心扉：“您知道，无论怎么洗一辈子也洗不掉的血迹蹭到全身的心情是怎样的吗？ 那些孩子没有武器，也不是敌人，并且，刚才那个女人也是如此。 我一直听从您的命令，服从组织的命令活着，但是现在开始，我要按照自己的意念而活，我要离开这个地方”人狼，终究还是人。即使藏在铠甲背后，即使隐在黑暗之中，终究还是人。是人，就会有感情。里昂有感情，荆无命有感情，朴义也有感情。没有感情的杀手永远只会活在段子里。从影片开头，没有感情的人狼，到影片最后，温度满满的男主。这就是电影在138分钟的时长里所发生一切。原本我以为在男主说完，他要离开那个地方，然后一声枪响，影片便可以做个结束，给观众以留白，让观众自己去想象他是生是死，和离开的女主又是否会再有邂逅。可惜，电影终究还是走了商业片的路子，以至拍得太满。女主带着弟弟乘着列车走了，窗外是凝望着她们远去的男主。然而这还没完，结尾还要再强行续接上政治元素。政治元素作为原作中的一大亮点，在真人版改编中已经是极大削弱，本就毫无用处，奈何结尾处仍要勉强。不仅让观众摸不着头脑，更让影片本身也多了几分糟粕。如果可以删减掉影片的政治戏份，另强化感情戏，《人狼》绝对是一部佳作。毕竟影片不仅是镜头调度与光线美学、动作设计，就连对阴影的运用也称得上是标杆式的作品。可惜导演太过顾及原著，同时还不想太过落俗，但为了商业因素又不得不妥协，因此使得影片的败笔显露无疑。不过纵使如此，我还是要说，《人狼》仍是部值得一看的作品。毕竟，韩孝周真好看呀。"},{"instruction":"为《不了神话 宫崎骏》写一篇以“宫崎骏，一个永不封笔的老宅男”为题的豆瓣影评","output":"## 宫崎骏，一个永不封笔的老宅男有一天，出现了这样一个人，他让成人的童话世界重新生长。他，就是宫崎骏。他是那个画出了龙猫、幽灵公主、小魔女琪琪、千与千寻、金鱼姬波妞、借东西的小人阿莉埃蒂的老爷爷。每个人的心中都有一个宫崎骏。从90年代独立创作动画起，宫崎骏就以不可思议的作品获奖无数。拿到了包括奥斯卡金像奖终身成就奖、柏林电影节金熊奖、威尼斯国际电影节“荣誉金狮奖”等一类电影节重量级奖。奥斯卡金像奖终身成就奖2013年，宫崎骏宣告隐退，并表示：“属于我的动画时代已经结束了。大师也会有老去的一天，但仍有很多粉丝对他念念不忘。杉姐今天推荐一部纪录片，跟踪拍摄了宫崎骏“退休”后不为人知的700天。《不了神话 宫崎骏》豆瓣评分高达9.1分。拍摄组来到日本一栋并不显眼的楼房前面，门铃旁挂着龙猫的简笔画。这就是宫崎骏创办的吉卜力工作室，他在退休后仍坚持每天到工作室来指导工作。宫崎骏已经是76岁的老爷爷了，他戴着厚重的眼镜，系着围裙，穿一双破了皮的拖鞋，在工作室走来走去。很像隔壁打扫卫生的老大爷。这个获奖无数的爷爷竟然因为摄制组的到来有些羞涩。上一秒招呼完大家喝咖啡，下一秒就要给大家上茶。虽然宫崎骏的动画作品中都是爱心满满，可在工作中他可不是那么好相处，批评人来，一点也不留情面。比如：你活着难道什么都不想吗？骂起人来太专业了。除了骂人之外，爷爷还开始了自己新的创作。虽说是退休，其实是为了有更多的时间制作自己想做的作品。这也是这部片子最吸引人的一个主体叙事，以宫崎骏爷爷宣布退休后重新制作动画作品为主线，展示他退休后不为人知的生活。众所周知，在CG动画发展迅猛的今天，宫崎骏爷爷背道而驰，仍然坚持亲手一笔一画的进行创作。哪怕短短4秒钟的动画也需要1年以上的时间。对作品的要求也到了近乎严苛的地步，工作室里到处都堆积着他审不过关的草稿纸。因为在他看来：如果创作的是烂片，那还不如毁掉。宫崎骏爷爷把这次的计划称为“梦幻计划”，因为这是他多年未能实现的夙愿。然而这个梦幻计划的实施，并没有想象中的顺利。这些在他的日常小动作中都可以看得出。比如说抖腿：继续抖腿。更烦躁的时候他就不停挠头。杉姐看了也很想试试，感觉灵感好像可以被抓出来一样。自此之后，在片中就经常看到宫崎骏爷爷凌乱的背影。只能说，宫爷爷这一头亲手抓出来的造型还蛮可爱。即使这样，宫崎骏爷爷仍然没能创作出满意的作品。原因听起来很让人难过：他，老了。如果像之前一样集中精力工作的话，身体就会变得僵硬，很快就无法继续工作了。他还自嘲，现在的自己就算用高压锅煮也出不来汤汁。当记者问他：“您创作的动力是什么呀？”他却回答道：“活着总得做点什么，要不岂不是无聊死了”。生命对于每个人来说意义不同，对于宫崎骏爷爷来说，生命就是动画。他不愿意接受CG动画，因为相对于手绘来说CG动画做出来的效果太粗糙了。但是有一天他忽然转变了想法，因为他遇到了新的CG动画师，这让他看到了新的希望。小主人公毛毛虫菠萝就这样在电脑屏幕上诞生了。但宫崎骏爷爷仍然不满意，一次一次的让动画师进行修改。短片开头的这一幕被宫崎骏爷爷修改了无数次。在他看来，CG动画师做出来的毛毛虫太成人化了，刚出生动作不会这么机敏，缺少一种天真无邪的迟钝感。为此，他非常迷茫。把一个简单的毛毛虫改成这样。最终，毛毛虫波萝诞生的镜头，终于搞定。在熙熙攘攘的浮游生物中，他悄悄睁了一下眼睛。宫爷爷掩饰不住的喜悦，终于看到他的笑容啦！毛毛虫小菠萝用CG技术顺利诞生后，让宫崎骏看到了重新做长片动画的可能性。他准备在余下的时间，继续做一部长片动画。从那之后，他伏案工作的时间更久了。为了尽可能的坐在桌子前工作，爷爷不停的变换坐姿。杉姐感觉这是要练成仙了啊。没有办法，整个工作室里最赶时间的就是宫崎骏爷爷了。虽然是动画大师，但毕竟是76岁的老爷爷了，他会像一个普通的老头儿一样不停唠叨时间不多。终日埋头在少男少女青涩的青春中的人物，也开始去参加老年人讲座。回来后还画简笔画，来描述当时的场景。除了做动画之外，宫崎骏爷爷的日常就是参加朋友的葬礼，葬礼多到让人讨厌的地步。昔日共同参与动画制作的同事，一个个去世，让他感叹离别的钟声即将敲响。影片中重点刻画了宝田道世女士的去世消息，这个消息让这个乐观的爷爷很沮丧。他甚至在思考，自己为什么还要奋战在动画制作的一线。保田道世被宫崎骏称为“战友”，两个人关系密切，是吉卜力工作室公认的幕后英雄，几乎承担了宫崎骏动画作品中所有动画设计的工作。影片中的旁白由日本著名声优坂本千夏担任，她在影片中以《龙猫》中草壁梅的身份进行解说。甚至还和宫崎骏有互动，给影片增加了可爱和生机的一笔。虽然失去了战友，虽然即将走向生命的终点，但宫崎骏爷爷依然无法放弃长片动画。影片的最后，他宣布自己的长片动画计划即将开始。老友铃木敏夫（现在是吉卜力的社长）问了他一个很严肃的问题：“你画好分镜剧本后死了怎么办？”宫爷爷的回答是：“那这部电影会大卖吧。”这次的长片动画，他做好了可能不会完成就死的准备。在他的生命中，只要活着就要做动画。有人说他是反核主义者，有人说他是日本的“卖国贼”（因为他对日本抹去侵略他国的历史非常不满）。而在世界上一切心念和平的人们心中，他是一位有良知的动画大师。拍电影就是为了传达世界的美传达世界里未被察觉的美我想用这样的眼光来看世界多么震撼的一句话，尤其是对于我们中国整个电影行业来说，应该面壁思过啊！本该得过且过的年纪，他却还像一个要去参加期末考试的小学生。日夜不停地复习着功课，只为了赶在生命终结前完成自己的下一部作品。把每一部作品都看得比生命更重要。把每一笔每一画都精确到分毫。把每一个小小的动画配角都当做是生命中真实存在过的人。所以这个世界上才会有宫崎骏。加油，老爷爷  ！"},{"instruction":"得知泰坦尼克号上中国人的故事后我很失望，请为《六人-泰坦尼克上的中国幸存者》写一篇3200字的影评","output":"## 真实的泰坦尼克号没有“Lady First”，只有6位被诬陷的中国人文章转自《真故电影》2017年9月13日“真实事件，荒诞表现”1912年的泰坦尼克号。杰克站在船头振臂高呼：“我是世界之王”。甲板上的乘客兴奋地向岸上的家人朋友挥手告别，能作为世界上最安全最豪华的轮船泰坦尼克号首航的见证者，无疑认为自己是幸运的。载着欢声笑语，游轮慢慢驶离了港口，消失在人们视野里，接下来发生的，是我们所从未知晓过的秘密。泰坦尼克号沉没了，船上的2224人，只剩下了710人，生还率仅仅只有31.7％。这是一个什么概念？作为最能证明韩国政府无能的事件——世越号事件，生还率都有35.9％。这还是韩国政府严重延误拯救时机的结果。甚至在韩国，绝大部分人认为这是被邪教洗脑的朴槿惠设计的一次祭祀。在纪录片《潜水钟》，《黄金救援时间内毫无作为的国家》可见一斑。左《潜水钟》，右《黄金救援时间内毫无作为的国家》。因《潜水钟》要在釜山电影节上映，朴槿惠封杀了釜山电影节以及近万艺人。但是泰坦尼克号又不需要做祭祀，救援也没有延误，为何生还率如此之低？根据数据，首先泰坦尼克号上救生艇并没有配齐，仅有20艘救生艇，只够容纳1300人，这就意味着游轮上将近有一半的人唯有等死。但接下的数据也不对，能容纳1300人的救生艇，最终救上来的却仅有710人，只有一半多一点。卡梅隆对电影的细节和历史颇为考究，在拍摄《泰坦尼克号》时，他花费200万美元重新拍摄了餐厅一场戏，只因为当时餐具上没有白星公司的标识。很多细节，我们可以在电影里找到对应的点。当救生艇被发放后，当时除了两艘救生艇满员以外，其他18艘救生艇都没坐满，甚至有些小艇上只坐了12个人，而这种救生艇是标配是65人，能承载70个成年男性的体重。不仅如此，在生还者当中还存在宠物狗，无疑是哪位头等舱权贵的宝贝。当一千多人泡在冰冷的海水里苦苦挣扎时，那些并未满员的救生艇，仅有一艘选择回来拯救落水者，其他的救生艇都远远地旁观。这当中最可怕的事，是你明明知道海那边挣扎的就是你的家人，但由于整个救生艇上人的反对甚至是威胁，你只能眼睁睁看着他们向你求救，持续一、两个小时，直到他们活活被冻死。而你却是被刚刚死去的那群人亲手护送上来的。在这710人当中，活下来的大多数是什么人？我们来看组数据。头等舱325人中，存活下来202人，生还率为62.2％；二等舱285人中，存活下来118人，生还率为41.5％；三等舱706人中，存活下来178人，生还率为25.2％。美国的等级制度在这一刻暴露无遗。当头等舱的人在讨论坐这么多人，救生艇会不会太挤了的时候，三等舱的乘客还被船员们关在甲板下面，找不到一条生路。那么，被人大肆鼓吹的，船上的富豪名流们把生命的机会留给妇女儿童，平静地接受“与船同亡”的命运。这种绅士风度是否有真的存在呢？实际上，应该是“存在”。部分媒体拿泰坦尼克号中男性生还人数338人，女性生还人数316人作为数据，抨击男性活下来的人数比女性还多，绅士风度就是扯淡。这一论证其实是片面的。泰坦尼克号上的男性远远多于女性，1690名男性最终活下来的只有338名，生还率仅有20％。反观泰坦尼克号上425名女性，活下来了316名，生还率达到75％。但是这种“Lady First”却是以等级制度为先，三个船舱阶级对峙的结果。即使同为女性，也是头等舱的生还几率要高。而并非宣传中船上的人用性别原则完全取代了等级原则、阶级原则，展现自己高尚的品质，换取妇女儿童的新生。还原到当时的具体细节，是一位叫做莱托勒的二副举枪镇压了抢船的冲突，提出了让妇女先走这一折中方案。请记住这个名字，一会他还会出现。海上的人争夺的头破血流，岸上的人也不清闲。政府官员和白星公司面对这样灾难的事件，显得一筹莫展。政府官员的担忧没什么好解释的，朴槿惠现在被骂得最多的就是世越号这件事。对于白星公司而言，泰坦尼克号是他们最为之得意的豪华游轮，结果首航就沉眠大西洋了，还死了那么多乘客。这就好比苹果公司马上要推出的苹果8，买到手里第一天全都爆炸了一样，这生意还怎么做？事实上，还真能做。英美两国政府和白星公司一拍即合，紧紧扣住“Lady First”这一原则进行了一场堪称教科书般的“公关策划”——有钱有势的社会精英甘愿自我牺牲，来保护锅炉房长大的穷女孩。在媒体疯狂的虚假宣传下，成功的挽救了当时危在旦夕的保险业、造船业、旅游业，缓解了英美当时尖锐的社会矛盾。矛盾化解了，但责任还是存在的，按照传统，还必须要杀几个临时工来祭天。这时6名中国人走进了大家的视野内。是的，泰坦尼克号上有中国人。而实际上，在电影《泰坦尼克号》中，也出现了不止一次——一个扎着辫子，戴着眼镜的中国人。杰克刚上船时与撞冰山逃跑时都有他根据纪录片《The Six》，当时有8名中国人在泰坦尼克号上，并且有6名存活下来了。75％的生还率，对比男性20％的生还率，这黑锅妥妥扣在你头上。英美媒体反应神速，这艘开往自由女神的豪华游轮怎么会有中国人？要知道当时的美国已经通过了“排华法案”，这八个人绝对是来自中国的偷渡客啊。顺着这条逻辑往下掰扯，为什么中国人的生还率会这么高呢？身为偷渡客的八名中国人自然是一上船就躲进了救生艇里面，一出事就直接把救生艇开跑了。更有甚者，说他们利用了中国人后面的辫子来冒充妇女，借此偷生。别笑，是真的。但实际上，根据纪录片《The Six》中的走访调查，这8名中国人其实是有船票的正常乘客。《丹佛邮报》——在中国，先救男人，而非女人他们受雇于白星公司，乘坐泰坦尼克号前往白星公司在美国的另一条轮船上担任司炉工。而所谓的“排华法案”也完全影响不到他们，因为等他们到达位于纽约的外港时，会直接从泰坦尼克号上转到那艘工作的轮船上，并不会入境。因此不受“排华法案”的影响。而在白星公司的乘客名单中，也可以找到他们的相关信息，因此可以证明，这八位中国同胞并非所谓的“偷渡客”。泰坦尼克乘客档案中八位同胞的名字纪录当泰坦尼克号沉没的那一刻，八位中国同胞从三等舱中跑出。但舱门却被水手所堵住，他们与所有三等舱的乘客一样被关在甲板下面，等到他们赶到甲板时，却已经没有多余的救生艇可供使用。其中五人紧紧抱团，把甲板上一艘破了的小船推了下去，然后跳下海紧抱着小船等到了救生艇的到来。还有另外一名中国人和电影里的露丝一样，爬在了身边的一块门板上，同样被救生艇所救起。然而时局如此，英美媒体肆意宣传六名中国同胞的贪生怕死，不顾“Lady First”的原则，强行开走救生艇，以此来衬托英美绅士的高大形象。六名中国同胞幸存下来后，对面种种污蔑，他们无力为自己发声，因为没有媒体愿意给他们开口的机会。为了保住司炉工这份宝贵工作，他们也不能为自己作任何辩解。《The Six》采访的六位中国人的后辈在国外如此，更令人心寒的却是在国内。文人洪浩在林语堂主编的杂志刊物《西风》上发表了文章《铁达尼上的国耻》。文中先是鼓吹一通西方媒体的所渲染的骑士精神，然后又照搬了他们对六位中国人的描述，把板子狠狠地打在了无辜的六位同胞身上，借此来论证自己的“中国劣根性”理论。可笑又可气，但思来想去，发现在某种程度上，这样一种“正确的政治态度”到现在依然没有改变。尽管六位饱受污蔑的同胞已经逝去，但迟到的正义却并非没有意义，当年弥漫在大西洋泰坦尼克号上的秘密，已经被解开。“对不起”如果你还记得刚刚提及的那位莱托勒二副的话，顺带一说，他当时举起的手枪里没有子弹，坚持殉船以尽责，但侥幸活了下来。并且参与了二战，退休后还划着自己的小船参与了敦刻尔克救援，诺兰的新片《敦刻尔克》中的老绅士原型其实就是他。"},{"instruction":"能帮我写一篇《阖家辣》的影评吗？字数约900字。","output":"当然可以！以下是一篇关于《阖家辣》的影评，字数约900字：## 阖家辣|万水千山总是情，香港人吃辣行不行能看到原汁原味的港片，已经是一种欣慰。哪怕，香港人都已经改吃辣。话说，南方人貌似不太习惯吃辣。然而，谁能拒绝一个“老年妇女”的诱惑呢。不过，故事里头，老干妈不是主角，主角是梁咏琪这样的辣椒酱高手。故事的背景，放在了疫情之下，被困在家中无法随便想吃什么就吃什么的时候，一罐下饭的辣椒酱，绝对是佐餐首选。郑中基被困在家，大概是嘴巴闲得慌。但凡是逮到个人，都得嘚啵半天。一罐子的废话，就像竹筒倒豆子一般没完没了。梁咏琪也是受够了。“房事”被郑中基不止一次的搅黄（这可是梁咏琪心中的执念，话说回来，谁不是呢），好不容易赚点小钱，一样被郑中基捣鼓出去，浑然不知道闷声大发财的道理。这两口子的儿子，是个从小就有志向的人物。然而，这货有俩损友。要钱，比他有钱，要事业，比他有事业。说好的努力奋斗就会拥有一切的呢？到最后，在辣椒酱中发现了蓝海。吴君如在故事里头是负责唱歌的。虽然对疫情也略有吐槽，但吴君如的根本思想还是在要往人多的地方去。当然，吴君如在疫情之下如此“做”，自然是有她的原因的。港片，永远在家庭问题上，满满的套路。故事里头，新一代的年轻人，已经是妥妥的老司机了。好多开车的场面，基本交给了年轻人。说起来，郑中基也是驾轻就熟的老司机了，在故事里头，还是贴心的给了小年轻很大的空间。“又薄又安全”，这种小case，算不上开车吧。至多只能算是个“科普”。当然，从梁咏琪一家开始做辣椒酱开始，就有一个最大的疑问——食品安全问题怎么解决？这个问题，还是必然要发生的。年轻人很困惑，而郑中基很“不惑”，这，大概和阅历相关吧。其实，电影的故事性还是比较杂乱的，如果不是冲着纯正的港片，大概分数会低很多。很多时候，故事在靠谐音梗在支撑，实在是缺乏动力。不过，片尾有惊喜。古仔的出场，有点意外。黄德斌的出场，虽然镜头不多，但“猥亵本质”竟显，确实是个好演员。 "},{"instruction":"能帮我写一篇《良心护士》的影评吗？字数约2100字。","output":"当然可以！以下是一篇关于《良心护士》的影评，字数约2100字：## 《良心护士》：小雀斑、劳模姐实力交锋演绎良心之战《良心护士》：小雀斑埃迪·雷德梅恩、劳模姐杰西卡·查斯坦的实力交锋之作医者有一双救人的手，但也握着杀人的刀。乔治·马丁在《冰与火之歌》一书中，不只一次说过类似的话。而在残忍的现实中，也确有这样的事件。《良心护士》就是基于真实事件改编的一部影片，影片讲述了一个名为查尔斯·卡伦的护士，在工作的16年内，相继杀害了400名左右的患者，没有确切的数据是因为人数太多，多到他记不清楚了。小雀斑埃迪·雷德梅恩在影片中饰演查尔斯·卡伦，昵称查理，一个经常更换工作医院的男护士。查理外表看起来人畜无害，工作起来也尽职尽责，但事实上却是一个披着天使外衣的恶魔。如果说小雀斑饰演的角色是披着天使外衣的恶魔，而劳模姐杰西卡·查斯坦饰演的女主角艾米则是一位真正的天使。作为护士，她专业、幽默、善良，对病患的照顾无微不至，不仅时刻关注病患的健康状况，还经常用幽默和真心的问候化解病患和家属的负面情绪。影帝、影后沉浸角色刻画恶魔与天使这部影片讲述的故事并不复杂，但演员的表演非常复杂、深刻、层次丰富。从开始到结束，演员们，尤其是饰演两位主角的演员完全沉入到角色之中，几乎就是角色本身。他们之间的关系进展不仅是影片本身的情节推进，也是两位实力派演员演技的实力交锋。两位主角都呈现了诚意十足的演技。小雀斑在影片中最炸裂也最让人拍案叫绝的一段表演在高潮部分：查理在审讯室接受审讯，面对警探的质问，查理只有一句台词“I can\'t”，但小雀斑呈献了精彩绝伦的演技。从一开始的冷静，到被揭穿的紧张、惊慌，到拒绝接受自己邪恶一面的愧疚，到抵死不认的虚伪，再到愤怒爆发的顶点，露出恶魔的面孔那种吞噬灵魂的暴躁、邪恶、恐怖直接穿透屏幕，让人不寒而栗。只一个镜头，小雀斑却演绎了万种情绪与故事情节。看这个镜头会完全忽视演员，观众面对的直接就是恶魔本人，在这个镜头表演的尾声，小雀斑还有一个意味深长的带有邪恶与嘲弄的笑容，潜台词就是“你们没有证据，只要我不说，不自首，又能奈我何。”女主演技也毫不逊色，如果说小雀斑的演技是从冰到火的逐级飙升，那女主的演技就像水一样包容、流淌。时而温和，时而激荡，时而柔缓，时而席卷一切……多次获得奥斯卡金像奖提名，并最终在今年凭借传记片《塔米·菲的眼睛》斩获第94届奥斯卡金像奖最佳女主角奖的杰西卡·查斯坦，在《良心护士》影片中的表现也非常出色。无论是在工作时的温暖、善良、游刃有余，还是独自面对疾病、财务压力、家庭压力的无助、挣扎与崩溃，查斯坦的演绎都是入木三分，各种情感情绪都表演得非常自然流畅又有隐性张力。固定特写镜头精微解剖主角世界除了影片取材于真实事件的题材分量，演员们的精湛演技，这部影片让人叫好的另一个地方在于，影片叙事风格的人文思考与拍摄克制。虽然影片的故事题材耸人听闻，但是影片并没有采用任何炫技、浮夸、骇人、暴力的拍摄手法来推进故事，刺激观众。整部影片的拍摄极度简洁、冷淡、凝练，没有任何浮夸的情节冗余和拍摄渲染。镜头语言保持着一种极度的冷静与疏离，不仅给演员留下了充分的发挥空间，在没有任何修饰的镜头之下，任由演员的情绪、情感在不断转化，并给予观众一种持续不断又保持克制的感染力。多次运用固定特写镜头刻画人物是本片的一大特色。在电影中，固定镜头的静止有助于我们发现其中的变化，而特写镜头常被用来增强镜头的情绪。在固定镜头中进行特写就像通过演员的表演对角色进行显微解剖一样，对演员要求非常高。它要求演员的表演从情绪、动作到情节推进尽可能一气呵成。如果是情绪递进层次丰富、情感转化强烈的情节，演员不仅要透彻把握人物的心理和情感，并用眼神、表情或动作精准诠释出来，还不能有任何丝毫松懈。影片对于查理和艾米都有这样的镜头处理。动辄20秒左右的固定特写镜头，在演员所在的特定空间与背景下传递的情感和信息胜过千言万语。多处固定特写镜头的运用，对准两位主角，一正一邪。不仅让观众仔细审视两个主角，也是影片本身的一种冷静思考和对演员表演能力的十足信任。比如，故事一开始就是小雀斑负责的病人因心力衰竭抢救无效死亡。然后一个近40秒的固定特写镜头聚焦在病房外的小雀斑脸上，一系列紧张、不安的神情，看上去完全就好像他在为病人去世而惭愧、自责。这个镜头事实上给予观众的影响是相对正面的，让观众以为透过镜头看到的是一个内心柔软、敏感的良心护士。让观众对接下来的故事发展更有耐心和兴趣。在影片视角切换至另一个故事主角艾米时，有一个艾米做完体检在汽车内20秒左右的固定特写镜头。车窗外，阴冷天气里，雨水如注，车窗内，艾米的情绪转换非常复杂：由对命运控诉的愤怒、绝望，到默然流泪，再到平静接受，然后又用手抹去眼泪，重归坚强。整部影片像是一道谜题，而谜底是需要观众随着影片进展一起思索的，直到影片结束也无法停止这种思索：一个看起来温暖、善良、愿意竭尽心力帮助别人的人怎么会是一个杀人狂魔呢？他的杀人动机又是什么呢？是对家人、爱人的恨，还是因为他在生活中所遭遇的不平？影片没有给出答案，这也是影片较受诟病的部分。虽然它是根据真实事件改编的电影，真正的罪犯至今仍然没有交代他的犯罪动机，但作为一部电影，仍然有更多方式去探索事件发生的深层原因。"},{"instruction":"请为《每天回家都会看到老婆在装死》写一篇2800字的豆瓣影评","output":"## 生活不止眼前的苟且，还有老婆每天的装死生活太苦，需要一些快乐源泉来慰藉。沙雕剧就是一个不错的选择，这些剧你可以捧腹大笑，也可以尽情吐槽。最近韩剧就出了一部《我的老板每天死一次》。顾名思义，就是老板每天都在死亡边缘疯狂试探。女主展现各种骚操作拯救毒舌老板，表现浮夸，剧情奇葩，脑洞够大。但要说到脑洞，岛国人民敢认第二，没有人敢认第一。这不，同样是“每天死一次”，岛国这边“死”的不是老板，而是老婆——每天回家都会看到老婆在装死家に帰ると妻が必ず死んだふりをしていま日本人从给片子起名字时就不走寻常路。像《我想吃掉你的胰脏》，不知道的以为是恐怖片，其实是部纯爱片；还有《母亲去世时，我甚至想吃掉她的遗骨》，乍一看以为是惊悚片，实际是部亲情片。这个取名的艺术，佛了，佛了。相比之下，本片的名字就显得正常得多了，而且片名13个字高度概括了本片的主要内容。加贺（安田显 饰）和千惠（荣仓奈奈 饰）结婚进入第三个年头。在加贺的心中一直有个理论：有25%的餐馆曾在第一年关门，50%在第三年倒闭，婚姻也是如此，三年之痒是常有的事。之所以有这么痛的领悟，是因为加贺的第一段婚姻只维持了三年。今天恰好是结婚三周年纪念日，同样的事会再次发生吗？加贺带着疑问和忐忑打开了房门，却看到了吓人的一幕：千惠倒在了地上，满嘴是血。难道等待他的不是三年之痒，而是妻子之死？！其实，这不过是千惠的一个恶作剧，而加贺却被吓到魂都丢了，脑子里充满了十万个为什么。但加贺没想到，这个恶作剧，是个连续剧，而且还是日更的。千惠在对待装死这件事上十分投入，所用的道具都是大手笔，比如这个鳄鱼……原谅我看到这一幕笑出了腹肌。光有道具还不够，每一种死法都自带剧情：有卷入纷争被刺杀的；有光荣战死的；有被箭射爆头而死的；有外星人用地球人做人体实验而死的；更有的是需要加贺配合剧本演出。真是应了那句歌词所唱的：该配合你演出的我尽力在表演。加贺一开始是满脑子疑问，慢慢地开始配合千惠，再后来就有点不耐烦了。我一天上班的累死累活，回来还要陪你做这些无聊地事？！千惠为什么要这么做，由始至终贯穿了整部电影。直到千惠父亲生病，两人回老家探望父亲，谜底才得到了解答……这部电影的灵感来自于2010年在“Yahoo雅虎知惠袋”（相当于国内的“百度知道”）上一个网友的帖子。这个网友发了个贴求助：如果每天回家老婆都在装死的话该怎么办？她到底希望我怎么做？还有她将来到底想干什么？我完全没有头绪，谁来告诉我？这个令人无法想像的爆笑景象立即引起广大网友回应，瞬间造成话题。后来，日本网络作曲家“ほぼ日P”依据该求助问答帖，编了首曲子，还配上了MV。结果大火，甚至登上了日本产经新闻。电影将老婆每天在家装死的桥段作为切入点，去探讨当下社会的两性婚姻关系。究竟应该如何维持一段长久的婚姻？加贺的部长给出的答案是“爱”。尽管老婆吐槽他睡觉鼻鼾声太大，要分房睡；尽管老婆和儿子去法国旅行不带他；尽管有可能儿子将来只当他是个提款机。他也不打算离婚。婚姻的纽带不只是孩子，而是我爱她。有爱就能维持婚姻了吗？显然还不够。加贺的同事佐野（大谷亮平 饰）和妻子由美子，两人结婚五年，彼此相爱，但最后终究还是离婚收场。原因在于两人对婚姻的观念不一致。佐野认为就算是夫妻，说到底也是不同的个体，不可能完全了解对方。因此，他从来不打算去了解妻子。所以，他不知道妻子喜欢鳄鱼，他也不知道妻子会空手道。而由美子则认为我为你付出了这么多，你却一点都不懂我。两人消耗尽了力气和耐心，只能落得个分手收场。加贺是爱着妻子的，他也了解妻子的喜好。他知道千惠喜欢吃寿司、玉子烧，喜欢的花是向日葵，喜欢Mont st.clair的蛋糕等等。但是光了解对方的喜好还不够，因为男人和女人思维上的差异，导致同一个问题男人和女人会有完全不同的结论。就像看到同一座建筑，在千惠的眼里，它是一座城堡，而在加贺眼里，它是一间酒店。部长教导加贺：婚姻是你怎么想都想不明白的，想不明白就去问就好了。所以，加贺想知道千惠心中的想法，他选择的方式是直接去问。告白也是，直接跟千惠说。但千惠一直没有正面回应过加贺。只是不经意地多次留下同一句让加贺不明所以的话“月色真美”。直到那一次加贺陪千惠回老家，在她的房间里找到了一本书，终于知道了“月色真美”的含义。据说，夏目簌石在教英语的时候，主张将英文“I love you”翻译成“月色真美”，因为这样比较含蓄。所以，“月色真美”成为了日式含蓄告白的一个句式。加贺这时才明白，千惠多次用这种隐晦的话来回应自己的告白。千惠之所以这么做还要从她的童年说起。在千惠小的时候，母亲因病早逝，父亲忙于生计，无暇顾及她。千惠想到了一招：躲猫猫。一开始父亲回家看到她到处乱躲，十分不理解，还有点生气，嫌他不懂事。后来慢慢地，父亲明白到了千惠的用心，她只是想哄自己开心。“你想找我，就一定能找到我”，千惠用这种独特的方式陪伴着父亲。同样，千惠用尽各种方式“装死”，也只是想陪伴在加贺的身边。因为在乎加贺，她才想到用这样的方式来替加贺减压。片中父亲说过，人生有三个坡：上坡、下坡、万万想不到。人生没有“绝对没事的”。一起撑过困境，两个人才算是真正的夫妻。再怎么难看都行，走的是崎岖不平的路，怎么可能滚成完美光滑的球说道底，婚姻是以相爱为前提，同时也要看两人是否有携手走下去的决心。只有两人都有走下去的决心，才能做到相互尊重，相互理解。影片的最后，加贺用了一句“去死都行”来回应千惠的“月色真美”。二叶四亭迷在翻译俄语时，将对女子热情的告白译成了“去死都行”。直男丈夫说起土味情话来，真的是甜死人不偿命。跟同一个人过一辈子看上去是很漫长的，但如果遇到对的人，一分一秒都会舍不得浪费。为了稳稳的幸福，我们偶尔也需要作一作。你爱演，我配合，这样闹腾的生活也很好。有人说过，要跟一个可以玩一辈子的人过才有意思。假如我们可以活到80岁，其实在一起的时间并不算多的，在这有限的时间里，如果我们把时间都花在吵架、冷战，许多一地鸡毛的小事里，岂不是浪费。既然我们都是70亿颗绿豆里的唯一两颗红豆，能走到一起正是因为彼此没有放手。我们更加应该用全部的时间去好好爱你所爱的人。我愿意用爱去慢慢磨平你的棱角。我不愿意将“我爱你”挂在嘴边，我只想在你抬头看月亮的时候，在你耳边轻轻地说一句：今晚月色真美。"},{"instruction":"请为《在越南最后的日子》写一篇以“隐秘的主旋律隐秘的主旋律”为题目的影评，字数约1200字。","output":"## 隐秘的主旋律隐秘的主旋律当你在观看一部纪录片之前听闻它将呈现从未展示过的图文以及影像资料，那藏在极少数人记忆深处的一段隐秘历史即将公之于众，那么纪录片本身作为历史文献的价值便会自然而然地超越其艺术价值，[在越南最后的日子]便是典型一例。该片讲述的是美军在撤离越战泥潭之前几个月遇到的困境。当时北越军队步步逼近，美军支持的南越军队即将崩溃。在北越很可能对南越军队进行“大清洗”的危难之际，美军陷入了道德困境，是服从白宫命令赶紧撤离，还是冒着叛国罪的风险带着南越难民逃离苦海？全片的矛盾点即在此，[在越南最后的日子]做得干净利落，开篇五分钟就直接将问题摆在了观众面前。前面已提及，借助肯尼迪姓氏的天然优势，该片最大的看点在于那些不曾公开的珍贵史料，没有解说词没有字幕没有搬演，一段段新闻片的片段展现在眼前，不容怀疑不由分说，时空的界限被触手可及的真实感打破，逼得人无法呼吸。但光是历史资料的堆砌，就好比24小时的商店监控器是无法成就纪录片的，好的纪录片还需要创造性的发挥。在[在越南最后的日子]里具体体现在“讲故事”上。选了好题材自然有讲不完的素材，但以纪实美学为主导的纪录片如何利用戏剧美学讲故事对导演来说是个考验，故事本身无所谓，关键在于讲述的方法，是讲得干涩无味还是一波三折，要看导演的功夫。[在越南最后的日子]中全片始终贯穿着悬念，一波未平一波又起。罗瑞对于时间的掌控相当好，足够的时间延长了观众对于故事后续的期待，在借用资料、当事人口述、配乐构建的想象情境中(危难时刻的生死抉择)，观众被讲述人(或者更确切地说是导演所操控)的情感所引导。这些或愤慨或怜悯的情感的产生，全得益于罗瑞对人类普世价值情感的熟练掌握。但是，始终游离在讲述之外的，或者说未被感性冲昏头脑的部分观众，很快便会发现一个问题。[在越南最后的日子]并非它表面上看起来那么客观。借用维尔托夫爷爷的话来说：“纪录片中的真实素材必须在一个主题下贯穿起来，这个整体才被称作真实”。那么，该片的主题是什么。在美国士兵竭尽全力解救被困越南难民的故事背后，在赞颂美国人道主义精神的背后，该片隐藏了什么。只要仔细搜寻一下以往的认知，便会发现，越战片中的自省反思精神在[在越南最后的日子]中被遮蔽了。再来看被采访者的身份与背景，美国一方均为上级士兵，越南一方也极少数普通人，彼时的他们都在为美军服务，且在经历了战争的创伤后都举家迁往了美国。罗瑞对于素材的选择性呈现难以让人信服，甚至让人不禁产生怀疑，罗瑞拍摄这部纪录片时是否曾前往越南，为何没有看到越南百姓(而非官员)被采访(他们作为弱势个体本应具有更强的说服力)，为何没有看到越南方面的资料。也许这些都是政治层面上的“不方面”，但可惜的是，这些片面的呈现已经抹杀掉了本片的客观性。选择素材上的不公允，辅以最后几分钟的道德说教，宣扬大美国精神的“主旋律”的帽子已经扣在了[在越南最后的日子]上了。"},{"instruction":"能帮我写一篇《父后七日》的影评吗？","output":"当然可以！以下是一篇关于《父后七日》的影评：## 最后一课，我忘了不知道谁说曾说过，死者是生者的养分，它让我们学会去对面，这可能算是能教我们的最后一课，但你忘了，你从来就不是我们的老师，你一直就是我们的亲人。你教会我们的，已经够多了。“今天你的身体全都好了，无伤无痕，无病无煞，像是年少要出去打平时一样……”听到道士哥哥如是说。他们叫我该什么时候哭，叫我什么时候不该哭，直到我已经弄不清我该不该哭。他们折之前的时候说这八卦，仿佛不像在办丧事一样他们在棺材边聊着你的往事，连我也一同加入了进来。我常常忘记你已经走了在整理照片的时候，我想到当年我去夜市看你们摆摊，上了一天班的我拖下了高跟鞋，你把你的拖鞋给我，赤脚拉着我唱了空笑梦。在听哥说你在洗肾的时候搭讪小护士的事情，我见到小护士来祭拜时，还想到那美妙一幕。在去拿遗照的时候，我想到当年，刚满十八的日子，桥边教我骑摩托，坐在后座给我唱生日快乐。现在我背着你的遗照骑着摩托车，我忘了你已经走了头七前夜，我跟哥说，原来哭丧是这么累的事情，难怪别人时常会说，累到像哭丧一般。我们笑成一团、直到头七家属谢礼的时候，我一直在找你的踪迹，你在哪里？哦，原来我忘记，这是你的葬礼，你……已经走了我时常忘记你已经走了，在四个月后的酒吧里想起来这件事，我跟朋友说起这件事，她们诧异问我怎么没说起，我抽着烟轻描淡写地时候，没关系，我也经常忘记，忘记你已经不知不觉离开了我。因为忙，所以我和哥哥忘了你已经走了，直到哥在面对表亲的镜头问道，父亲已经走了，你是什么心情时，情绪才奔涌而来。悲伤从来都不会随着忙碌被冲淡，时间也从来不会放过我们这样“健忘”的人们。它把那些情绪一点一滴都悄悄收集，等到某个节点、某个场景、某段音乐时……便开始像风湿一般隐隐作痛，然后像海啸一股脑奔袭而来，让我们在当下无法假装自己的平静。道士哥哥说他的正职是诗人，你看这是他写的台语诗：我干天！干地！干命运！干社会！你又不是我老爸，你管我这么多！写的多好，爸……你说是吧，可能在某个时候可能我会想要你来管管我，说说我，指着我的鼻子痛骂我也好。恰如你过生日时候的救护车笑话，你和我一起在夜市唱的歌，在十八岁生日的时候给我的肉粽……还有些生活上偏心的叮嘱。你会跟别人说，你的女儿读书很好，可能考上台大、你会跟别人说，你看，我在跟我的女儿唱歌，还有啊，你基本大事小情都会跟我讲，除了在医院泡美眉的事情。但是你肯定忘记你在18岁那时候跟我说的。别怕，有爸在。你看我是不是什么都记得，但我又什么都记不得，所以我常忘了你已经不在了。是的。我经常忘记。于是它又经常不知不觉地变得很重。重到父后某月某日，我坐在香港飞往东京的班机上，看着空服员推着免税烟酒走过，下意识提醒自己，回到台湾入境前记得给你买一条黄长寿。这个半秒钟的念头，让我足足哭了一个半小时。直到系紧安全带的灯亮起，直到机长室广播响起，传出的声音，彷佛是你。你说：请收拾好您的情绪，我们即将降落。那今天就丧到这里，请您收拾好情绪，早上好，假如再也见不到你，那祝你早安、午安、晚安。"},{"instruction":"我喜欢《十万伙急》这部电影，请帮我写一篇影评。","output":"## 从《十万伙急》到台湾综艺看了《十万伙急》，一向说话很慢的康康这次有点着急了。感觉故事都没理顺。当然，作为综艺大咖这些年，他的好人缘确实赢得了宪哥、王彩桦、小钟、NONO、欧弟等星星客串，可是终究掩盖不了剧本的硬伤。但我真的很喜欢康康那漫不经心的节奏感，作为一部电影，它不是那么精彩，作为综艺电影，很多台湾综艺梗以及吴孟达带来的老式港片桥段，也能看下去。我想到了刷屏的选秀节目，总会有一位导师问：你的梦想是什么？也许康康曾经有个导演梦。尽管有梦的时候还不具备实现的条件。但是现在，条件具备了。所以他就是圆梦而已。这样想来，也就不必认真了。没有什么能够阻挡，每个人对圆梦的向往。说起康康想起了他的老朋友九孔，前段时间九孔参加内地综艺秀，他的团队搭档居然是澎恰恰、许效舜、NONO以及黄镫辉！！！这样一个师徒传承阵容可见他们对内地节目的重视程度。但是首秀节目一般，像是一场盛大演出的开场，NONO从头到尾都在打鼓我也是醉了。这帮人在台湾综艺节目同时出镜的概率都不会高，因为费用一定不菲。觉得近年来台湾综艺咖有些青黄不接，小钟、小马、沈玉琳、小甜甜们已经非常中坚，几乎什么都能聊，什么都能上，他们已经到了开始选并推通告的阶段，但接下来就是严重的断层。全是流星般的不熟脸。再年轻一代就属当年范范的《模范棒棒堂》、黑人的《我爱黑涩会》以及陶子《大学生了没》的弟弟妹妹们，如今已经摸索着找到了自己的定位，确定了各自发展方向，但也多是戏剧和偶像歌手路线，比如古灵精怪的鬼鬼如今拍戏都延展到内地了，丫头和APPLE们开始往综艺方向靠拢，几经波折沉淀下来的王子、小杰以及毛弟的JPM唱跳也是蛮拼的。倒是当年的CIRCUS组合如今让我挺意外的，廖人帅做导演，还有自己的潮牌；EASON如今频频主持跑通告，与庹宗康搭档主持后，偶尔也能爆出一些梗；KID因为敢说敢做，颇受综艺节目欢迎，加上在宪哥的块状节目《综艺玩很大》中担任小队长作为固定班底，更加速了其成长。如今我对于台湾综艺的关注没前些年频繁了。《康熙来了》以及《娱乐百分百》会根据来宾看。吴宗宪的各类节目也会选择地看，他对于各种状况上的过人机智，目前看来依旧无人能取代。最喜欢还是《国光帮帮忙》，帅的孙鹏，憨厚屈中恒，以及鬼马庹宗康，三个大男人默契这么多年，还是很好玩，那些当兵的、喝酒的、把妹的各种鬼扯的话题每次都还能有爆点，挺不容易。有时候我想，这帮欣赏的老男人平均年龄都近50了，新人是不是也要熬到一定年龄才能被人们热爱。太年轻的终究缺乏经验和内在的支撑，比如《康熙来了》助理主持陈汉典，以及《国光帮帮忙》助理主持张立东，后者是复制前者道路，但这两位80后除了模仿，在主持方面终究差把火。去年看陈汉典上爱奇艺的《奇葩说》，还是能看出其软肋。近年来内地综艺节目越来越多，很多台湾明星看到高昂的制作费纷纷飞了过来，有报道说宝岛大咖们国内录一集的费用是台湾的近百倍。费用高是好事，但是我看他们来了以后，自身的特点并没有很好发挥，只是为了节目增加了一个亮点而已。拿钱轻松，何乐而不为？台湾明星在内地成功发展的目前我看也就欧弟一个人而已。但欧弟的成功不具备代表性。首先他个人确实很勤奋，这点不可否认。可贵的是，芒果台的《天天向上》整体主持风格都是很偏台湾综艺的，比如大家会找一句话或某个词语的谐音进行夸张；比如说到某首歌大家突然就合唱起来；有时还要拱会跳舞的人来一段；会模仿的当然也不能闲着，随时都要准备好被点名等等......努力的欧弟遇到了合适的平台，人气是早晚的问题。对了，之前九孔来内地参加的节目，表演两场就惨遭淘汰了。究其原因，台湾综艺和内地综艺终究是两个概念。不是那些放下烤腰子，捏着嗓子学娃娃音的主持就可以假装台湾综艺感的，也不是说请多少位外援就能改变的。其实内地很多可以开发的模式，只是大家都喜欢生硬的抄袭，却不愿创新。两地综艺有文化的差异，有地域的差异，最主要的是——思维模式的差异。同一个梗，当谐星们说出后在台湾可以笑到爆。但在内地，我看见很多次了，一个梗抛出来，现场人们大多茫然望着镜头，仿佛是摄像师讲了一个冷笑话。——————END——————"},{"instruction":"请为《安乐乡》写一篇以“《安乐乡》中的乌托邦与异托邦”为题目的影评，字数约7100字。","output":"## 《安乐乡》中的乌托邦与异托邦引言本文通过解读利桑德罗·阿隆索 (Lisandro Alonso)的电影《安乐乡》 (2014)，阐释了米歇尔·福柯提出的乌托邦和异托邦概念，以便通过电影来理解福柯的理论基础，及阿隆索对此的批判性看法和他采用的叙事结构。我们试图表明，这部电影和阿隆索其它的作品都在经历着从乌托邦到异托邦的转变，他借用一种新的讲述方式，在不失连贯性的情况下对空间进行着穿越与弥合。关键词：安乐乡，乌托邦，异托邦，转变“古人说，安乐乡是一个神话般富饶、幸福的土地。许多探险队都在寻找它，证实它的存在。时间逝去，这个传说逐渐失信。唯一可以确定的是，所有试图寻找这个天堂的人，都在旅途中迷失了方向。”引自《安乐乡》（Jauja,2014）历桑德罗最新的电影《安乐乡》（Jauja）以此题词开头。这片土地——真实抑或想象，人与空间的关系，居住者与行者，物质和精神——便是其戏剧性发展的源泉。显然，《安乐乡》隐射的并不是秘鲁的某一城市，而是一个中世纪的传说，一个富饶的、自得其乐的领土。当西班牙殖民者到达美洲，尤其是当皮萨罗到达了安第斯城市Jauja时，大肆挥霍着财富与食物，安乐乡的神话因此被改写。让我们对上面的引言感兴趣的是阿隆索最后的那句话。到达、迁移和寻找一样毫无意义，因为所有试图去向那里的人都“在旅途中迷失了方向”。我们从中可知，阿隆索不再试图将目光放置于寻找的旅途，对乌托邦的盼望以异托邦终结。换句话说，从幻想到确定，从一个不存在的空间到另一个空间，这是未能接近乌托邦空间的挫败感的产物。因此，这篇文章便是为了研究《安乐乡》中的旅程是如何以福柯于1966年12月7日在法国文化无线电会议作为理论支撑的，其致力于探讨乌托邦和文学的关系，即乌托邦和异托邦。“安乐乡”一词没有在电影里出现过，只出现于题词。这指涉了一个真实的乌托邦，归因于福柯的定义过程：没有实体的国家和没有年表的历史都存在。城市、行星、大陆、宇宙，它们的踪迹无法在地图上被定位，也无法在天空中被识别，这仅仅是因为它们不属于任何空间。毫无疑问，这些城市、大陆、行星都是由人的头脑所构造，又或是从话语的间隙中产生的。口传的故事、梦中出现的场景，都是内心的空虚。我所指的，以上所有，都是那甜蜜的乌托邦。（福柯，2008）影片中唯一可能提到乌托邦——一个甜蜜的乌托邦空间——的地方，就是当皮塔卢加中尉提到祖鲁阿加上尉的时候，后者就像是原住民的乌托邦世界的管理者。但迪内森船长的目标不是去找到这一乌托邦，他希冀能找到另一个被称为“苦痛”的乌托邦空间。对祖鲁阿加领土的影射切合了整个故事。因此，人们可能想知道为什么阿隆索会以一个乌托邦空间来命名自己的电影。只有向乌托邦迈出第一步，才能更接近它的幻灭。对福柯来说，它的“踪迹无法被定位”。乌托邦所指的是一场重大的价值探寻，而它不存在于任何地方。而同时，与此相反的，他深刻描述了“人类头脑中”的构想，以及是什么驱使着他们走向疯狂，就像阿基尔或迪内森上尉。迪内森船长出发寻找女儿，她的缺席在短短几分钟内就使他产生了“内心的空虚”。尽管知道，对于一个本就不属于这个地方的人来说这样的寻找十分困难，他还是出发了。皮塔卢加中尉提出要陪伴他，但他拒绝了：这是他的使命，他必须前往一个一无所知的终点（潘帕斯草原是如此相似），但他相信他最终能够到达某一个地方。这条道路是唯一一个能将他与他的文化、他的空间、他的生活联系起来的重逢之路，但也同时是一条与本我分离的道路。当他知道自己的血统已经丧失，他便出发去寻找血统。这是一条充满挫折与困顿的旅程。然而，我们认为，这部电影最主要的发展并非一种乌托邦式的愿景，而是与福柯相吻合的异托邦理论；或者更确切地说，正是由于乌托邦，观众才发现了异托邦：与空间相对，其它空间成为了“对我们所处的现实空间的神话式的、现实的反驳”。（福柯，2008）因此，阿隆索勾勒了一个恒定的异托邦空间，这是一个没有终点的、没有时间的、边缘化了的空间。简而言之，他者与无数的镜像空间都会不断出现。为了与《安乐乡》相对应，我们将参考福柯所提出的异托邦学说和异质拓扑学原则，通过文本解读来进行分析。第一个原则，他假设“或许任何社会都存在异托邦”（福柯，2008）。《安乐乡》中描绘的社会就是建构的社会。实际上，迪内森船长正在构造着什么。在潘帕斯草原之中，没有房子，没有城市化，空间里唯一的住宅空间是几个零星的帐篷，以及一个显然只能侥幸寄居的洞窟。就其整体而言，这个空间处于另一种社会的边缘位置，它有组织、法律、传统，例如有能力组织一场舞蹈。影片中提到的战队领袖不住在潘帕斯，他或许住在某个城市，住在一个端庄的、资产阶级的、受人尊敬的地方，在那里甚至可以举办一场宴会。然而，潘帕斯平原开阔、奇异的空间与掌权者所在的地方不同，它是一个“椰壳”般的空间，人们通过工具手段一点一点地对其进行侵略，以此消除了它是异质空间的可能性。占有空间是支配空间的前提。考虑到广阔无边的潘帕斯平原也同样存在着边缘自治社群，祖鲁阿加上尉——他居住在一个被现行法律所抵制的地方——便是这个异质空间中的一个有趣的阻碍因素。他像一个疯子，福柯会把他放置于他所提到的异质空间：精神病院。他对异托邦异常性的描述为：“这样的地方为那些行为与平均的、正常的行为有所偏差的人设立”（福柯，2008）。祖鲁阿加上尉从一开始便产生了偏差，那是一个受法律所管控的地方。换句话说，在这个已然是另一个潘帕斯的平原，有着印第安的、椰壳”般的领地，有着一个空间专门为那些脱离了现世社会而存在。如果从克里奥语来看异托邦，从原住民的角度来看乌托邦：迪内森船长作为文明世界中一个土生土长的欧洲人，是为了什么而来到这样一个不同的空间？在那里，他唯一的愿望是保护他的女儿、他最宝贵的财富，以免受来自南方的、其它大陆和文化的污染，并在那一空间中屈服。他想由支配者转为受配者，也或许是以免转变为他永远不想成为的另一个人？如果他的女儿茵格不反抗他，没有在幸福的“安乐乡”土地上追求自由和独立的爱情，她会怎么样？因此，潘帕斯可以被认为是丹麦女孩茵格的乌托邦，在这里她有幻想爱和自由的空间；同时这也是她父亲的异托邦，它使他摈弃了现实的桎梏，将他复制为一个新的居住者。因此，我们可以看到，这一故事角色们所在的重要空间有着有趣的模糊度和复杂度，这有助于将故事视为能被不同居民所能感知到的移动的、动态的空间。在此，电影对凝视、感知的兴趣，不仅仅在角色们在功能维度的兴趣，还有观众的兴趣——他们必须不断地变更自己对故事发展的看法，且持续对微弱的情节保持注意力。而微弱的故事并不是零叙事。“比起能给多少信息，我的电影更注重和观众的直觉交流。如果没有观众，我的电影就没有信息。”（克拉普，2014）福柯的第四条原则陈述如下：事实证明，异托邦通常与单一的时间片段有关。如果各位能够接受，这是一种异时性……最后，还有一些异托邦与通道、转化和再生有关，而不是节典。（福柯，2008）在这里，福柯所指的是19世纪的学校和军营，它们的存在是为了让青少年、男性和监狱承担二十世纪的再生功能。我们能明显地在《安乐乡》中看到迪内森船长穿越潘帕斯草原这一异托邦将他卷入了另一个时间，一个错位的、制造了有趣转变的时间。从个人层面而非社会层面来说，迪内森进入了一个不确定时间，一段架空的历史，可能来自梦，也可能来自幻觉。洞穴——另一个异托邦——隐藏在社会空间的暗处，是一个躲避社会的地方（就像福柯提到的妓院），成为了帮助船长认识自己、观察自己的空间。这不仅仅发生在某一边界或边缘地带。空间已不再重要，唯独时间。之后，观众对一系列的都会镜头感到疑惑。比起在另一空间内的表现，更重要的是它们在另一个时间内。对这一系列镜头的疑问各种各样：我们看到的是迪内森船长的梦境、想象，在那里他为女儿规划了一个幸福的未来，其中却没有他自己的存在——他是与潘帕斯草原同化了，又或许是已然死亡？若我们看到的正是船长诗意的死亡的隐喻及其危险旅程的终点，如同一场没有指南针的寻找（指南针在茵格手中，洞穴中的女人却拥有了它），这是否说明了我们看到的影像便是对上尉死亡的确认？或许，所谓阿隆索借用了大卫·林奇风格的这一说法很难让人理解：“人们能梦见自己从未见过的东西吗？这些东西拓宽了我的局限”，阿隆索说，他询问了另一种意见，又或是在思忖是否与他的相似；但他很快就把它放在一边，“我发现很难找到电影中用以描述事物发生的语言，我更愿意沉溺于图像。这就是我经常遇到的情况，比如，我没有兴趣和林奇进行比较。你不知道某事为什么会发生，但总有什么在等待着你，就像我看到一幅我很喜欢的画一样；也许我无法解释、破译它们，但这些东西令我望而却步。它们从未将我拒之于外，可总有什么是存在的。这一点我希望能通过电影来表达。（克拉普，2014）电影的最后一段是否对应了一个空间，一种拓普斯，或一个女孩失去了双亲的现实？她迷途而返，渴望着“四处跟随她的人”；这个人就像一条异化为人的幼犬，它一直想念着她，并因她的缺席而困顿？我们相信，出于分析和解释的目的，质疑、提问比提供答案更为重要，这促使我们找到这部电影的意义：从乌托邦过渡到异托邦的公路电影，将观众带入了一种感性之旅，改变了他们对故事的感受。它削弱了透明度和因果关系，却向诗的维度、幻想的维度开放。福柯的最后一条原则指出：正是在这一点上，我们无疑接近了最重要的异托邦。所有这些对其它空间的挑战皆以两种方式来进行：要么像阿拉贡所说的那些妓院，它们谴责现实世界，使得除其自身之外的现实成为幻觉；又或者正好相反，它们创造了另一个如此现实的完美世界，它是那么细致和整洁，而现实世界却如此失序、混乱。（福柯，2008）这最后一点无法不令人联想到与电影可能的联系。迪内森船长出发去寻找一个乌托邦世界：他要在某处找到自己的女儿，无人知晓如何抵达，彼处又会是哪里；他拒绝当地人的帮助，带着军刀和武器，穿着制服独自上了路。要在荒芜的潘帕斯草原上实现乌托邦式的愿望，不论怎么看，他都会被一个不属于他的空间所淹没——这一空间属于他者，属于那些创造乌托邦以及异托邦的人——他承载着这种挫折，企图创造一个“真实的、完美的、细致且有序的空间”，就像洞窟——一个想象性的空间——“当我们的空间是无序的、混乱的、令人困惑的”。寻找乌托邦的徒劳无获使他创造了一个异托邦：洞窟。在其中，他发现了一个混合了现实和想象的容器空间（福柯反复命名的妓院构建了异托邦，于此处人们在现实世界中寻找违禁品），它允许宣泄，用自己偏好的言语进行对话，一种满足饕餮盛宴的可能性。又或许：茵格已经老去；在迪内森船长想象中的乌克兰世界中，这个女人没有忘记自己的语言，没有伴侣，只有一条狗的陪伴？这一空间甚至可以成为另一个空间的发生装置：它清晰、明亮，是一片失落的故土；一个年轻女子侥幸留下，爱犬围着她，她幸福却失落。人的心灵能否制造这样的空间，以保护自己免受苦难和不幸？就像阿隆索提出的：“你能梦见一些你从未见过的东西吗？”问题的答案，就在《安乐乡》的图像中。从乌托邦到异托邦在第二部分里，我们将不再以此前的分析来解读影片的叙事策略。专注于空间价值的基础概念让我们能够继续深入研究历桑德罗·阿隆索电影中独特的叙述方式。因此，我们回到之前引用的前言，它正是可作为参考文献，并具有指示功能的目标文本。一开始，古人将自己确定为知识的主要载体，而这个定义脱离了语境，含义模糊。语言的歧义便是阿隆索想要在电影的结构中展示的意图：一种模棱两可的语汇，通过特定的叙事加以表述。古人是谁？答案可以有很多，每一个都可以成立。他们可以是单独的个体，多样的村落，甚至是征服者本身。那么，这些古人都在预言着什么？乌托邦存在，那是一片富足的、幸福的、神话般的土地。这个形容词的使用可以达到同样的效果。“安乐乡”在想象中的真实社会里是一个神话，但在叙事中，它对很多人来说似乎是一个现实的存在。皮塔卢加中尉也如此承认，并非毫无怀疑。“安乐乡”是一个可被理解的空间。但如果从乌托邦中选取一个地点，不论怎么样，那都会是一个将永远被找寻的空间；也就是说，会开始一场冒险、一条行路、一种企图，以便寻找一个或许存在的实体，哪怕人尽皆知这一可能性的渺茫（“人们一如既往地奢求”）。他们探寻着很早就知道了的东西（“他们清楚地知道”），搜索是毫无意义的。这一模糊的歧义变成了矛盾，在文本的最后被清晰呈现：所有试图到达安乐乡的人都失去了方向。简而言之，正如上文所说，寻找的目的便是为了不再寻找。具有价值的正是寻找行为本身，对乌托邦的探索、对真实异托邦的发现都是值得的。我们相信这便是阿隆索创作这一叙事结构的原因，在他之前的作品中便可见其端倪，尤其是《再见伊甸园》（2004）和《利物浦》（2008）——角色们出发去寻找，但无从得知他们是否找到了他们所寻找的东西，甚至很难去设想他们是否能够找到。这不是去寻找女儿或母亲，或再一次寻找女儿。这其中有太多意义需要在旅途中被找到；若没有找到，一种变革性的体验也会在途中出现。《安乐乡》可以被认为是一部典型的公路电影。虽然作为主角有着明确的旅行目的，但最重要的，是在这一寻找的路途中发生了什么，是对这片土地的探索，以及他是如何转变的。而这种私密的转变甚至和人物的心理有关。人物的转变并不是这部电影唯一感兴趣的东西。影片中，涉及变化的有多个不同的层次，这其中包含了一种复杂的概念框架。只有通过分析性的视角，我们才能观察到电影中不同的过程、段落与转变，以便重新定义乌托邦向异托邦的过渡。首先是迪内森船长作为主角的转变——从寻找女儿到寻找自己的身份；寻找乌托邦的目标向寻找异托邦的目标进行转化——寻找他的女儿，便是寻找他的幸福、他的欲望、他的安适，寻找一个静止的空间，或甚至是寻找自身与祖鲁阿加土地（同时也是“安乐乡”的土地）之间的可能关联；这一特殊的空间直接指向了与库尔兹上尉1所在空间的互文：他正在寻找一个收容空间，收容他寻而不得的痛苦。从潘帕斯草原到洞窟，每一个他者空间都孕育着梦幻的、通灵的、如真实一般虚幻的扭曲。第二点，乌托邦景观的转变明确指向了物理空间；而乌托邦景观指向的即是心灵空间。其次，则是从现实景观到梦幻景观的一种转化。或许反之而言，在《安乐乡》里，什么是梦境，什么又是现实？整部电影都可以被看作是一个当代的丹麦姑娘住在乡间别墅时所做的一场梦；也就是说，电影在最后的几分钟之内改变了观众对故事的看法。第四点便是逻辑的转变，同时也是叙事方式的转变：从因果到联想。电影反映现实的观念在慢慢转变，对梦的现实性、无序中的意识和出于联想的理性因果论的限制都在逐渐消除。第五点，观众的转变：信息从被动地给予到策略性的刻意隐瞒，观众的感知和认知因此发生改变，“一种让我们观察去观察的电影，它激发感知，最终作用于思想（……）它让观众不禁自问：‘这是什么电影？’”（贝登多夫，2007:35）通过这样的方式，利桑德罗·阿隆索在接受帕梅拉·比恩佐巴斯的采访时解释说：“我想在主角意识到他不会再见到女儿的那一刻之后，他一定会受到情感的冲击。我想把这一时刻作为将电影的分节点，因为我觉得这个角色开始崩溃，这看似奇怪，实际是开始了另一个维度的叙述、另一个层次的阅读，等等。如果观众始终保持平静，他则是想拿走这份平静。他一点点加大力度，给观众施加刺激——我也喜欢看那些给我带来这种感觉的电影，这施与我压力——并让他们去观察这个故事能发展到何处。”（比恩佐巴斯，2015）第六，与之前的作品不同，我们可以在这部电影中看到利桑德罗·阿隆索对摄影策略的改变：一条重要的线索保持了电影的连贯性，这让我们能把它看做一个复杂的、多维的整体。利桑德罗本人也指证了这一点：这部作品相较于过去的确是一个转变（或转型）？从一种混合了叙事与非叙事的粗糙的、极致的现实主义到人为参与。这一迹象在这部作品中得到集中体现。阿隆索选择帝莫·萨尔米宁作为该项目的摄影指导并非巧合，后者指导了大部分阿基·考里斯马基的电影摄影，其电影的摄影风格都以非自然主义为标志。“有时候我会问：‘帝莫，这光是哪来的？这看起来像在拉斯维加斯。’他会看着我，回答说：‘光来自灯。我们必须创造一种幻觉。’对他来说，电影正是为了制造幻象。如果你创造了幻觉，那就忘了它，不要害怕人们是否会思考它是否真实。这是一个新的尝试。过去，我的电影都不会激励我，因为我觉得那很假。我不敢放手去做或制造幻觉。我其它的电影更贴近现实，都是真实的、确切的行为，它拒绝谎言、伪造，从不试图去说服什么，而是尽可能地保持客观，而不是通过我的双手来组织故事。”（比恩佐巴斯，2015）结语利桑德罗·阿隆索的电影是异托邦电影，一种置身于另一个边缘空间的电影，设计了不同的制作和叙述模式，位于主流之外。爱德华多·卢梭将阿隆索电影中的差异性定义如下：阿隆索一直在设计的那种影片，除了专注于讲故事（一种基于良知的、围绕着假定命题而建立的永恒使命），还要求这一艺术形式具有更基础的意义：为某种文化作出视觉和声音的贡献，扩大观众对时空构成的视听认知。（卢梭，2011:20）。"},{"instruction":"为《无双》写一篇以“从张静初抽的那根儿事后烟谈起”为题的豆瓣影评，回顾中国电影中的女星抽烟情节，约4700字。","output":"## 从张静初抽的那根儿事后烟谈起不是美，是性感犀利、有杀伤性，幼嫩的皮相下潜伏着一枚暗器般的老灵魂。做完爱以后，张静初开始抽烟。她打算好好享受这支烟，最后一支了。抽完这支，她就得跟眼前的男人开船离开，之后同归于尽。船上埋了炸弹，她来掌舵。男人抱着红酒上来，布下几碟子小菜，兴致勃勃地跟她聊未来的生活。然后她敲下按钮，船就炸了，远看像一大朵焰火。这些场景在她心底预演了太多遍，想不到临了临了还是会掉眼泪。男人尚不知情，在酒店房间里和她温存，还轻飘飘吐出一句安慰她的话：其实真的假的又有什么关系，只要我们尽量爱得真一点，不就行了？“好，特别好。”她坐在沙发上，颓然地应着，身上只穿了胸罩和内裤。然后抽出一支烟，打火机噼啪噼啪，点燃的瞬间，照亮了她盛满泪水的眼。这是电影[无双]里最美的画面，一度跑上了热搜——“张静初”，后面还挂着四个字：含泪抽烟。杜拉斯说，“女人美不美，不在衣装服饰、施用的香脂价钱贵不贵。究竟何在，我也不知道。反正我知道一般女人以为问题是在那里，我认为不是。”那大抵在于抽烟的样子。影史第一个抽烟女郎，是阮玲玉。[神女]里，她演一个靠出卖肉体养家糊口的暗娼，穿白底儿旗袍坐桌案子上，口里头叼着烟。男客识趣地给她递火，她却连抬眼皮子都懒怠。之后烟草点燃，她轻轻嘬了一口，立时便像一朵阴郁沉闷的云开了一条缝，露出影影绰绰的光。第二年，她又紧锣密鼓地拍了[新女性]，从暗娼摇身变为知识分子出身的女作家。有西装革履的男人向她示爱，在口袋里摸索，半天寻不着烟。她迅速取了桌上的一支，含在嘴里，点燃，朝着那男人脸上轻轻喷了长长一缕烟。张曼玉扮过她，仰着身，手腕子细细一根，撅着两片唇吞云吐雾，眼珠子不经意看向别处。终究不大像。阮身上有种脆弱的气质，面对灯红酒绿始终满目疮痍。张举手投足都像个得志的新欢，扮相倒比阮的样式多些，是红烧清蒸两相宜。背景是30年代，女子抽烟之风极盛。林徽因甚至专门写过一篇文章，叫“小谈烟”：一个人最亲切的伴侣是什么，要我说的话，那末我要说是烟。伴侣你有各式各样的，可他们是那样地难弄的。《造报烟民表册》也有记载，说“上海城厢共有烟民七千五百五十四人，女民三百二十八人。”陕西人烟瘾也大，“十中有六人，而妇女尤甚”。究其原因，报上有个署名“瘦鹃”的，称“大家妇女争试焉，咸以此为时髦”。《近世妇女之怪现状》里也有一行话，“中国妇女，往往以吸烟为漂亮”可别以为是吊着个锅子的旱烟袋，人讲的是香烟。美丽牌最紧俏。据说设计包装的画家头晚上喝足了酒，瞧见名伶吕美玉的戏照，提笔就画在了烟标图案正中间儿，以粉橙色打底，滚着蓝边儿。吕美玉颇为自得。美丽牌也借着她的人气儿，总是甫一露面儿便即刻售罄，加班生产也供不应求。惹来其他品牌纷纷以抽烟女郎的形象做宣传。尤其是哈德门，变着法儿的换包装，广告词在今天看来颇为色情：“吸来吸去，还是他好。”于是上至名门闺秀，下至伶人妓女、三教九流，没一个不会嘬两口的，嘬了舒坦。以30年代为背景的片子，也总能瞧见吞云吐雾的女子，但各人各色。老舍的《骆驼祥子》，写虎妞“凶相”，像个大黑塔。后来拍了电影，斯琴高娃演的，肉馥馥，撅着嘴吸卷烟，举手投足都透着缺乏教养的粗俗刁泼。倪妮不一样。她演战乱时的落魄妓子，穿俗艳旗袍，手上夹了烟，浅尝一口，仿佛蘸了霓虹声色，颇有风情。那风情是做妓十几年落下的职业病。美国人抗不住，擒了她的手腕子过来，自己往那烟嘴儿上咬。动荡年代的勾引是颇为罗曼蒂克的。学校迁去香港以后，王佳芝也遭遇过这番景儿。是汤唯扮的，圆脸，坐电车靠窗的位子。朋友夹了支烟给她，说“尝口，演戏用得上”。她拗不过，忸怩着吸了，朋友立刻扬起手，“王佳芝吸了，谁还要？”男同学一哄而上，抢着要接。后来便不似这般忸怩，动作里带了些慵懒和轻佻，兴许还有几分傲慢，那种想征服易先生的傲慢。彼时的上海静悄悄，只有北风呼呼地像头野兽在嚎叫。为着取暖，顾晓梦和李宁玉都叼着烟。前者是周迅扮的，任性惯了，漂亮是漂亮，吐起烟来却像小娃娃打奶嗝。所以“顽皮”这词儿多妙，没一个超过十六岁的女人担得起，但周迅能。后者是李冰冰，不知哪里学来一身革命骨气，撇头掐腰时透着坚韧不屈，唯抽烟时裹着女人味儿。王祖贤学不来，她长得忒俊了些，苏州城里声色犬马，和她抽烟的德行不搭噶。她是英气妩媚的，拿得住劲儿。纵是呛咳，也总叫人劝不下口。70年代以后，烟卷子成了港女的物什。没人说得清这风气怎么吹起来的，大抵是为着模仿欧美。因彼时的欧美女郎正上街游行，将投票权、短裙权、吸烟权争了个痛快。还高举着牌子：燃起另一束自由的火把，点亮另一个性禁忌！烟草行业琢磨着，倒是个不错的买卖。便纷纷推出一种女烟，广告上写着“抽烟吧，别吃糖果啦”。港女闻风而动，终日烟不离手，吐纳时眯起眼睛，透着不甘被男权烹煮的、挡也挡不住的桀骜。尤其裹挟着男子气质的女人，如王祖贤。和前文的[游园惊梦]不同，[天地玄门]里，她演女医生Gigi，没了30年代的古色古香，是现代时髦女郎，利落短发，口里嘬烟，俨然一个清秀公子。林青霞更是要了亲命。她在[今夜星光灿烂]里演杜彩薇，头发剃得极短，仰起头来看天，和男人一样手执香烟。吐纳云雾时，眼角眉梢怎么看都是风流倜傥的少年郎。怪不得徐克说：青霞有英气，比男人还英俊。但换回女装又是一副寂寞的臭德行。[重庆森林]里，她一头金发，戴墨镜穿雨衣，演一个错爱了花心男的蠢女人，对金城武说“今天他喜欢凤梨，明天他可以喜欢别的”，说完吸一口烟。她本就是寂寞之人，出过一本书叫《云来云去》，写“打电话倾诉寂寞，电话挂断，寂寞又来”。好在戏里头她得知真相，开枪杀了那个花心男子，而后潇洒地摘掉金发，露出黑发，做回自己。可惜关之琳不行。[洗黑钱]里，她演一个过着上流生活的律师，却也只是面上穷潇洒，终逃不过为情所困。就算看清了未婚夫真面目，也只会窝在大排档里头抽闷烟。余春娇和张志明则是抽烟抽出的感情。是她先瞧上的眼，特地查他口里的牌子。却不懂抽，只是打烟泡、装样子，为的就是在他面前不经意拿烟出来，“让他知道，我是抽骆驼这牌子。”倒还不如李嘉欣。她在[堕落天使]里同样爱着黎明，爱得抓心挠肝走投无路，恨不能即刻叫人拿枪指着头，一声响便爆了，好叫他瞧瞧自己的心。可至少面上是冷的，没有卑微纠缠，只寄情于烟，用力吸一口，再慢慢吐出，释放自己的不安。[阿飞正传]里，刘嘉玲演的舞女咪咪却是近乎疯狂的执着。她爱张国荣，活像发了一场高热，还拿Craven“A”的烟盒挡着眼，偷看他。穆时英有部小说，就是以烟卷品牌Craven“A”为题，写袁野邨第一次碰见舞女余慧娴：她有两种眼珠子，抽着Craven“A”的时候，那眼珠子是浅灰色的维也勒绒似的，从淡淡的烟雾里，眼光淡到望不见人似的，不经意地看着前面。可你看刘嘉玲，哪里是什么维也勒绒，分明是喷涌而出的火焰，带着收不回的爱慕。放眼港片里抽烟的舞女，面对男人时都比她出息的多。似是导演觉出了从欧美传过来的劲头儿快要消耗殆尽，所以悉数给了舒淇、叶童和张柏芝。和前者相比，她们才是真正的反叛。自私、城府，性子刁泼，一把烟嗓说起话来辛辣又尖刻。反正你不仁我不义，我们始终势均力敌，不要说劳什子的“我养你”，请先顾好你自己。内地银幕上的抽烟女郎少之又少。约莫和观念有关。清朝那会儿，烟是妓女的玩意儿。江南的风月场，都是她们给男客呈上烟管子，一道儿吃烟品茶、下棋唱曲儿，慢慢吐气儿。动作也实在诱人，两片唇包裹住烟嘴儿，像含着男人的那活儿，实在妩媚极了。没多久，报上就有人写了《警告性嗜纸烟之妇女》一文，说“妇女喜吸纸烟为吾国近来最盛行之一种恶劣品行，谁知此始见之于倡家妓女，噫！”于是内地抽烟的女人渐少了些，怕显得不三不四。却不代表没有状着胆子尝的，比如巩俐。[周渔的火车]里，她演周渔，打算在火车上抽烟消遣，便滉漾着肥美的胳膊四处找人借火儿，然后吸一口，在过道儿上游走，没其他多余动作。于是性感和端庄，两个看似绝缘的词，因为一支烟，完美调和在了一个镜头里。李梦吸得骚。她在[少年巴比伦]里演一个厂医，穿一件月白小短衫儿，面上有连避孕套是什么都不知道的单纯。可是她抽烟，和那份清纯感产生巨大的落差，登时变得骚哄哄的，让那个成日修水管、换灯泡的少年看了，总抑制不住自己的色情幻想。幻想在她身上发展出某种微妙的可能性。周迅却像个吸毒的人。她叼着烟晒衣服、换轮胎、开出租，询问每个乘客“见过这个男人吗”，消失四年的方文是她的瘾，所以她一直吸一直吸，像是给身体狠狠打一针。她说她一定要找到他，然后骂一句“你他妈的怎么不去死啊”。后来真见了，却只是背他写的信，“昨天我在电视上看到昆明了，你还在等我吗李米？”许晴是娇嗔的。这种感觉在她眼睛里挥之不去，纵然置身于[老炮儿]那一群傍着皇城根儿吃着炒肝儿卤煮随口一句“问候您嘞”的北京爷们儿里，她还是娇嗔的。然后她点烟，散乱着头发，突然一下就成了把世事看得通透的半老徐娘。宁静也能把世事看通透，可是她不宽恕。[新上海滩]里，她演冯程程，终日烟不离手，吐纳时不疾不徐，叫破衣烂衫的张国荣看直了眼睛。不是美，是性感犀利、有杀伤性，幼嫩的皮相下潜伏着一枚暗器般的老灵魂。所以后来她一枪打在张国荣背上，打碎了这一腔执着，她干得出。从此生生死死各不相干，如有毁约天诛地灭。是比港女性子还烈的人，你没见过她示好，没见过她迷恋，她只是脚踩着地，心比谁都要沉。一如[无双]里的张静初。她知道男人不爱她，可没想到对方竟能将这种“不爱”坦然说出。于是她取出香烟，点燃，然后吐出一句话，很轻很轻，却砸得人喘不过气来：好，特别好。后来她敲下按钮，和男人一同炸成了渣滓。你看，她愿意对一切情深意重却不从回头。所以那副含泪抽烟的样子，才不能用性感优雅之类的鬼东西形容，而是从容锐利得不行。杜拉斯说，“女人美不美，不在衣装服饰、施用的香脂价钱贵不贵。究竟何在，我也不知道。反正我知道一般女人以为问题是在那里，我认为不是。”那大抵在于抽烟的样子？不，我改主意了。从阮玲玉到林青霞再到张静初，女人真正的魅力和反叛，从来都是敢喝到大醉、爱到骨髓、恨到同归于尽。只是碰巧，她们都抽烟而已。"},{"instruction":"为《疯狂世界》写一篇以“这个世界可以有多疯狂，让斯坦利 · 克雷默来告诉你”为题的豆瓣影评，约1500字。","output":"## 这个世界可以有多疯狂，让斯坦利 · 克雷默来告诉你给个评价吧:因抢劫锒铛入狱15年的格罗根刑满释放，正驾车行驶在公路上。为了急于逃离警察的监视，格罗根超速驾驶导致坠落下悬崖。后面的四辆车子马上靠边停下，试图帮助他。在奄奄一息中，格罗根告诉这五位驾车者：15年前，他埋了35万美金在圣罗西塔州立公园的一个大\\"W\\"标志下。于是一出需要四个\\"mad\\"字来形容的抢钱闹剧最先开始于牙医梅尔维尔·克伦普（Melville Crump）；家具搬运工伦尼· 派克（ Lennie Pike）；去拉斯维加斯的路上的两位朋友丁贝尔（Ding Bell）和本杰明（Benjay Benjamin）；以及企业主罗素· 芬奇（J. Russell Finch）这五个驾车者和他们的家人之间。这就是由斯坦利·克雷默导演的电影《疯狂世界》（IT\'S A MAD MAD MAD MAD WORLD)。1960年年初，居住在英国的编剧威廉·罗斯（William Rose）构思了一部关于苏格兰喜剧追逐的电影，当时（暂时定名为《那么多小偷》，后来又改名为《少一点认真》）。剧本成型后，他向当时著名的美国导演克莱默（Kramer）发送了大纲，克莱默同意制作和导演这部电影，但故事发生地需要在美国，电影名字也改为了\\"IT\'S A MAD WORLD\\"。让我们继续回到电影中。听了格罗根的遗言后，这四组人首先商量的是一起行动，但如何分配这笔钱始终没有得到统一的意见，不管是什么方案都会有人觉得不公平。他们决定各自行动，先挖到者先得。在35万美金的诱惑下，他们忘了格罗根只是一个陌生人，也忘了自己原先的计划，每一个人都变成了失去理智的，被金钱驱使的动物。为了最先达到目的地，这群人开始八仙过海-各展神通。 家具搬运工伦尼的搬家车坏了，二话不说，骑着小女孩的自行车就在高速公路上狂奔起来：毫无飞行经验的丁贝尔和本杰明把他们自己的安全抛却在身后，试图用最快的交通工具抵达圣罗西塔州立公园：企业主罗素· 芬奇的岳母马库斯夫人是个大胆，势利，且不停发号施令的中年妇女，她夸张的动作与傲慢的姿态为这部电影提供了不少笑料。一路上马库斯夫人不断尝试打电话给住在圣罗西塔州立公园附近的儿子，让他在众人到达前把那笔钱挖出来。没想到儿子与女朋友在家里玩的太嗨，一直没接电话。等儿子接到电话后，以为母亲收到了欺负，一边哭一边飞车去找妈妈：圣罗西塔州立公园地底下埋着35万美金的消息随着众人的疯狂追逐散播开来，顺风车主眼镜男，来美国旅行的英国绅士，出租车司机。。。。。。加入追逐赛的人越来越多。一众人没想到他们的所有行动都在当地警察局的监视之下，为了顺利把这笔钱追回来，即将退休的警察局长官也决定加入追逐队伍里，没想到假戏真做，他最终也成为了被金钱驱使的一员。电影拍摄结束后，斯坦利·克雷默发觉一个\\"MAD\\"不足以体现这部接近3小时闹剧的疯狂与怪诞，他一口气连加了另外三个“MAD\\"，据说他曾考虑要不要把第五个\\"MAD\\"添加上去。如此疯狂的一出闹剧不是什么艰涩难懂的艺术电影，也不会找到发人深省的喻意，更不会有赚人热泪的深情，但其夸张的表演手法，高超的控场节奏让《疯狂世界》这部被推广为“单放映机全景电影的第一部电影”，获得了奥斯卡最佳声音编辑奖，并因其彩色电影，电影剪辑，录音，乐谱和标题歌曲的原创歌曲而获得了奥斯卡提名。为了获得这笔不用赋税的金钱，这群人到底能有多疯狂，又是谁笑到了最后，花生妹墙裂建议客官们不要错过这部奥斯卡大片，保证让你笑爆三个小时。"}]'),X={name:"App",components:{PoemCard:E},data(){return{searchQuery:"",visibleCount:6,poemsData:S,isLoading:!1}},computed:{filteredPoems(){return this.searchQuery.trim()?this.poemsData.filter(n=>{const e=this.searchQuery.toLowerCase();return n.instruction.toLowerCase().includes(e)||n.output.toLowerCase().includes(e)}).slice(0,this.visibleCount):this.poemsData.slice(0,this.visibleCount)},hasMorePoems(){return this.visibleCount<this.poemsData.length}},methods:{async loadMore(){this.isLoading=!0,await new Promise(n=>setTimeout(n,1e3)),this.visibleCount+=6,this.isLoading=!1}}},B={class:"search-container"},T={class:"card-container"},M=["disabled"],N={key:0},I={key:1};function R(n,e,u,d,i,r){const m=g("PoemCard");return o(),a("section",null,[e[3]||(e[3]=t("div",{class:"top-banner"},[t("div",{class:"top-banner-title"},[t("div",{class:"top-banner-title-text"},"🤔 质量即一切 🧠")])],-1)),t("div",B,[e[2]||(e[2]=t("span",{class:"search-icon"},null,-1)),b(t("input",{type:"text",class:"search-input","onUpdate:modelValue":e[0]||(e[0]=s=>i.searchQuery=s),placeholder:"Search..."},null,512),[[f,i.searchQuery]])]),t("div",T,[(o(!0),a(v,null,y(r.filteredPoems,(s,h)=>(o(),x(m,{key:h,poem:s},null,8,["poem"]))),128))]),r.hasMorePoems?(o(),a("button",{key:0,class:"load-more-button",disabled:i.isLoading,onClick:e[1]||(e[1]=(...s)=>r.loadMore&&r.loadMore(...s))},[i.isLoading?(o(),a("span",I,"Loading...")):(o(),a("span",N,"See more"))],8,M)):w("",!0)])}const L=p(X,[["render",R],["__scopeId","data-v-cd15fb95"]]),J=JSON.parse('{"title":"","description":"","frontmatter":{"page":true},"headers":[],"relativePath":"chatai/47.md","filePath":"chatai/47.md"}'),F={name:"chatai/47.md"},H=Object.assign(F,{setup(n){return(e,u)=>(o(),a("div",null,[j(L)]))}});export{J as __pageData,H as default};
